<?xml version="1.0" encoding="Shift_JIS" ?>
<!-- なんちゃってXML version 0.1( ObjectEditor専用 ) -->
<xobject>
<ID>project</ID>
<x0>0</x0>
<y0>0</y0>
<width>200</width>
<height>100</height>
<ID_maker>43</ID_maker>
<objectname>card6_manager</objectname>
<description>新規のアプリケーション</description>
<プロパティ>
<ID>properties</ID>
<LookandFeel>javax.swing.plaf.metal.MetalLookAndFeel</LookandFeel>
<MainWinx0>0</MainWinx0>
<MainWiny0>0</MainWiny0>
<MainWinWidth>1024</MainWinWidth>
<MainWinHeight>740</MainWinHeight>
<MesgWinx0>0</MesgWinx0>
<MesgWiny0>0</MesgWiny0>
<MesgWinWidth>1024</MesgWinWidth>
<MesgWinHeight>745</MesgWinHeight>
<FileWinx0>36</FileWinx0>
<FileWiny0>478</FileWiny0>
<FileWinWidth>578</FileWinWidth>
<FileWinHeight>262</FileWinHeight>
<EditWinx0>347</EditWinx0>
<EditWiny0>0</EditWiny0>
<EditWinWidth>676</EditWinWidth>
<EditWinHeight>541</EditWinHeight>
<PropWinx0>1</PropWinx0>
<PropWiny0>1</PropWiny0>
<PropWinWidth>615</PropWinWidth>
<PropWinHeight>448</PropWinHeight>
<DividerLocation1>2</DividerLocation1>
<DividerLocation2>2</DividerLocation2>
<ToolBarVisible>1</ToolBarVisible>
<ViewSourceAtCompile>0</ViewSourceAtCompile>
<NoSourceCreate>0</NoSourceCreate>
<JavaEditCommand>geany</JavaEditCommand>
<JavaViewCommand></JavaViewCommand>
<HelpCommand>xdg-open ./help/manual.html</HelpCommand>
<ApplicationType>0</ApplicationType>
<CompileCommand0>./compile_java</CompileCommand0>
<RunCommand0>./run_java</RunCommand0>
<GUIDesignerCommand0>java -jar guidsin.jar -java</GUIDesignerCommand0>
<ImportFiles0> import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.geom.*;
import java.awt.print.*;
import javax.swing.border.*;
import javax.swing.filechooser.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.image.BufferedImage;
import javax.sound.sampled.*;
import java.text.SimpleDateFormat;

class Starter{
  public static void main( String args[] ){
    %AppName% ap = new %AppName%();
    ap.ARGS = args;
    ap.Start();
  }
}
</ImportFiles0>
<ProgramStartupCode0> String[] ARGS;
</ProgramStartupCode0>
<NativeHelpCommand0></NativeHelpCommand0>
<CompileCommand1></CompileCommand1>
<RunCommand1></RunCommand1>
<GUIDesignerCommand1>java -jar guidsin.jar -applet</GUIDesignerCommand1>
<ImportFiles1> import java.awt.*;
 import java.awt.event.*;
 import java.applet.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
 public class javatext extends Applet {
   %AppName% ap;
   public void init() {
     ap = new %AppName%();
     ap.APPLET = this;
     ap.Start();
   }
 }
</ImportFiles1>
<ProgramStartupCode1> Applet APPLET;
</ProgramStartupCode1>
<NativeHelpCommand1></NativeHelpCommand1>
<CompileCommand2></CompileCommand2>
<RunCommand2></RunCommand2>
<GUIDesignerCommand2></GUIDesignerCommand2>
<ImportFiles2>#include &lt;stdio.h&gt;

void Startup();
</ImportFiles2>
<ProgramStartupCode2>int main(){
 Startup();
 %AppName%::Start();
 }
</ProgramStartupCode2>
<NativeHelpCommand2></NativeHelpCommand2>
<CompileCommand3></CompileCommand3>
<RunCommand3></RunCommand3>
<GUIDesignerCommand3>java -jar guidsin.jar -cpp</GUIDesignerCommand3>
<ImportFiles3>#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;math.h&gt;
#include &quot;Ekagen.h&quot;
void Startup();
</ImportFiles3>
<ProgramStartupCode3>void Emain(){
Startup();
%AppName%::Start();
}
</ProgramStartupCode3>
<NativeHelpCommand3></NativeHelpCommand3>
<MoveStep>8</MoveStep>
<ImageEditCommand></ImageEditCommand>
<CompilerFileName>javac.exe</CompilerFileName>
<CompileCommand4>./compile_android Test com example test</CompileCommand4>
<RunCommand4>./run_android Test com example test</RunCommand4>
<GUIDesignerCommand4>java -jar guidsin.jar -android</GUIDesignerCommand4>
<ImportFiles4>package com.example.test;

import android.os.Bundle;
import android.app.Activity;
import android.view.View;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.widget.Button;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.widget.EditText;
import android.text.SpannableStringBuilder;
import android.text.TextWatcher;
import android.text.Editable;
import android.graphics.Matrix;
import android.graphics.Typeface;
import android.graphics.RectF;
import android.graphics.BitmapFactory;
import java.io.*;
 import java.net.*;
import java.util.*;
import java.text.SimpleDateFormat;
import android.media.MediaPlayer;
import android.os.Handler;
import android.content.res.Configuration;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.app.Activity;
import android.graphics.Color;

import android.widget.AbsoluteLayout;
import android.widget.*;
import android.view.Gravity;
import android.view.View.OnClickListener;

import android.hardware.Camera;

public class HelloWorld extends Activity {
  public void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    %AppName% ap = new %AppName%();
    ap.ACTIVITY = this;
    ap.Start();
  }
}
</ImportFiles4>
<ProgramStartupCode4>Activity ACTIVITY;
</ProgramStartupCode4>
<NativeHelpCommand4>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.example.test&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot; &gt;

    
    
  &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.usb.host&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt;
  &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;

  &lt;uses-sdk android:minSdkVersion=&quot;3&quot; android:targetSdkVersion=&quot;21&quot;/&gt;
  
 
    &lt;application android:label=&quot;@string/app_name&quot; &gt;
        &lt;activity
            android:name=&quot;HelloWorld&quot;
            android:label=&quot;@string/app_name&quot; &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</NativeHelpCommand4>
<HtmlEditCommand></HtmlEditCommand>
<CompileCommand5></CompileCommand5>
<RunCommand5></RunCommand5>
<GUIDesignerCommand5></GUIDesignerCommand5>
<ImportFiles5></ImportFiles5>
<ProgramStartupCode5>gosub @_PSTART
end
</ProgramStartupCode5>
<NativeHelpCommand5></NativeHelpCommand5>
<NoOptimizePin>0</NoOptimizePin>
<CompileCommand6>./compile_c</CompileCommand6>
<RunCommand6>./run_c</RunCommand6>
<GUIDesignerCommand6></GUIDesignerCommand6>
<ImportFiles6>#include &lt;setjmp.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;math.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#include &lt;X11/Xlib.h&gt;
#include &lt;X11/Xutil.h&gt;
#include &lt;X11/Xlocale.h&gt; /* ロケール用ヘッダーファイル */
#include &lt;X11/xpm.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;
#include &lt;termios.h&gt;
#include &lt;errno.h&gt;
</ImportFiles6>
<ProgramStartupCode6>int ARGC; char** ARGV;
int main( int argc, char** argv ){
  ARGC=argc;
  ARGV=argv;
  _PSTART();
}
</ProgramStartupCode6>
<NativeHelpCommand6></NativeHelpCommand6>
<IDF_LocalVariable5>\</IDF_LocalVariable5>
<IDF_LocalVariable7>\</IDF_LocalVariable7>
<CompileCommand7></CompileCommand7>
<RunCommand7></RunCommand7>
<GUIDesignerCommand7></GUIDesignerCommand7>
<ImportFiles7></ImportFiles7>
<ProgramStartupCode7></ProgramStartupCode7>
<NativeHelpCommand7></NativeHelpCommand7>
<OpenCompileDialog>0</OpenCompileDialog>
<ScriptExecCommand></ScriptExecCommand>
<RunCommand8></RunCommand8>
<CompileCommand9></CompileCommand9>
<RunCommand9></RunCommand9>
<GUIDesignerCommand9></GUIDesignerCommand9>
<ImportFiles9></ImportFiles9>
<ProgramStartupCode9></ProgramStartupCode9>
<NativeHelpCommand9></NativeHelpCommand9>
</プロパティ>
<codeclip>
<ID>_CSTART</ID>
<x0>66</x0>
<y0>115</y0>
<width>80</width>
<height>24</height>
<codetext> String[] ARGS;
</codetext>
</codeclip>
<pin>
<ID>_PSTART</ID>
<x0>413</x0>
<y0>114</y0>
<width>55</width>
<height>24</height>
<text>Start()</text>
<px>50</px>
<py>50</py>
</pin>
<xobject>
<ID>_X0</ID>
<x0>231</x0>
<y0>176</y0>
<width>230</width>
<height>101</height>
<ID_maker>197</ID_maker>
<objectname>card6_debug</objectname>
<description>新規のアプリケーション</description>
<codeclip>
<ID>_CSTART</ID>
<x0>22</x0>
<y0>13</y0>
<width>80</width>
<height>24</height>
<codetext> String[] ARGS;
</codetext>
</codeclip>
<pin>
<ID>_PSTART</ID>
<x0>29</x0>
<y0>49</y0>
<width>55</width>
<height>24</height>
<text>Start()</text>
<px>183</px>
<py>15</py>
</pin>
<operation>
<ID>_O1</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>879</x0>
<y0>46</y0>
<width>97</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>32</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//終了処理 





save_inifile();

</codetext>
</operation>
<relation>
<ID>_R3</ID>
<pin1name>_PSTART</pin1name>
<pin2name>_A0(_Pstart)</pin2name>
</relation>
<codeclip>
<ID>_C9</ID>
<x0>714</x0>
<y0>163</y0>
<width>267</width>
<height>215</height>
<codetext>// 変数
JButton run_button; int run_mode = 0;
JTextField c_field, a_field, r_field, d_field;
int[] mem_r, mem_a, mem_c, mem_d;
int reg_r, reg_a, reg_c, reg_d, reg_h, reg_m, reg_l; 
JLabel io_label, pointer_label, ret_label, st_label;
JLabel ld_label, ldh_label, ldm_label, ldl_label;
JTextArea message_area;
JTextField clock_field; int clock=0;
JTextField interval_field; int interval=1000;
JTextField address_field; int address;
JTextField no_field, name_field, start_field, end_field;
static final int AD_SIZE = 0x1000000;
JButton rd_port_button,wr_port_button;
JButton cpu_reset_button,cpu_halt_button;
JButton osc_button,osc_enable_button;
JButton sdisable_button,sclk_button,sdata_button,swrite_button;
JTextField reset_interval_box,wait_interval_box,cmd_line;

boolean xrd_port=true,xwr_port=true;
boolean xcpu_reset=false,xcpu_halt=true;
boolean xosc=true,xosc_enable=false;
boolean xsdisable=true,xsclk=true,xsdata=false,xswrite=true;

String edit_command=&quot;&quot;; // コンパイラのソースファイルを編集するコマンド
String edit_inifile_command=&quot;&quot;; // 設定ファイルを編集するコマンド
String asm_edit_command=&quot;&quot;;// アセンブラのソースファイルを編集するコマンド
String compile_command=&quot;&quot;;// コンパイルコマンド
String assemble_command=&quot;&quot;;//アセンブルコマンド
String terminal_command=&quot;&quot;;// ターミナル起動コマンド
String rd_port_l_command = &quot;&quot;;//
String rd_port_h_command = &quot;&quot;;//
String wr_port_l_command = &quot;&quot;;//
String wr_port_h_command = &quot;&quot;;//
String cpu_reset_l_command = &quot;&quot;;//
String cpu_reset_h_command = &quot;&quot;;//
String cpu_halt_l_command = &quot;&quot;;//
String cpu_halt_h_command = &quot;&quot;;//
String osc_l_command = &quot;&quot;;//
String osc_h_command = &quot;&quot;;//
String osc_enable_l_command = &quot;&quot;;//
String osc_enable_h_command = &quot;&quot;;//
String sdisable_l_command = &quot;&quot;;//
String sdisable_h_command = &quot;&quot;;//
String sclk_l_command = &quot;&quot;;//
String sclk_h_command = &quot;&quot;;//
String sdata_l_command = &quot;&quot;;//
String sdata_h_command = &quot;&quot;;//
String swrite_l_command = &quot;&quot;;//
String swrite_h_command = &quot;&quot;;//
String reset_command = &quot;&quot;;//
String single_step_command = &quot;&quot;;//
String reset_interval_command = &quot;&quot;;//
String wait_interval_command = &quot;&quot;;//
String write_memory_command = &quot;&quot;;
String basic_edit_command = &quot;&quot;;
String basic_file_name = &quot;&quot;;



File ini_file = new File(&quot;card6_debug.ini&quot;);

boolean load_done = false;
</codetext>
</codeclip>
<xobject>
<ID>_X19</ID>
<x0>458</x0>
<y0>287</y0>
<width>237</width>
<height>352</height>
<ID_maker>78</ID_maker>
<objectname>registers</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>0</x0>
<y0>429</y0>
<width>164</width>
<height>19</height>
<text>r_field_is(JTextField t)</text>
<px>0</px>
<py>117</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>0</x0>
<y0>450</y0>
<width>163</width>
<height>22</height>
<text>a_field_is(JTextField t)</text>
<px>0</px>
<py>101</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>0</x0>
<y0>474</y0>
<width>148</width>
<height>23</height>
<text>c_field_is(JTextField t)</text>
<px>0</px>
<py>81</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>0</x0>
<y0>500</y0>
<width>150</width>
<height>21</height>
<text>d_field_is(JTextField t)</text>
<px>0</px>
<py>133</py>
</pin>
<pin>
<ID>_P4</ID>
<x0>0</x0>
<y0>155</y0>
<width>146</width>
<height>22</height>
<text>ret_label_is(JLabel l)</text>
<px>0</px>
<py>189</py>
</pin>
<pin>
<ID>_P5</ID>
<x0>1</x0>
<y0>178</y0>
<width>138</width>
<height>24</height>
<text>st_label_is(JLabel l)</text>
<px>0</px>
<py>206</py>
</pin>
<pin>
<ID>_P6</ID>
<x0>4</x0>
<y0>23</y0>
<width>132</width>
<height>22</height>
<text>ld_label_is(JLabel l)</text>
<px>0</px>
<py>224</py>
</pin>
<pin>
<ID>_P7</ID>
<x0>7</x0>
<y0>51</y0>
<width>138</width>
<height>22</height>
<text>ldh_label_is(JLabel l)</text>
<px>0</px>
<py>244</py>
</pin>
<pin>
<ID>_P8</ID>
<x0>9</x0>
<y0>77</y0>
<width>141</width>
<height>23</height>
<text>ldm_label_is(JLabel l)</text>
<px>0</px>
<py>264</py>
</pin>
<pin>
<ID>_P9</ID>
<x0>0</x0>
<y0>102</y0>
<width>143</width>
<height>23</height>
<text>ldl_label_is(JLabel l)</text>
<px>0</px>
<py>281</py>
</pin>
<pin>
<ID>_P10</ID>
<x0>3</x0>
<y0>357</y0>
<width>205</width>
<height>22</height>
<text>message_area_is(JTextArea t)</text>
<px>0</px>
<py>334</py>
</pin>
<pin>
<ID>_P11</ID>
<x0>0</x0>
<y0>226</y0>
<width>184</width>
<height>21</height>
<text>clock_field_is(JTextField t)</text>
<px>0</px>
<py>296</py>
</pin>
<pin>
<ID>_P15</ID>
<x0>3</x0>
<y0>326</y0>
<width>211</width>
<height>27</height>
<text>interval_field_is(JTextField t)</text>
<px>0</px>
<py>314</py>
</pin>
<pin>
<ID>_P17</ID>
<x0>0</x0>
<y0>400</y0>
<width>204</width>
<height>27</height>
<text>address_field_is(JTextField t)</text>
<px>0</px>
<py>57</py>
</pin>
<pin>
<ID>_P20</ID>
<x0>1</x0>
<y0>125</y0>
<width>161</width>
<height>26</height>
<text>pointer_label_is(JLabel l)</text>
<px>0</px>
<py>171</py>
</pin>
<operation>
<ID>_O21</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>160</x0>
<y0>3</y0>
<width>121</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ld_label = l;
</codetext>
</operation>
<relation>
<ID>_R22</ID>
<pin1name>_P6</pin1name>
<pin2name>_O21</pin2name>
</relation>
<operation>
<ID>_O23</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>299</x0>
<y0>23</y0>
<width>121</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ldh_label = l;
</codetext>
</operation>
<operation>
<ID>_O26</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>429</x0>
<y0>50</y0>
<width>105</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ldm_label = l;
</codetext>
</operation>
<operation>
<ID>_O27</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>541</x0>
<y0>77</y0>
<width>98</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ldl_label = l;
</codetext>
</operation>
<relation>
<ID>_R28</ID>
<pin1name>_P7</pin1name>
<pin2name>_O23</pin2name>
</relation>
<relation>
<ID>_R29</ID>
<pin1name>_P8</pin1name>
<pin2name>_O26</pin2name>
</relation>
<relation>
<ID>_R30</ID>
<pin1name>_P9</pin1name>
<pin2name>_O27</pin2name>
</relation>
<operation>
<ID>_O31</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>645</x0>
<y0>105</y0>
<width>130</width>
<height>48</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>pointer_label = l;
</codetext>
</operation>
<relation>
<ID>_R32</ID>
<pin1name>_P20</pin1name>
<pin2name>_O31</pin2name>
</relation>
<operation>
<ID>_O33</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>779</x0>
<y0>127</y0>
<width>111</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ret_label = l;
</codetext>
</operation>
<relation>
<ID>_R34</ID>
<pin1name>_P4</pin1name>
<pin2name>_O33</pin2name>
</relation>
<operation>
<ID>_O35</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>895</x0>
<y0>150</y0>
<width>100</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>st_label = l;
</codetext>
</operation>
<relation>
<ID>_R36</ID>
<pin1name>_P5</pin1name>
<pin2name>_O35</pin2name>
</relation>
<operation>
<ID>_O37</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>196</x0>
<y0>200</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>clock_field = t;
</codetext>
</operation>
<relation>
<ID>_R38</ID>
<pin1name>_P11</pin1name>
<pin2name>_O37</pin2name>
</relation>
<operation>
<ID>_O45</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>709</x0>
<y0>301</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>interval_field = t;
</codetext>
</operation>
<relation>
<ID>_R46</ID>
<pin1name>_P15</pin1name>
<pin2name>_O45</pin2name>
</relation>
<operation>
<ID>_O47</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>856</x0>
<y0>331</y0>
<width>139</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextArea t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>message_area = t;
</codetext>
</operation>
<relation>
<ID>_R48</ID>
<pin1name>_P10</pin1name>
<pin2name>_O47</pin2name>
</relation>
<operation>
<ID>_O49</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>233</x0>
<y0>376</y0>
<width>137</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>address_field = t;
</codetext>
</operation>
<relation>
<ID>_R50</ID>
<pin1name>_P17</pin1name>
<pin2name>_O49</pin2name>
</relation>
<operation>
<ID>_O51</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>375</x0>
<y0>400</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r_field = t;
</codetext>
</operation>
<relation>
<ID>_R52</ID>
<pin1name>_P0</pin1name>
<pin2name>_O51</pin2name>
</relation>
<operation>
<ID>_O53</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>510</x0>
<y0>423</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>a_field = t;
</codetext>
</operation>
<relation>
<ID>_R54</ID>
<pin1name>_P1</pin1name>
<pin2name>_O53</pin2name>
</relation>
<operation>
<ID>_O55</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>641</x0>
<y0>447</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>c_field = t;
</codetext>
</operation>
<relation>
<ID>_R56</ID>
<pin1name>_P2</pin1name>
<pin2name>_O55</pin2name>
</relation>
<operation>
<ID>_O57</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>772</x0>
<y0>473</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>d_field = t;
</codetext>
</operation>
<relation>
<ID>_R58</ID>
<pin1name>_P3</pin1name>
<pin2name>_O57</pin2name>
</relation>
<pin>
<ID>_P59</ID>
<x0>0</x0>
<y0>588</y0>
<width>169</width>
<height>22</height>
<text>run_button_is(JButton b)</text>
<px>2</px>
<py>34</py>
</pin>
<operation>
<ID>_O60</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>364</x0>
<y0>560</y0>
<width>123</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>88</inpinwidth>
<inpinheight>19</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>run_button = b;
</codetext>
</operation>
<relation>
<ID>_R61</ID>
<pin1name>_P59</pin1name>
<pin2name>_O60</pin2name>
</relation>
<pin>
<ID>_P65</ID>
<x0>0</x0>
<y0>616</y0>
<width>140</width>
<height>23</height>
<text>io_label_is(JLabel l)</text>
<px>0</px>
<py>152</py>
</pin>
<operation>
<ID>_O66</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>493</x0>
<y0>589</y0>
<width>100</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>io_label = l;
</codetext>
</operation>
<relation>
<ID>_R67</ID>
<pin1name>_P65</pin1name>
<pin2name>_O66</pin2name>
</relation>
</xobject>
<relation>
<ID>_R33</ID>
<pin1name>_A0(_Pmessage_area)</pin1name>
<pin2name>_X19(_P10)</pin2name>
</relation>
<relation>
<ID>_R34</ID>
<pin1name>_A0(_Pclock_field)</pin1name>
<pin2name>_X19(_P11)</pin2name>
</relation>
<relation>
<ID>_R38</ID>
<pin1name>_A0(_Pinterval_field)</pin1name>
<pin2name>_X19(_P15)</pin2name>
</relation>
<xobject>
<ID>_X42</ID>
<x0>9</x0>
<y0>220</y0>
<width>107</width>
<height>158</height>
<ID_maker>14</ID_maker>
<objectname>mem_edit</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>117</x0>
<y0>235</y0>
<width>102</width>
<height>24</height>
<text>addr(String s)</text>
<px>0</px>
<py>115</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>108</x0>
<y0>170</y0>
<width>60</width>
<height>30</height>
<text>inc()</text>
<px>0</px>
<py>28</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>121</x0>
<y0>313</y0>
<width>60</width>
<height>30</height>
<text>dec()</text>
<px>0</px>
<py>45</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>101</x0>
<y0>109</y0>
<width>112</width>
<height>25</height>
<text>mem_set()</text>
<px>0</px>
<py>62</py>
</pin>
<operation>
<ID>_O4</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>324</x0>
<y0>241</y0>
<width>163</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>28</inpiny0>
<inpinwidth>78</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// メモリのデータを表示


address = Integer.parseInt( s, 16 );

// レジスタ表示処理
c_field.setText(hex2(mem_c[address]));
a_field.setText(hex6(mem_a[address]));
r_field.setText(hex6(mem_r[address]));
d_field.setText(hex2(mem_d[address]));

update_control();
</codetext>
</operation>
<relation>
<ID>_R5</ID>
<pin1name>_P0</pin1name>
<pin2name>_O4</pin2name>
</relation>
<operation>
<ID>_O6</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>307</x0>
<y0>158</y0>
<width>263</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// アドレスを+1してメモリのデータを表示

address++;
if( address &gt; 0xffffff ) address-=0xffffff;

// レジスタ表示処理
address_field.setText(hex6(address));
c_field.setText(hex2(mem_c[address]));
a_field.setText(hex6(mem_a[address]));
r_field.setText(hex6(mem_r[address]));
d_field.setText(hex2(mem_d[address]));

update_control();
</codetext>
</operation>
<relation>
<ID>_R7</ID>
<pin1name>_P1</pin1name>
<pin2name>_O6</pin2name>
</relation>
<operation>
<ID>_O9</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>305</x0>
<y0>311</y0>
<width>268</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// アドレスを-1してメモリのデータを表示

address--;
if( address &lt; 0 ) address=0;

// レジスタ表示処理
address_field.setText(hex6(address));
c_field.setText(hex2(mem_c[address]));
a_field.setText(hex6(mem_a[address]));
r_field.setText(hex6(mem_r[address]));
d_field.setText(hex2(mem_d[address]));

update_control();
</codetext>
</operation>
<relation>
<ID>_R10</ID>
<pin1name>_P2</pin1name>
<pin2name>_O9</pin2name>
</relation>
<operation>
<ID>_O11</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>303</x0>
<y0>94</y0>
<width>267</width>
<height>43</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 表示されているデータをメモリに書き込む

address = Integer.parseInt( address_field.getText(), 16 );
int c,a,r,d;

mem_c[address] = c = Integer.parseInt( c_field.getText(), 16 );
mem_a[address] = a = Integer.parseInt( a_field.getText(), 16 );
mem_r[address] = r = Integer.parseInt( r_field.getText(), 16 );
mem_d[address] = d = Integer.parseInt( d_field.getText(), 16 );

exec_command(write_memory_command+&quot; &quot;+address+&quot; &quot;+c+&quot; &quot;+a+&quot; &quot;+r+&quot; &quot;+d);

update_control();
</codetext>
</operation>
<relation>
<ID>_R12</ID>
<pin1name>_P3</pin1name>
<pin2name>_O11</pin2name>
</relation>
</xobject>
<relation>
<ID>_R44</ID>
<pin1name>_A0(_PAinc_addr)</pin1name>
<pin2name>_X42(_P1)</pin2name>
</relation>
<relation>
<ID>_R45</ID>
<pin1name>_A0(_PAdec_addr)</pin1name>
<pin2name>_X42(_P2)</pin2name>
</relation>
<relation>
<ID>_R46</ID>
<pin1name>_A0(_PAmem_set)</pin1name>
<pin2name>_X42(_P3)</pin2name>
</relation>
<codeclip>
<ID>_C47</ID>
<x0>718</x0>
<y0>549</y0>
<width>230</width>
<height>35</height>
<codetext>// 長さが6文字の16進数文字列を返す
public String hex6( int i ){
  String s = Integer.toHexString(i);
  int l = s.length();
  if( l == 1 ) return &quot;00000&quot;+s;
  if( l == 2 ) return &quot;0000&quot;+s;
  if( l == 3 ) return &quot;000&quot;+s;
  if( l == 4 ) return &quot;00&quot;+s;
  if( l == 5 ) return &quot;0&quot;+s;
  return s;
}
</codetext>
</codeclip>
<codeclip>
<ID>_C48</ID>
<x0>718</x0>
<y0>594</y0>
<width>229</width>
<height>34</height>
<codetext>// 長さが2文字の16進数文字列を返す
public String hex2( int i ){
  String s = Integer.toHexString(i);
  int l = s.length();
  if( l ==1 ) return &quot;0&quot;+s;
  return s;
}
</codetext>
</codeclip>
<codeclip>
<ID>_C50</ID>
<x0>712</x0>
<y0>401</y0>
<width>251</width>
<height>136</height>
<codetext>//コマンドレジスタのビット割り当て
static final int IO=128;
static final int POINTER=64;
static final int RET=32;
static final int ST=16;
static final int LD=8;
static final int LDH=4;
static final int LDM=2;
static final int LDL=1;

static final int DATA_INS = 0xe7; // data命令
</codetext>
</codeclip>
<relation>
<ID>_R53</ID>
<pin1name>_A0(_Prun_button)</pin1name>
<pin2name>_X19(_P59)</pin2name>
</relation>
<プロパティ>
<ID>properties</ID>
<LookandFeel>javax.swing.plaf.metal.MetalLookAndFeel</LookandFeel>
<MainWinx0>0</MainWinx0>
<MainWiny0>0</MainWiny0>
<MainWinWidth>1022</MainWinWidth>
<MainWinHeight>741</MainWinHeight>
<MesgWinx0>1</MesgWinx0>
<MesgWiny0>0</MesgWiny0>
<MesgWinWidth>1023</MesgWinWidth>
<MesgWinHeight>745</MesgWinHeight>
<FileWinx0>36</FileWinx0>
<FileWiny0>478</FileWiny0>
<FileWinWidth>578</FileWinWidth>
<FileWinHeight>262</FileWinHeight>
<EditWinx0>347</EditWinx0>
<EditWiny0>0</EditWiny0>
<EditWinWidth>676</EditWinWidth>
<EditWinHeight>541</EditWinHeight>
<PropWinx0>1</PropWinx0>
<PropWiny0>1</PropWiny0>
<PropWinWidth>615</PropWinWidth>
<PropWinHeight>448</PropWinHeight>
<DividerLocation1>2</DividerLocation1>
<DividerLocation2>2</DividerLocation2>
<ToolBarVisible>1</ToolBarVisible>
<ViewSourceAtCompile>0</ViewSourceAtCompile>
<NoSourceCreate>0</NoSourceCreate>
<JavaEditCommand>geany</JavaEditCommand>
<JavaViewCommand></JavaViewCommand>
<HelpCommand>xdg-open ./help/manual.html</HelpCommand>
<ApplicationType>0</ApplicationType>
<CompileCommand0>./compile_java</CompileCommand0>
<RunCommand0>./run_java</RunCommand0>
<GUIDesignerCommand0>java -jar guidsin.jar -java</GUIDesignerCommand0>
<ImportFiles0> import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.geom.*;
import java.awt.print.*;
import javax.swing.border.*;
import javax.swing.filechooser.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.image.BufferedImage;
import javax.sound.sampled.*;
import java.text.SimpleDateFormat;

class Starter{
  public static void main( String args[] ){
    %AppName% ap = new %AppName%();
    ap.ARGS = args;
    ap.Start();
  }
}
</ImportFiles0>
<ProgramStartupCode0> String[] ARGS;
</ProgramStartupCode0>
<NativeHelpCommand0></NativeHelpCommand0>
<CompileCommand1></CompileCommand1>
<RunCommand1></RunCommand1>
<GUIDesignerCommand1>java -jar guidsin.jar -applet</GUIDesignerCommand1>
<ImportFiles1> import java.awt.*;
 import java.awt.event.*;
 import java.applet.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
 public class javatext extends Applet {
   %AppName% ap;
   public void init() {
     ap = new %AppName%();
     ap.APPLET = this;
     ap.Start();
   }
 }
</ImportFiles1>
<ProgramStartupCode1> Applet APPLET;
</ProgramStartupCode1>
<NativeHelpCommand1></NativeHelpCommand1>
<CompileCommand2></CompileCommand2>
<RunCommand2></RunCommand2>
<GUIDesignerCommand2></GUIDesignerCommand2>
<ImportFiles2>#include &lt;stdio.h&gt;

void Startup();
</ImportFiles2>
<ProgramStartupCode2>int main(){
 Startup();
 %AppName%::Start();
 }
</ProgramStartupCode2>
<NativeHelpCommand2></NativeHelpCommand2>
<CompileCommand3></CompileCommand3>
<RunCommand3></RunCommand3>
<GUIDesignerCommand3>java -jar guidsin.jar -cpp</GUIDesignerCommand3>
<ImportFiles3>#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;math.h&gt;
#include &quot;Ekagen.h&quot;
void Startup();
</ImportFiles3>
<ProgramStartupCode3>void Emain(){
Startup();
%AppName%::Start();
}
</ProgramStartupCode3>
<NativeHelpCommand3></NativeHelpCommand3>
<MoveStep>8</MoveStep>
<ImageEditCommand></ImageEditCommand>
<CompilerFileName>javac.exe</CompilerFileName>
<CompileCommand4>./compile_android Test com example test</CompileCommand4>
<RunCommand4>./run_android Test com example test</RunCommand4>
<GUIDesignerCommand4>java -jar guidsin.jar -android</GUIDesignerCommand4>
<ImportFiles4>package com.example.test;

import android.os.Bundle;
import android.app.Activity;
import android.view.View;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.widget.Button;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.widget.EditText;
import android.text.SpannableStringBuilder;
import android.text.TextWatcher;
import android.text.Editable;
import android.graphics.Matrix;
import android.graphics.Typeface;
import android.graphics.RectF;
import android.graphics.BitmapFactory;
import java.io.*;
 import java.net.*;
import java.util.*;
import java.text.SimpleDateFormat;
import android.media.MediaPlayer;
import android.os.Handler;
import android.content.res.Configuration;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.app.Activity;
import android.graphics.Color;

import android.widget.AbsoluteLayout;
import android.widget.*;
import android.view.Gravity;
import android.view.View.OnClickListener;

import android.hardware.Camera;

public class HelloWorld extends Activity {
  public void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    %AppName% ap = new %AppName%();
    ap.ACTIVITY = this;
    ap.Start();
  }
}
</ImportFiles4>
<ProgramStartupCode4>Activity ACTIVITY;
</ProgramStartupCode4>
<NativeHelpCommand4>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.example.test&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot; &gt;

    
    
  &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.usb.host&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt;
  &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;

  &lt;uses-sdk android:minSdkVersion=&quot;3&quot; android:targetSdkVersion=&quot;21&quot;/&gt;
  
 
    &lt;application android:label=&quot;@string/app_name&quot; &gt;
        &lt;activity
            android:name=&quot;HelloWorld&quot;
            android:label=&quot;@string/app_name&quot; &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</NativeHelpCommand4>
<HtmlEditCommand></HtmlEditCommand>
<CompileCommand5></CompileCommand5>
<RunCommand5></RunCommand5>
<GUIDesignerCommand5></GUIDesignerCommand5>
<ImportFiles5></ImportFiles5>
<ProgramStartupCode5>gosub @_PSTART
end
</ProgramStartupCode5>
<NativeHelpCommand5></NativeHelpCommand5>
<NoOptimizePin>0</NoOptimizePin>
<CompileCommand6>./compile_c</CompileCommand6>
<RunCommand6>./run_c</RunCommand6>
<GUIDesignerCommand6></GUIDesignerCommand6>
<ImportFiles6>#include &lt;setjmp.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;math.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#include &lt;X11/Xlib.h&gt;
#include &lt;X11/Xutil.h&gt;
#include &lt;X11/Xlocale.h&gt; /* ロケール用ヘッダーファイル */
#include &lt;X11/xpm.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;
#include &lt;termios.h&gt;
#include &lt;errno.h&gt;
</ImportFiles6>
<ProgramStartupCode6>int ARGC; char** ARGV;
int main( int argc, char** argv ){
  ARGC=argc;
  ARGV=argv;
  _PSTART();
}
</ProgramStartupCode6>
<NativeHelpCommand6></NativeHelpCommand6>
<IDF_LocalVariable5>\</IDF_LocalVariable5>
<IDF_LocalVariable7>\</IDF_LocalVariable7>
<CompileCommand7></CompileCommand7>
<RunCommand7></RunCommand7>
<GUIDesignerCommand7></GUIDesignerCommand7>
<ImportFiles7></ImportFiles7>
<ProgramStartupCode7></ProgramStartupCode7>
<NativeHelpCommand7></NativeHelpCommand7>
</プロパティ>
<relation>
<ID>_R60</ID>
<pin1name>_A0(_Pr_reg)</pin1name>
<pin2name>_X19(_P0)</pin2name>
</relation>
<relation>
<ID>_R61</ID>
<pin1name>_A0(_Pa_reg)</pin1name>
<pin2name>_X19(_P1)</pin2name>
</relation>
<relation>
<ID>_R62</ID>
<pin1name>_A0(_Pc_reg)</pin1name>
<pin2name>_X19(_P2)</pin2name>
</relation>
<relation>
<ID>_R63</ID>
<pin1name>_A0(_Pd_reg)</pin1name>
<pin2name>_X19(_P3)</pin2name>
</relation>
<relation>
<ID>_R64</ID>
<pin1name>_A0(_Ppointer_flg)</pin1name>
<pin2name>_X19(_P20)</pin2name>
</relation>
<relation>
<ID>_R65</ID>
<pin1name>_A0(_Preturn_flg)</pin1name>
<pin2name>_X19(_P4)</pin2name>
</relation>
<relation>
<ID>_R66</ID>
<pin1name>_A0(_Pstore_flg)</pin1name>
<pin2name>_X19(_P5)</pin2name>
</relation>
<relation>
<ID>_R67</ID>
<pin1name>_A0(_Pld_flg)</pin1name>
<pin2name>_X19(_P6)</pin2name>
</relation>
<relation>
<ID>_R68</ID>
<pin1name>_A0(_Pldh_flg)</pin1name>
<pin2name>_X19(_P7)</pin2name>
</relation>
<relation>
<ID>_R69</ID>
<pin1name>_A0(_Pldm_flg)</pin1name>
<pin2name>_X19(_P8)</pin2name>
</relation>
<relation>
<ID>_R70</ID>
<pin1name>_A0(_Pldl_flg)</pin1name>
<pin2name>_X19(_P9)</pin2name>
</relation>
<relation>
<ID>_R77</ID>
<pin1name>_A0(_Paddr_reg)</pin1name>
<pin2name>_X19(_P17)</pin2name>
</relation>
<xobject>
<ID>_X79</ID>
<x0>457</x0>
<y0>134</y0>
<width>222</width>
<height>149</height>
<ID_maker>39</ID_maker>
<objectname>control</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>107</x0>
<y0>262</y0>
<width>60</width>
<height>30</height>
<text>compile()</text>
<px>1</px>
<py>29</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>161</x0>
<y0>29</y0>
<width>60</width>
<height>30</height>
<text>clr()</text>
<px>0</px>
<py>43</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>111</x0>
<y0>310</y0>
<width>74</width>
<height>29</height>
<text>assemble()</text>
<px>2</px>
<py>57</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>138</x0>
<y0>165</y0>
<width>93</width>
<height>24</height>
<text>asm_edit()</text>
<px>0</px>
<py>71</py>
</pin>
<pin>
<ID>_P4</ID>
<x0>117</x0>
<y0>399</y0>
<width>85</width>
<height>25</height>
<text>terminal()</text>
<px>0</px>
<py>87</py>
</pin>
<pin>
<ID>_P5</ID>
<x0>121</x0>
<y0>99</y0>
<width>60</width>
<height>30</height>
<text>edit()</text>
<px>0</px>
<py>101</py>
</pin>
<operation>
<ID>_O6</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>284</x0>
<y0>2</y0>
<width>155</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>30</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// レジスタ等のクリア


 address_field.setText(&quot;000000&quot;);
 c_field.setText(&quot;ff&quot;);
 a_field.setText(&quot;000000&quot;);
 r_field.setText(&quot;000000&quot;);
 d_field.setText(&quot;00&quot;);
 clock_field.setText(&quot;0&quot;);
 message_area.setText(&quot;&quot;);
</codetext>
</operation>
<relation>
<ID>_R7</ID>
<pin1name>_P1</pin1name>
<pin2name>_O6</pin2name>
</relation>
<operation>
<ID>_O8</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>320</x0>
<y0>94</y0>
<width>234</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(edit_command);


</codetext>
</operation>
<relation>
<ID>_R9</ID>
<pin1name>_P5</pin1name>
<pin2name>_O8</pin2name>
</relation>
<operation>
<ID>_O10</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>318</x0>
<y0>173</y0>
<width>263</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(asm_edit_command);


</codetext>
</operation>
<operation>
<ID>_O11</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>317</x0>
<y0>251</y0>
<width>234</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(compile_command);


try{

BufferedReader din = new BufferedReader( new FileReader( &quot;r.out&quot; ) );

while(true){
  String line;
  int adrs,data;
  if((line=din.readLine()) == null )  break;
  adrs = Integer.parseInt(line);
  if((line=din.readLine()) == null )  break;
  data = Integer.parseInt(line);
  mem_c[adrs] = DATA_INS; // data命令
  mem_a[adrs] = 0;
  mem_r[adrs] = 0;
  mem_d[adrs] = data;
}

din.close();


} catch( IOException ie ){message_area.append(&quot;vm code load error!\n&quot;);}
load_done = false;
update_control();
</codetext>
</operation>
<operation>
<ID>_O12</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>317</x0>
<y0>323</y0>
<width>244</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(assemble_command);


try{

BufferedReader din = new BufferedReader( new FileReader( &quot;a.out&quot; ) );

while(true){
  String line;
  int adrs,c,a,r,d;
  if((line=din.readLine()) == null )  break;
  adrs = Integer.parseInt(line);
  if((line=din.readLine()) == null )  break;
  c = Integer.parseInt(line);
  mem_c[adrs] = c;
  if((line=din.readLine()) == null )  break;
  a = Integer.parseInt(line);
  mem_a[adrs] = a;
  if((line=din.readLine()) == null )  break;
  r = Integer.parseInt(line);
  mem_r[adrs] = r;
  if((line=din.readLine()) == null )  break;
  d = Integer.parseInt(line);
  mem_d[adrs] = d;
}

din.close();


} catch( IOException ie ){message_area.append(&quot;native code load error!\n&quot;);}
load_done = false;
update_control();
</codetext>
</operation>
<operation>
<ID>_O13</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>316</x0>
<y0>401</y0>
<width>249</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(terminal_command);


</codetext>
</operation>
<relation>
<ID>_R14</ID>
<pin1name>_P3</pin1name>
<pin2name>_O10</pin2name>
</relation>
<relation>
<ID>_R15</ID>
<pin1name>_P0</pin1name>
<pin2name>_O11</pin2name>
</relation>
<relation>
<ID>_R16</ID>
<pin1name>_P2</pin1name>
<pin2name>_O12</pin2name>
</relation>
<relation>
<ID>_R17</ID>
<pin1name>_P4</pin1name>
<pin2name>_O13</pin2name>
</relation>
<pin>
<ID>_P18</ID>
<x0>608</x0>
<y0>81</y0>
<width>60</width>
<height>30</height>
<text>load()</text>
<px>0</px>
<py>117</py>
</pin>
<aobject>
<ID>_A28</ID>
<x0>552</x0>
<y0>528</y0>
<width>147</width>
<height>85</height>
<ID_maker>11</ID_maker>
<objectname>Interval_Timer</objectname>
<description>新しいオブジェクト</description>
<state>
<ID>_SINIT</ID>
<x0>188</x0>
<y0>270</y0>
<width>70</width>
<height>40</height>
<text>  初期状態</text>
<isinitstate>1</isinitstate>
</state>
<pin>
<ID>_P0</ID>
<x0>200</x0>
<y0>364</y0>
<width>99</width>
<height>25</height>
<text>play_pause()</text>
<px>1</px>
<py>61</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>476</x0>
<y0>155</y0>
<width>60</width>
<height>30</height>
<text>Action()</text>
<px>0</px>
<py>41</py>
</pin>
<codeclip>
<ID>_C3</ID>
<x0>200</x0>
<y0>5</y0>
<width>272</width>
<height>198</height>
<codetext>XTimer  timer;
class XTimer implements ActionListener{
  javax.swing.Timer unit;
 
  XTimer( int del ){
   unit = new javax.swing.Timer( del, this );
  }

  public void actionPerformed( ActionEvent e){
    Action();
  }

}
</codetext>
</codeclip>
<operation>
<ID>_O7</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>321</x0>
<y0>255</y0>
<width>171</width>
<height>53</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>3</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>45</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// タイマーの起動・停止


if( run_mode != 0 ){
 timer = new XTimer( interval );
 timer.unit.start();
}
 else timer.unit.stop();
</codetext>
</operation>
<action>
<ID>_A9</ID>
<comp1name>_P0</comp1name>
<comp2name>_O7</comp2name>
</action>
</aobject>
<codeclip>
<ID>_C27</ID>
<x0>623</x0>
<y0>465</y0>
<width>198</width>
<height>33</height>
<codetext>// 1サイクル実行
public void exec_one_cycle(){

address = Integer.parseInt( address_field.getText(), 16 );
clock = Integer.parseInt( clock_field.getText() );


// メモリ(I/O)ー＞レジスタ サイクル
reg_c = mem_c[address];
reg_a = mem_a[address];
reg_r = mem_r[address];
//if( (reg_c &amp; IO)  == 0 &amp;&amp; (reg_c &amp; LD)  == 0 ){ reg_d = KeyCode0; KeyCode0 = 0x3f;}	// I/Oアクセス
if( (reg_c &amp; IO)  != 0 &amp;&amp; (reg_c &amp; LD)  == 0 ) reg_d = mem_d[address];				// メモリアクセス
if( (reg_c &amp; LDH) == 0 ) reg_h = mem_d[address];
if( (reg_c &amp; LDM) == 0 ) reg_m = mem_d[address];
if( (reg_c &amp; LDL) == 0 ) reg_l = mem_d[address];

// レジスタ表示処理
address_field.setText(hex6(address));
c_field.setText(hex2(reg_c));
a_field.setText(hex6(reg_a));
r_field.setText(hex6(reg_r));
d_field.setText(hex2(reg_d));

update_control();

//レジスター＞メモリ(I/O) サイクル
if( (reg_c &amp; POINTER) == 0 ) address = reg_h * 4096 + reg_m * 64 + reg_l; else address = reg_a;
if( (reg_c &amp; RET) == 0 ) mem_a[address] = reg_r;
//if( (reg_c &amp; IO)  == 0 &amp;&amp; (reg_c &amp; ST)  == 0 ) PrtData = reg_d;			// I/Oアクセス
if( (reg_c &amp; IO)  != 0 &amp;&amp; (reg_c &amp; ST)  == 0 ) mem_d[address] = reg_d;	// メモリアクセス


if(load_done) exec_command(single_step_command);

// クロック表示処理
clock++;
clock_field.setText(&quot;&quot;+clock);
}
</codetext>
</codeclip>
<operation>
<ID>_O25</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>304</x0>
<y0>482</y0>
<width>161</width>
<height>67</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>108</inpinx0>
<inpiny0>42</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>//シングルステップ実行
exec_one_cycle();
</codetext>
</operation>
<operation>
<ID>_O23</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>320</x0>
<y0>578</y0>
<width>164</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>38</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>115</outpinx0>
<outpiny0>26</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//実行モードを切り替える


run_mode = 1- run_mode;
if( run_mode == 0 ) run_button.setText(&quot;run&quot;); else run_button.setText(&quot;stop&quot;);
interval = Integer.parseInt( interval_field.getText() );
</codetext>
</operation>
<pin>
<ID>_P22</ID>
<x0>503</x0>
<y0>483</y0>
<width>85</width>
<height>28</height>
<text>single_step()</text>
<px>102</px>
<py>18</py>
</pin>
<pin>
<ID>_P21</ID>
<x0>213</x0>
<y0>574</y0>
<width>73</width>
<height>27</height>
<text>run_stop()</text>
<px>0</px>
<py>132</py>
</pin>
<relation>
<ID>_R30</ID>
<pin1name>_A28(_P2)</pin1name>
<pin2name>_O25</pin2name>
</relation>
<relation>
<ID>_R29</ID>
<pin1name>_O23</pin1name>
<pin2name>_A28(_P0)</pin2name>
</relation>
<relation>
<ID>_R26</ID>
<pin1name>_P22</pin1name>
<pin2name>_O25</pin2name>
</relation>
<relation>
<ID>_R24</ID>
<pin1name>_P21</pin1name>
<pin2name>_O23</pin2name>
</relation>
<operation>
<ID>_O37</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>717</x0>
<y0>59</y0>
<width>192</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//実機のメモリに書き込む



if(load_done) load_done=false;

else{
for( int ad = 0; ad &lt; AD_SIZE; ad++ ){
   int c = mem_c[ad];
   int a = mem_a[ad];
   int r = mem_r[ad];
   int d = mem_d[ad];
   exec_command(write_memory_command+&quot; &quot;+ad+&quot; &quot;+c+&quot; &quot;+a+&quot; &quot;+r+&quot; &quot;+d);
   try{Thread.sleep(300);} catch(Exception e){}
}
load_done = true;
}
</codetext>
</operation>
<relation>
<ID>_R38</ID>
<pin1name>_P18</pin1name>
<pin2name>_O37</pin2name>
</relation>
</xobject>
<relation>
<ID>_R82</ID>
<pin1name>_A0(_PAcompile_button)</pin1name>
<pin2name>_X79(_P0)</pin2name>
</relation>
<relation>
<ID>_R83</ID>
<pin1name>_A0(_PAclr_button)</pin1name>
<pin2name>_X79(_P1)</pin2name>
</relation>
<relation>
<ID>_R84</ID>
<pin1name>_A0(_PAasm_button)</pin1name>
<pin2name>_X79(_P2)</pin2name>
</relation>
<relation>
<ID>_R85</ID>
<pin1name>_A0(_PAasm_edit_button)</pin1name>
<pin2name>_X79(_P3)</pin2name>
</relation>
<relation>
<ID>_R87</ID>
<pin1name>_A0(_PAedit_button)</pin1name>
<pin2name>_X79(_P5)</pin2name>
</relation>
<relation>
<ID>_R98</ID>
<pin1name>_A0(_Pio_flg)</pin1name>
<pin2name>_X19(_P65)</pin2name>
</relation>
<relation>
<ID>_R99</ID>
<pin1name>_A0(_PAaddr_reg)</pin1name>
<pin2name>_X42(_P0)</pin2name>
</relation>
<codeclip>
<ID>_C101</ID>
<x0>614</x0>
<y0>1</y0>
<width>283</width>
<height>30</height>
<codetext>//コマンドを実行して結果をコンソールに表示する
public void exec_command( String cmd ){

      Runtime runtime = Runtime.getRuntime();
      Process process;
      try {            //実行するコマンドを指定
        process = runtime.exec(cmd);
        new PrintThread(process.getInputStream()).start();
        new PrintThread(process.getErrorStream()).start();
        process.waitFor();
      } catch (Exception e) {}
    }


class PrintThread extends Thread{
  BufferedReader reader;
  PrintThread( InputStream s ){
    reader = new BufferedReader(new InputStreamReader(s));
  }
  
  public void run(){
    String line;
    try{
      while ((line = reader.readLine()) != null) print_msg(line+&quot;\n&quot;);
      reader.close();
    } catch( IOException ie ){ }
  }
}
</codetext>
</codeclip>
<xobject>
<ID>_X111</ID>
<x0>459</x0>
<y0>775</y0>
<width>262</width>
<height>440</height>
<ID_maker>78</ID_maker>
<objectname>control_signals</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>0</x0>
<y0>9</y0>
<width>215</width>
<height>23</height>
<text>rd_port_buttin_is(JButton b)</text>
<px>0</px>
<py>27</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>1</x0>
<y0>58</y0>
<width>218</width>
<height>23</height>
<text>wr_port_button_is(JButton b)</text>
<px>0</px>
<py>58</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>470</x0>
<y0>18</y0>
<width>90</width>
<height>27</height>
<text>rd_port()</text>
<px>0</px>
<py>41</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>473</x0>
<y0>69</y0>
<width>89</width>
<height>28</height>
<text>wr_port()</text>
<px>0</px>
<py>69</py>
</pin>
<pin>
<ID>_P4</ID>
<x0>0</x0>
<y0>110</y0>
<width>217</width>
<height>28</height>
<text>cpu_reset_button_is(JButton b)</text>
<px>0</px>
<py>85</py>
</pin>
<pin>
<ID>_P5</ID>
<x0>474</x0>
<y0>130</y0>
<width>87</width>
<height>21</height>
<text>cpu_reset()</text>
<px>0</px>
<py>97</py>
</pin>
<pin>
<ID>_P6</ID>
<x0>0</x0>
<y0>164</y0>
<width>195</width>
<height>27</height>
<text>cpu_halt_button_is(JButton b)</text>
<px>0</px>
<py>114</py>
</pin>
<pin>
<ID>_P7</ID>
<x0>473</x0>
<y0>177</y0>
<width>79</width>
<height>28</height>
<text>cpu_halt()</text>
<px>0</px>
<py>127</py>
</pin>
<pin>
<ID>_P8</ID>
<x0>0</x0>
<y0>211</y0>
<width>196</width>
<height>31</height>
<text>osc_button_is(JButton b)</text>
<px>0</px>
<py>142</py>
</pin>
<pin>
<ID>_P9</ID>
<x0>481</x0>
<y0>227</y0>
<width>60</width>
<height>30</height>
<text>osc()</text>
<px>0</px>
<py>157</py>
</pin>
<pin>
<ID>_P10</ID>
<x0>0</x0>
<y0>263</y0>
<width>217</width>
<height>29</height>
<text>osc_enable_button_is(JButton b)</text>
<px>0</px>
<py>170</py>
</pin>
<pin>
<ID>_P11</ID>
<x0>484</x0>
<y0>282</y0>
<width>84</width>
<height>32</height>
<text>osc_enable()</text>
<px>0</px>
<py>186</py>
</pin>
<pin>
<ID>_P12</ID>
<x0>0</x0>
<y0>321</y0>
<width>232</width>
<height>29</height>
<text>sdisable_button_is(JButton b)</text>
<px>0</px>
<py>204</py>
</pin>
<pin>
<ID>_P13</ID>
<x0>483</x0>
<y0>341</y0>
<width>99</width>
<height>26</height>
<text>sdisable()</text>
<px>0</px>
<py>219</py>
</pin>
<pin>
<ID>_P14</ID>
<x0>0</x0>
<y0>372</y0>
<width>209</width>
<height>30</height>
<text>sclk_button_is(JButton b)</text>
<px>0</px>
<py>240</py>
</pin>
<pin>
<ID>_P15</ID>
<x0>485</x0>
<y0>388</y0>
<width>81</width>
<height>30</height>
<text>sclk()</text>
<px>0</px>
<py>257</py>
</pin>
<pin>
<ID>_P16</ID>
<x0>0</x0>
<y0>420</y0>
<width>228</width>
<height>30</height>
<text>sdata_button_is(JButton b)</text>
<px>0</px>
<py>275</py>
</pin>
<pin>
<ID>_P17</ID>
<x0>488</x0>
<y0>440</y0>
<width>84</width>
<height>30</height>
<text>sdata()</text>
<px>0</px>
<py>292</py>
</pin>
<pin>
<ID>_P18</ID>
<x0>0</x0>
<y0>473</y0>
<width>224</width>
<height>27</height>
<text>swrite_button_is(JButton b)</text>
<px>0</px>
<py>310</py>
</pin>
<pin>
<ID>_P19</ID>
<x0>491</x0>
<y0>493</y0>
<width>91</width>
<height>29</height>
<text>swrite()</text>
<px>0</px>
<py>329</py>
</pin>
<pin>
<ID>_P20</ID>
<x0>0</x0>
<y0>528</y0>
<width>231</width>
<height>29</height>
<text>reset_interval_box_is(JTextField t)</text>
<px>0</px>
<py>348</py>
</pin>
<pin>
<ID>_P22</ID>
<x0>492</x0>
<y0>547</y0>
<width>135</width>
<height>31</height>
<text>set_reset_interval()</text>
<px>0</px>
<py>368</py>
</pin>
<pin>
<ID>_P23</ID>
<x0>0</x0>
<y0>594</y0>
<width>227</width>
<height>33</height>
<text>wait_interval_box_is(JTextField t)</text>
<px>0</px>
<py>387</py>
</pin>
<pin>
<ID>_P24</ID>
<x0>492</x0>
<y0>600</y0>
<width>127</width>
<height>32</height>
<text>set_wait_interva()</text>
<px>0</px>
<py>406</py>
</pin>
<pin>
<ID>_P25</ID>
<x0>777</x0>
<y0>182</y0>
<width>60</width>
<height>30</height>
<text>reset()</text>
<px>0</px>
<py>422</py>
</pin>
<operation>
<ID>_O26</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>246</x0>
<y0>0</y0>
<width>170</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>rd_port_button = b;
</codetext>
</operation>
<relation>
<ID>_R27</ID>
<pin1name>_P0</pin1name>
<pin2name>_O26</pin2name>
</relation>
<operation>
<ID>_O28</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>627</x0>
<y0>7</y0>
<width>122</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xrd_port) exec_command(rd_port_l_command); else exec_command(rd_port_h_command);
xrd_port= !xrd_port;
update_control();
</codetext>
</operation>
<relation>
<ID>_R29</ID>
<pin1name>_P2</pin1name>
<pin2name>_O28</pin2name>
</relation>
<operation>
<ID>_O30</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>246</x0>
<y0>54</y0>
<width>170</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>wr_port_button = b;</codetext>
</operation>
<relation>
<ID>_R31</ID>
<pin1name>_P1</pin1name>
<pin2name>_O30</pin2name>
</relation>
<operation>
<ID>_O32</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>249</x0>
<y0>109</y0>
<width>170</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>cpu_reset_button = b;</codetext>
</operation>
<relation>
<ID>_R33</ID>
<pin1name>_P4</pin1name>
<pin2name>_O32</pin2name>
</relation>
<operation>
<ID>_O34</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>251</x0>
<y0>163</y0>
<width>170</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>cpu_halt_button = b;</codetext>
</operation>
<relation>
<ID>_R35</ID>
<pin1name>_P6</pin1name>
<pin2name>_O34</pin2name>
</relation>
<operation>
<ID>_O36</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>252</x0>
<y0>219</y0>
<width>170</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>osc_button = b;</codetext>
</operation>
<relation>
<ID>_R37</ID>
<pin1name>_P8</pin1name>
<pin2name>_O36</pin2name>
</relation>
<operation>
<ID>_O38</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>253</x0>
<y0>272</y0>
<width>170</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>osc_enable_button = b;</codetext>
</operation>
<relation>
<ID>_R39</ID>
<pin1name>_P10</pin1name>
<pin2name>_O38</pin2name>
</relation>
<operation>
<ID>_O40</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>252</x0>
<y0>326</y0>
<width>188</width>
<height>44</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>sdisable_button = b;</codetext>
</operation>
<relation>
<ID>_R41</ID>
<pin1name>_P12</pin1name>
<pin2name>_O40</pin2name>
</relation>
<operation>
<ID>_O42</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>253</x0>
<y0>378</y0>
<width>170</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>sclk_button = b;</codetext>
</operation>
<relation>
<ID>_R43</ID>
<pin1name>_P14</pin1name>
<pin2name>_O42</pin2name>
</relation>
<operation>
<ID>_O44</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>252</x0>
<y0>431</y0>
<width>170</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>sdata_button = b;</codetext>
</operation>
<relation>
<ID>_R45</ID>
<pin1name>_P16</pin1name>
<pin2name>_O44</pin2name>
</relation>
<operation>
<ID>_O46</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>254</x0>
<y0>484</y0>
<width>178</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>18</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>swrite_button = b;</codetext>
</operation>
<relation>
<ID>_R47</ID>
<pin1name>_P18</pin1name>
<pin2name>_O46</pin2name>
</relation>
<operation>
<ID>_O48</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>255</x0>
<y0>542</y0>
<width>197</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>97</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>reset_interval_box = t;</codetext>
</operation>
<relation>
<ID>_R49</ID>
<pin1name>_P20</pin1name>
<pin2name>_O48</pin2name>
</relation>
<operation>
<ID>_O50</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>254</x0>
<y0>595</y0>
<width>197</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>97</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>wait_interval_box = t;</codetext>
</operation>
<relation>
<ID>_R51</ID>
<pin1name>_P23</pin1name>
<pin2name>_O50</pin2name>
</relation>
<operation>
<ID>_O52</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>627</x0>
<y0>59</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xwr_port) exec_command(wr_port_l_command); else exec_command(wr_port_h_command);
xwr_port = !xwr_port;
update_control();
</codetext>
</operation>
<relation>
<ID>_R53</ID>
<pin1name>_P3</pin1name>
<pin2name>_O52</pin2name>
</relation>
<operation>
<ID>_O54</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>628</x0>
<y0>112</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xcpu_reset) exec_command(cpu_reset_l_command); else exec_command(cpu_reset_h_command);
xcpu_reset = !xcpu_reset;
update_control();

</codetext>
</operation>
<operation>
<ID>_O55</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>628</x0>
<y0>162</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xcpu_halt) exec_command(cpu_halt_l_command); else exec_command(cpu_halt_h_command);
xcpu_halt = !xcpu_halt;
update_control();
</codetext>
</operation>
<operation>
<ID>_O56</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>631</x0>
<y0>212</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xosc) exec_command(osc_l_command); else exec_command(osc_h_command);
xosc = !xosc;
update_control();
</codetext>
</operation>
<operation>
<ID>_O57</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>631</x0>
<y0>265</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xosc_enable) exec_command(osc_enable_l_command); else exec_command(osc_enable_h_command);
xosc_enable = !xosc_enable;
update_control();
</codetext>
</operation>
<operation>
<ID>_O58</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>631</x0>
<y0>321</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xsdisable) exec_command(sdisable_l_command); else exec_command(sdisable_h_command);
xsdisable = !xsdisable;
update_control();
</codetext>
</operation>
<operation>
<ID>_O59</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>633</x0>
<y0>375</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xsclk) exec_command(sclk_l_command); else exec_command(sclk_h_command);
xsclk = !xsclk;
update_control();
</codetext>
</operation>
<operation>
<ID>_O60</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>636</x0>
<y0>427</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xsdata) exec_command(sdata_l_command); else exec_command(sdata_h_command);
xsdata = !xsdata;
update_control();
</codetext>
</operation>
<operation>
<ID>_O61</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>636</x0>
<y0>475</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



if(xswrite) exec_command(swrite_l_command); else exec_command(swrite_h_command);
xswrite = !xswrite;
update_control();
</codetext>
</operation>
<operation>
<ID>_O62</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>639</x0>
<y0>530</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



exec_command(reset_interval_command+&quot; &quot;+reset_interval_box.getText());
update_control();

</codetext>
</operation>
<operation>
<ID>_O63</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>640</x0>
<y0>591</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



exec_command(wait_interval_command+&quot; &quot;+wait_interval_box.getText());
update_control();

</codetext>
</operation>
<relation>
<ID>_R64</ID>
<pin1name>_P5</pin1name>
<pin2name>_O54</pin2name>
</relation>
<relation>
<ID>_R65</ID>
<pin1name>_P7</pin1name>
<pin2name>_O55</pin2name>
</relation>
<relation>
<ID>_R66</ID>
<pin1name>_P9</pin1name>
<pin2name>_O56</pin2name>
</relation>
<relation>
<ID>_R69</ID>
<pin1name>_P11</pin1name>
<pin2name>_O57</pin2name>
</relation>
<relation>
<ID>_R70</ID>
<pin1name>_P13</pin1name>
<pin2name>_O58</pin2name>
</relation>
<relation>
<ID>_R71</ID>
<pin1name>_P15</pin1name>
<pin2name>_O59</pin2name>
</relation>
<relation>
<ID>_R72</ID>
<pin1name>_P17</pin1name>
<pin2name>_O60</pin2name>
</relation>
<relation>
<ID>_R73</ID>
<pin1name>_P19</pin1name>
<pin2name>_O61</pin2name>
</relation>
<relation>
<ID>_R74</ID>
<pin1name>_P22</pin1name>
<pin2name>_O62</pin2name>
</relation>
<relation>
<ID>_R75</ID>
<pin1name>_P24</pin1name>
<pin2name>_O63</pin2name>
</relation>
<operation>
<ID>_O76</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>863</x0>
<y0>161</y0>
<width>123</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// クリック処理



exec_command(reset_command);
</codetext>
</operation>
<relation>
<ID>_R77</ID>
<pin1name>_P25</pin1name>
<pin2name>_O76</pin2name>
</relation>
</xobject>
<xobject>
<ID>_X113</ID>
<x0>459</x0>
<y0>641</y0>
<width>262</width>
<height>132</height>
<ID_maker>46</ID_maker>
<objectname>Basic</objectname>
<description>新規のアプリケーション</description>
<pin>
<ID>_PSTART</ID>
<x0>24</x0>
<y0>110</y0>
<width>55</width>
<height>24</height>
<text>start()</text>
<px>205</px>
<py>14</py>
</pin>
<codeclip>
<ID>_C7</ID>
<x0>8</x0>
<y0>325</y0>
<width>272</width>
<height>99</height>
<codetext>//Variables
 A51Basic      a51basic = null;
 Thread        thread = null;
 String        InputBuffer=&quot;&quot;;
 char           KeyCode=&apos;\0&apos;;
 boolean      is_gets = false;
</codetext>
</codeclip>
<xobject>
<ID>_X_G12</ID>
<x0>287</x0>
<y0>90</y0>
<width>208</width>
<height>168</height>
<objectname>Control</objectname>
<description></description>
<operation>
<ID>_O5</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>394</x0>
<y0>117</y0>
<width>134</width>
<height>56</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>35</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// Basicを起動


if( a51basic != null ){
  cmd_in(&quot;bye&quot;);
  try{  a51basic.ThreadBasic.join(); } catch(Exception e ){};
}
a51basic = new A51Basic();
a51basic.startBasic();
update_control();
cmd_line.requestFocus();
</codetext>
</operation>
<pin>
<ID>_P17</ID>
<text>start()</text>
<x0>265</x0>
<y0>152</y0>
<width>45</width>
<height>21</height>
<px>0</px>
<py>41</py>
</pin>
<relation>
<ID>_R18</ID>
<pin2name>_O5</pin2name>
<pin1name>_P17</pin1name>
</relation>
<ID_maker>42</ID_maker>
<pin>
<ID>_P21</ID>
<x0>200</x0>
<y0>324</y0>
<width>135</width>
<height>23</height>
<text>cmd_in(String cmd)</text>
<px>0</px>
<py>102</py>
</pin>
<pin>
<ID>_P22</ID>
<x0>204</x0>
<y0>235</y0>
<width>173</width>
<height>21</height>
<text>cmd_line_is(JTextField t)</text>
<px>0</px>
<py>70</py>
</pin>
<pin>
<ID>_P23</ID>
<x0>237</x0>
<y0>415</y0>
<width>50</width>
<height>25</height>
<text>enter()</text>
<px>0</px>
<py>123</py>
</pin>
<pin>
<ID>_P24</ID>
<x0>225</x0>
<y0>508</y0>
<width>51</width>
<height>24</height>
<text>stop()</text>
<px>0</px>
<py>144</py>
</pin>
<operation>
<ID>_O25</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>408</x0>
<y0>207</y0>
<width>118</width>
<height>53</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>34</inpiny0>
<inpinwidth>89</inpinwidth>
<inpinheight>19</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>cmd_line = t;


cmd_line.getDocument().addDocumentListener(listener = new keyinput_listener());
</codetext>
</operation>
<relation>
<ID>_R26</ID>
<pin1name>_P22</pin1name>
<pin2name>_O25</pin2name>
</relation>
<operation>
<ID>_O27</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>404</x0>
<y0>315</y0>
<width>171</width>
<height>53</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String cmd)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>34</inpiny0>
<inpinwidth>79</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>InputBuffer = cmd + &quot;\r&quot;;
cmd_line.setText(&quot;&quot;);
KeyCode=&apos;\r&apos;;
</codetext>
</operation>
<relation>
<ID>_R28</ID>
<pin1name>_P21</pin1name>
<pin2name>_O27</pin2name>
</relation>
<operation>
<ID>_O29</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>381</x0>
<y0>397</y0>
<width>306</width>
<height>56</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>35</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>InputBuffer = cmd_line.getText() + &quot;\r&quot;;
cmd_line.setText(&quot;&quot;);
KeyCode = &apos;\r&apos;;
cmd_line.requestFocus();
</codetext>
</operation>
<relation>
<ID>_R30</ID>
<pin1name>_P23</pin1name>
<pin2name>_O29</pin2name>
</relation>
<operation>
<ID>_O31</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>402</x0>
<y0>483</y0>
<width>122</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>34</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext> if( a51basic != null &amp;&amp; a51basic.ThreadBasic != null ) a51basic.ThreadBasic.run_basic = false;
 InputBuffer = &quot;\r&quot;;
cmd_line.requestFocus();
</codetext>
</operation>
<relation>
<ID>_R32</ID>
<pin1name>_P24</pin1name>
<pin2name>_O31</pin2name>
</relation>
</xobject>
<codeclip>
<ID>_C24</ID>
<x0>321</x0>
<y0>279</y0>
<width>464</width>
<height>309</height>
<codetext>keyinput_listener listener;
class keyinput_listener implements DocumentListener{
  String s;
  boolean allow = true;
  public void caretPositionChanged(InputMethodEvent e){}
  public void changedUpdate(DocumentEvent e){}//属性が変更されたときの処理
  public void insertUpdate(DocumentEvent e){
    KeyCode = &apos;\0&apos;;
    if(!is_gets){
      if( allow &amp;&amp; (s = cmd_line.getText()).length() &gt; 0 ){
        allow = false;
        KeyCode = s.charAt(0);
        if( KeyCode == &apos;\n&apos; ) KeyCode = &apos;\r&apos;;
        allow = true;
         }
      }
   }
  public void removeUpdate(DocumentEvent e){}//ドキュメントから削除されたときの処理

}
</codetext>
</codeclip>
<codeclip>
<ID>_C25</ID>
<x0>517</x0>
<y0>13</y0>
<width>292</width>
<height>67</height>
<codetext>//CARD6 Control Basicインタプリタver 0.2
// 変更点：
// nextコマンドの不具合修正
// hex$(),oct$(),bin$()関数を追加


// Basic処理系
class A51Basic{

static final int MAX_DIMENSION    = 16;    // 配列の最大次元
static final int MAX_PROGRAM_SIZE = 16000; // プログラムTEXT領域のバイトサイズ
static final int MAX_TEXT_LENGTH  = 255;   // テキスト行の長さの限界
static final int MAX_STR_LENGTH   = 511;   // 文字列の長さの限界
static final int MAX_FILES        = 10;    // 開くことのできるファイルの最大数
static final int STACK_SIZE       = 64;    // スタックサイズ

static final int VARIABLE         =  1;     // 変数名
static final int COMMAND          =  2;     // コマンド名
static final int FUNCTION         =  3;     // 関数名
static final int NUMBER           =  4;     // 数字表現文字
static final int DELIMIT          =  5;     // 区切り文字
static final int STRING           =  6;     // 文字列
static final int EOL              =  7;     // 行末
static final int LABEL            =  8;     // ラベル

// 終了コード
static final int ERROR            =  0;     // エラー
static final int DONE             =  1;     // 正常終了
static final int TERMINATE        =  2;     // TEXT実行を終了
static final int QUIT             =  3;     // BASICを終了

// ラベルの先頭文字
static final char LABEL_HEADER    = &apos;@&apos;;    // ラベルの先頭文字


// プログラム構造体
class Program{
  Object prev;   // 前の行
  Object next;   // 次の行
  int    lineno; // 行番号
  int    label;  // ラベルのチェックサム
  String text;   // テキスト先頭文字

  Program(){
    lineno = -1;
    label = -1;
    text = &quot;&quot;;
    prev = null;
    next = null;
  }

  Program( int lin, String txt, int l, Program p, Program n ){
    lineno = lin;
    label = l;
    text = new String(txt);
    prev = p;
    next = n;
  }
}


// 値
class Value{
  int type;
  double number;
  String string;

  Value(){
    type = NUMBER;
    number = 0;
    string = null;
  }
}


// 変数
class Variable{
  String name;       // 変数名
  int    dimension;  // 配列ならば0より大きな数値が入る 
  int[]  dim;
  Object array;
  int    index;
  Value  value;
  Object next;

  Variable(){
    name = null;
    dimension = 0;
    dim = new int[MAX_DIMENSION];
    index = 0;
    array = null;
    value = null;
    next = null;
  }
}


// FOR文用データ
class  FORSF{
  Variable  var;     // ループ変数へのポインタ
  double    limit;   // ループ変数上限値
  double    step;    // STEP値
  Program   program; // リピートTEXT行記憶用
  int       token_p; // リピート有効文字先頭

  FORSF(){
    var = null;
    limit = step = 0;
    program = null;
    token_p = 0;
  }
}


// GOSUB文用データ
class  GOSUBSF{
  Program program;  // リターンする行記憶用
  int     token_p;  // リターンする文字先頭

  GOSUBSF(){
    program = null;
    token_p = 0;
  }
}


// Basic用ファイルディスクリプタ
class XFD{
  Socket sock;
  InputStream    in0;
  OutputStream   out0;
  BufferedReader in;
  BufferedWriter out;

  XFD(){
    sock = null;
    in = null;
    out = null;
  }
}
 

// コマンド
String Command[] ={
  &quot;run&quot;,
  &quot;let&quot;,
  &quot;list&quot;,
  &quot;print&quot;,
  &quot;?&quot;,
  &quot;end&quot;,
  &quot;input&quot;,
  &quot;goto&quot;,
  &quot;for&quot;,
  &quot;next&quot;,
  &quot;gosub&quot;,
  &quot;return&quot;,
  &quot;if&quot;,
  &quot;save&quot;,
  &quot;edit&quot;,
  &quot;load&quot;,
  &quot;new&quot;,
  &quot;clear&quot;,
  &quot;pset&quot;,
  &quot;cls&quot;,
  &quot;line&quot;,
  &quot;locate&quot;,
  &quot;bye&quot;,
  &quot;dim&quot;,
  &quot;open&quot;,
  &quot;close&quot;,
  &quot;box&quot;,
  &quot;boxf&quot;,
  &quot;circle&quot;,
  &quot;circlef&quot;,
  &quot;start&quot;,
  &quot;exec&quot;,
  &quot;wait&quot;,
  &quot;image&quot;,
  &quot;color&quot;,
  &quot;screen&quot;,
  &quot;play&quot;,
  &quot;send&quot;,

  &quot;rd_port&quot;,
  &quot;wr_port&quot;,
  &quot;cpu_reset&quot;,
  &quot;cpu_halt&quot;,
  &quot;osc&quot;,
  &quot;osc_enable&quot;,
  &quot;sdisable&quot;,
  &quot;sclk&quot;,
  &quot;sdata&quot;,
  &quot;swrite&quot;,
  &quot;reset&quot;,
  &quot;reset_interval&quot;,
  &quot;wait_interval&quot;,
  &quot;write_memory&quot;
  
};

 // 関数
String Function[] ={
  &quot;int&quot;,
  &quot;abs&quot;,
  &quot;sqr&quot;, 
  &quot;exp&quot;, 
  &quot;log&quot;, 
  &quot;sin&quot;, 
  &quot;cos&quot;, 
  &quot;tan&quot;, 
  &quot;atn&quot;, 
  &quot;chr$&quot;, 
  &quot;asc&quot;, 
  &quot;mid$&quot;, 
  &quot;left$&quot;, 
  &quot;right$&quot;, 
  &quot;input$&quot;, 
  &quot;inkey$&quot;, 
  &quot;eof&quot;, 
  &quot;str$&quot;, 
  &quot;val&quot;, 
  &quot;len&quot;, 
  &quot;time$&quot;, 
  &quot;date$&quot;, 
  &quot;instr&quot;, 
  &quot;rnd&quot;, 
  &quot;netstat&quot;,
  &quot;recv&quot;,
  &quot;mem_c&quot;,
  &quot;mem_a&quot;,
  &quot;mem_r&quot;,
  &quot;mem_d&quot;,
  &quot;hex$&quot;,
  &quot;oct$&quot;,
  &quot;bin$&quot;

};


Program      Prog;
Program      TopProg = null;      // BASICプログラム最初の行と最後の行
Program      EndProg = null;      // BASICプログラム最初の行と最後の行
Program      CurrentProg= null;   // 現在実行中への行へのポインタ
StringBuffer TokenText;           // トークンバッファ
int          TokenP;              // トークン解析用の文字位置ポインタ
int          TokenType,TokenCode; // トークンタイプとコード
double       TokenValue;          // トークンの値
int          SysError = 0;        // この変数がセットされたらシステムエラー
Variable     TopVar = null;       // 変数リスト開始値
Variable     EndVar = null;       // 変数リスト終値
String       Pbuf;
String       ErrorMessage = &quot;&quot;;
String       SyntaxError  = &quot;Syntax Error&quot;;
String       TypeMismatch = &quot;Type Mismatch&quot;;
String       OutOfRange   = &quot;Out of Range&quot;;
char         KeyCode=&apos;\0&apos;;
int          Status;
int          CurrentLineNo;
int          xx0, yy0;
XFD[]        Xfd;    // BASICで使うファイルのハンドル


// 各種スタック
Value[]      CalcStack;   // 演算用
int          CalcStackP;
GOSUBSF[]    GosubStack;  // gosub文用
int          GosubStackP;
FORSF[]      ForStack;    // for文用
int          ForStackP;
int          NetStat;

BasicThread  ThreadBasic = null;



/* ------------------------------------------ ここからBASIC制御用関数------------------------------------- */

// Basicのエラー
class BasicError extends Exception {
  public String errMsg;
  BasicError(String msg){errMsg =msg;}
}


// エラーを発生させる
public void assertError( String mesg ) throws BasicError{
  disp_puts( mesg );_disp();
  if( CurrentProg != null &amp;&amp; CurrentProg.lineno &gt; 0){
    disp_puts( &quot; in line &quot;+ CurrentProg.lineno );_disp();
  }
  disp_puts( &quot;\n&quot; );_disp();
  BasicError e = new BasicError( mesg );
  throw e;
}


//エラーからの回復
public void resumeError(){
  CalcStack = new Value[STACK_SIZE];
  GosubStack = new GOSUBSF[STACK_SIZE];
  ForStack = new FORSF[STACK_SIZE];
  Prog = new Program();
  CurrentProg = null;
  ThreadBasic = new BasicThread();
  System.gc();
  ThreadBasic.run_basic = true;
  ThreadBasic.start();
}


// Basicを起動する
public void startBasic(){
  CalcStack = new Value[STACK_SIZE];
  GosubStack = new GOSUBSF[STACK_SIZE];
  ForStack = new FORSF[STACK_SIZE];
  Xfd = new XFD[MAX_FILES]; for( int i = 0; i &lt; MAX_FILES; i++ ) Xfd[i] = new XFD();
  Prog = new Program();
  ThreadBasic = new BasicThread();
  ThreadBasic.cmd_new();
  System.gc();
  ThreadBasic.run_basic = true;
//  disp_screen2( width,height,fontsize);
  disp_cls();_disp();


    disp_puts( &quot;CARD6 Control Basic\n&quot; );_disp();
    disp_puts( &quot;version 0.2 \n&quot; );_disp();
    ThreadBasic.start();

}


// Basicのメインスレッド
class BasicThread extends Thread{
  boolean run_basic = true;

  public void run(){

   Prog = new Program();

    // コマンド入力ループ
    try{
 
      // 通常処理
      disp_puts( &quot;READY\n&quot; );_disp();
      while( run_basic ){

        // 計算スタック初期化
        clear_value();

        // 1行入力
        Pbuf = disp_gets();_disp();
        if( !run_basic )  break;

        // インタープリタに解析実行させる
        if( !Pbuf.equals(&quot;\r&quot;) ){
          Prog.text = Pbuf;
          Status = run_basic( Prog );
          if( Status != 0 ){
             if( Status == QUIT ){
              cmd_new();
              disp_puts(&quot;&lt;&lt; BYE &gt;&gt;\n&quot; );_disp();
              run_basic = false;
              return;
            }
            if( Status != TERMINATE ) assertError(&quot;ダイレクト実行できません&quot;);
          }
          disp_puts(&quot;\nREADY\n&quot; );_disp();
        }
      }
      if( !run_basic ) assertError(&quot;Break&quot;);
    } catch( BasicError e ){ resumeError(); }
  }


/* ------------------------------------------ ここからBASICプログラム編集用の関数------------------------------------- */


// プログラムを消去する
void clear_program(){
  TopProg = EndProg = null;
}


// 指定されたラベルの位置を返す。ラベルが見つからないときはNULLを返す
Program serch_label_position( int lbl, StringBuffer buf ){
  Program p = TopProg;
  String s = new String(buf);
  String b;
  int i, j, l;

//disp_puts(&quot;serch_label_pos: check=&quot;+lbl+&quot; str=&quot;+buf+&quot;\n&quot;);_disp();

  while( p != null ){
    if( p.label == lbl ){
      b = p.text;
      l = b.length();
      for( i = 0; i &lt; l &amp;&amp; isspace(b.charAt(i)); i++ ) ;
      if( i &lt; l &amp;&amp; b.charAt(i) == LABEL_HEADER ){
        for( j = ++i; j &lt; l &amp;&amp; (isalnum(b.charAt(j)) || b.charAt(j) == &apos;_&apos;); j++ ) ;
        if( b.substring(i,j).equals(s) ) return p;
        }
      }
    p = (Program)p.next;
  }
  return null;
}


// Basicプログラムをロードする
public void load_basic( String fname ) throws BasicError{
  String line;
  int lbl;
  Program prog = new Program();

  cmd_new();
  CurrentLineNo = 1;
  try{
    BufferedReader din = new BufferedReader( new FileReader( fname ) );
    while( ( line = din.readLine() ) != null ){
      lbl = checkSum( line );

      if( TopProg == null ){  // プログラムが空の場合
        TopProg = EndProg = new Program( CurrentLineNo++, line+&quot;\r&quot;, lbl, null, null );
        }
      else{
        prog = new Program( CurrentLineNo++, line+&quot;\r&quot;, lbl, EndProg, null );
        EndProg.next = prog;
        EndProg = prog;
       }
     }
    din.close();
  } catch( IOException ie ){ assertError(&quot;ファイル\&quot;&quot; + fname + &quot;\&quot;がロードできません&quot; ); }
}


// Basicプログラムを実行する
public int run_basic( Program prog ) throws BasicError{
  int status;

//disp_puts(&quot;run_basic()\n&quot;);_disp();

  clear_value();
  CurrentProg = prog;
  TokenP = 0;
  getToken(); // 最初のトークン切り出し
  while( run_basic ){

//Log.d(&quot;run_basic&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

    // トークンがCOMMANDなら次のトークンをとりだしてDISPATCH
    if( TokenType == COMMAND ){
      int code = TokenCode;
      getToken();
      status = doBasicCommand( code );
      if( status != DONE ) return status;
    }

    /* トークンが変数なら代入 */
    else if( TokenType == VARIABLE ){
      cmd_let();
    }

    /* トークンがEOLなら次の行へ */
    else if( TokenType == EOL ){

      // 次の行に移る
      CurrentProg = (Program)CurrentProg.next;

      // 最終行(中身無し)に到達すると終了
      if( CurrentProg == null ) return TERMINATE;

      // テキストポインタを設定
      TokenP = 0;
      getToken();
    }

    /* マルチステートメントの処理 */
    else if( TokenType == DELIMIT ){
      if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;:&apos; ) getToken(); else assertError( SyntaxError );
    }

    // ラベルの場合は無視(1つの行に2個以上ラベルがある場合は、最初のラベル以外は無視されるので注意)
    else if( TokenType == LABEL ){
      getToken();
    }

    /* 上に当てはまらないなら文法エラー*/  
    else assertError( SyntaxError );
  }
  return 0;
}


/* トークンが正しければ次のトークンを読み込み、トークンが間違っていたらエラーを発生させる */
public void checkToken( String token ) throws BasicError{
  if( !TokenText.toString().equals(token) ) assertError( SyntaxError );
  getToken();
}


/* トークンを切り出してバッファに格納する    */
public void getToken() throws BasicError{
  int    t;
  char   c =&apos;\0&apos;;

//Log.d(&quot;getToken(ENTER)&quot;, &quot;Text=&quot;+CurrentProg.text);


 try{

  TokenText = new StringBuffer(&quot;&quot;);

  // 空白や制御文字をスキップする
  while( ( c = CurrentProg.text.charAt(TokenP) ) &lt;= &apos; &apos; ){

    // &apos;\n&apos;は行の終わり
    if( TokenP &gt;= CurrentProg.text.length()-1 ){
      TokenType = EOL;
      return;
    }

    TokenP++;
  }

  // &quot;&apos;&quot;が現れたときは行の終わり
  if( ( c = CurrentProg.text.charAt(TokenP) ) == &apos;\&apos;&apos; ){
    TokenType = EOL;
    return;
  }

  // 先頭が&quot;であれば次の&quot;までは文字列
  else if( c == &apos;\&quot;&apos; ){
    TokenType = STRING;
    TokenP++;
    while( TokenP &lt; CurrentProg.text.length() &amp;&amp; ( c = CurrentProg.text.charAt(TokenP) ) != &apos;\&quot;&apos; ){ TokenText.append(c); TokenP++;}
    if( TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;文字列が不正です&quot;);
    TokenP++;

//Log.d(&quot;getToken(STR)&quot;, &quot;TokenText=\&quot;&quot;+TokenText+&quot;\&quot;&quot;);

    return;
  }

  // 先頭がアルファベットもしくはアンダースコア
  else if( isalpha( c ) || c == &apos;?&apos; || c == &apos;_&apos; ){
    while( isalnum( c = CurrentProg.text.charAt(TokenP) ) || c == &apos;_&apos; || c == &apos;$&apos; ){
      TokenText.append(c);
      TokenP++;
    }

    // Basicのコマンドの場合
    for( t = 0; t &lt; Command.length; t++ ){
      if( Command[ t ].equals( TokenText.toString() ) ){
        TokenType = COMMAND;
        TokenCode = t;
 
//Log.d(&quot;getToken(CMD)&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot;, Code=&quot;+TokenCode);

        return;
      }
    }

    // 関数の場合
    for( t = 0; t &lt;Function.length; t++ ){
      if( Function[ t ].equals( TokenText.toString() ) ){
        TokenType = FUNCTION;
        TokenCode = t;

//Log.d(&quot;getToken(FUNC)&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot;, Code=&quot;+TokenCode);

        return;
      }
    }

    // コマンドでも関数でもないときは変数とみなす
    TokenType = VARIABLE;
    return;
  }

  // 先頭がラベルの先頭文字であれば英数字と&apos;_&apos;が続いているところはラベル
  else if( c == LABEL_HEADER ){
    TokenType = LABEL;
    TokenP++;
    TokenCode = 0;
    while( isalnum( c = CurrentProg.text.charAt(TokenP) ) || c == &apos;_&apos; ){
      TokenText.append(c);
      TokenCode += (int)(byte)c;
      TokenP++;
    }
  }

  /* 先頭が&apos;&amp;&apos;で始まっている場合が数値 */
  else if( c == &apos;&amp;&apos; ){
    TokenType = NUMBER;
    if( ++TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;数値表記が不正です&quot;);

    // 16進数
    if( (c = CurrentProg.text.charAt(TokenP)) == &apos;h&apos; || c == &apos;H&apos; ){
      if( ++TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;16進数の表記が不正です&quot;);
      if( ( ( c = CurrentProg.text.charAt(TokenP) ) &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ) || ( c &gt;= &apos;a&apos; &amp;&amp; c &lt;= &apos;f&apos; ) || ( c &gt;= &apos;A&apos; &amp;&amp; c &lt;= &apos;F&apos; ) ){
        do {
          TokenText.append(c);
          if( ++TokenP &gt;= CurrentProg.text.length() ){
            TokenValue = (double)Integer.parseInt( TokenText.toString(), 16 );
            return;
          }
          c = CurrentProg.text.charAt(TokenP);
        } while( ( c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ) || ( c &gt;= &apos;a&apos; &amp;&amp; c &lt;= &apos;f&apos; ) || ( c &gt;= &apos;A&apos; &amp;&amp; c &lt;= &apos;F&apos; ) );
        TokenValue = (double)Integer.parseInt( TokenText.toString(), 16 );
        return;
      }
      assertError(&quot;16進数の表記が不正です&quot;);
    }

    // 8進数
    else{
      if( c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;7&apos; ){
        do {
          TokenText.append(c);
          if( ++TokenP &gt;= CurrentProg.text.length() ){
            TokenValue = (double)Integer.parseInt( TokenText.toString(), 8 );
            return;
          }
          c = CurrentProg.text.charAt(TokenP);
        } while( c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;7&apos; );
        TokenValue = (double)Integer.parseInt( TokenText.toString(), 8 );
        return;
      }
      assertError(&quot;8進数の表記が不正です&quot;);
    }
  }

  // 先頭が&apos;.&apos;で始まっている場合も数値
  else if( c == &apos;.&apos; ){
    TokenType = NUMBER;
    TokenText.append(c);
    if( ++TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;数値表記が不正です&quot;);
    if( ( c = CurrentProg.text.charAt(TokenP) ) &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ){
      do {
        TokenText.append(c);
        if( ++TokenP &gt;= CurrentProg.text.length() ){
          TokenValue = Double.parseDouble( TokenText.toString() );
          return;
        }
        c = CurrentProg.text.charAt(TokenP);
      } while( &apos;0&apos; &lt;= c &amp;&amp; c &lt;= &apos;9&apos; );
      // 実数(指数表示)
      if( c == &apos;e&apos; || c == &apos;E&apos; ){
        TokenText.append(c);
        if( ++TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;数値表記が不正です&quot;);
        if( ( c = CurrentProg.text.charAt(TokenP) ) == &apos;+&apos; || c == &apos;-&apos; ){
          TokenText.append(c);
          if( ++TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;数値表記が不正です&quot;);
        }
        if( ( c = CurrentProg.text.charAt(TokenP) ) &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ){
          do {
            TokenText.append(c);
            if( ++TokenP &gt;= CurrentProg.text.length() ){
              TokenValue = Double.parseDouble( TokenText.toString() );
              return;
            }
            c = CurrentProg.text.charAt(TokenP);
          } while( c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; );
          TokenValue = Double.parseDouble( TokenText.toString() );
          return;
        }
        assertError(&quot;数値表記が不正です&quot;);
      }
      // 単純な小数
      else{
        TokenValue = Double.parseDouble( TokenText.toString() );
        return;
      }
    }
    assertError(&quot;数値表記が不正です&quot;);
  }

  // 先頭が数字で始まっている場合も数値
  else if( c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ){
    TokenType = NUMBER;
    do {
      TokenText.append(c);
      if( ++TokenP &gt;= CurrentProg.text.length() ){
        TokenValue = Double.parseDouble( TokenText.toString() );
        return;
      }
      c = CurrentProg.text.charAt(TokenP);
    } while( &apos;0&apos; &lt;= c &amp;&amp; c &lt;= &apos;9&apos; );

    if( c == &apos;.&apos; ){
      TokenType = NUMBER;
      TokenText.append(c);
      if( ++TokenP &gt;= CurrentProg.text.length() ){
        TokenValue = Double.parseDouble( TokenText.toString() );
        return;
      }
      if( ( c = CurrentProg.text.charAt(TokenP) ) &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ){
        do {
          TokenText.append(c);
          if( ++TokenP &gt;= CurrentProg.text.length() ){
            TokenValue = Double.parseDouble( TokenText.toString() );
            return;
          }
          c = CurrentProg.text.charAt(TokenP);
        } while( &apos;0&apos; &lt;= c &amp;&amp; c &lt;= &apos;9&apos; );

        // 実数(指数表示)
        if( c == &apos;e&apos; || c == &apos;E&apos; ){
          TokenText.append(c);
          if( ++TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;数値表記が不正です&quot;);
          if( ( c = CurrentProg.text.charAt(TokenP) ) == &apos;+&apos; || c == &apos;-&apos; ){
            TokenText.append(c);
            if( ++TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;数値表記が不正です&quot;);
          }
          if( ( c = CurrentProg.text.charAt(TokenP) ) &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ){
            do {
              TokenText.append(c);
              if( ++TokenP &gt;= CurrentProg.text.length() ){
                TokenValue = Double.parseDouble( TokenText.toString() );
                return;
              }
              c = CurrentProg.text.charAt(TokenP);
            } while( c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; );
            TokenValue = Double.parseDouble( TokenText.toString() );
            return;
          }
          assertError(&quot;数値表記が不正です&quot;);
        }
        // 単純な小数
        else{
          TokenValue = Double.parseDouble( TokenText.toString() );
          return;
        }
      }
      assertError(&quot;数値表記が不正です&quot;);
    }

    else{

      // 実数(指数表示)
      if( c == &apos;e&apos; || c == &apos;E&apos; ){
        TokenText.append(c);
        if( ++TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;数値表記が不正です&quot;);
        if( ( c = CurrentProg.text.charAt(TokenP) ) == &apos;+&apos; || c == &apos;-&apos; ){
          TokenText.append(c);
          if( ++TokenP &gt;= CurrentProg.text.length() ) assertError(&quot;数値表記が不正です&quot;);
        }
        if( ( c = CurrentProg.text.charAt(TokenP) ) &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ){
          do {
            TokenText.append(c);
            if( ++TokenP &gt;= CurrentProg.text.length() ){
              TokenValue = Double.parseDouble( TokenText.toString() );
              return;
            }
            c = CurrentProg.text.charAt(TokenP);
          } while( c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; );
          TokenValue = Double.parseDouble( TokenText.toString() );
          return;
        }
        assertError(&quot;数値表記が不正です&quot;);
      }

      //単純な整数表現
      else{
        TokenValue = Double.parseDouble( TokenText.toString() );
        return;
      }
    }

  }

  /* 上記以外は区切り文字 */
  else{
    TokenType = DELIMIT;
    TokenText.append(c);
    TokenP++;

    // 2文字の比較演算子の場合
    if( c == &apos;&lt;&apos; ){
      if( ( c = CurrentProg.text.charAt(TokenP) )  ==&apos;&gt;&apos; || c == &apos;=&apos; ){
        TokenText.append(c);
        TokenP++;
      }
    }
    else if( c == &apos;&gt;&apos; ){
      if( ( c = CurrentProg.text.charAt(TokenP) )  == &apos;=&apos; ){
        TokenText.append(c);
        TokenP++;
      }
    }
  }
  }
  catch( Exception e ){ assertError( SyntaxError ); }
}


/* ------------------------------------------ ここからBASICの組込みコマンド処理用関数　------------------------------------- */
int doBasicCommand( int cmd ) throws BasicError{

//disp_puts(&quot;doBasicCommand: TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);_disp();


  switch( cmd ){
  case  0: return cmd_run();
  case  1: return cmd_let();
  case  2: return cmd_list();
  case  3: return cmd_print();
  case  4: return cmd_print();
  case  5: return cmd_end();
  case  6: return cmd_input();
  case  7: return cmd_goto();
  case  8: return cmd_for();
  case  9: return cmd_next();
  case 10: return cmd_gosub();
  case 11: return cmd_return();
  case 12: return cmd_if();
  case 13: return cmd_save();
  case 14: return cmd_edit();
  case 15: return cmd_load();
  case 16: return cmd_new();
  case 17: return cmd_clear();
  case 18: return cmd_pset();
  case 19: return cmd_cls();
  case 20: return cmd_line();
  case 21: return cmd_locate();
  case 22: return cmd_quit();
  case 23: return cmd_dim();
  case 24: return cmd_open();
  case 25: return cmd_close();
  case 26: return cmd_box();
  case 27: return cmd_boxf();
  case 28: return cmd_circle();
  case 29: return cmd_circlef();
  case 30: return cmd_start();
  case 31: return cmd_exec();
  case 32: return cmd_wait();
  case 33: return cmd_image();
  case 34: return cmd_color();
  case 35: return cmd_screen();
  case 36: return cmd_play();
  case 37: return cmd_send();

  case 38: return cmd_rd_port();
  case 39: return cmd_wr_port();
  case 40: return cmd_cpu_reset();
  case 41: return cmd_cpu_halt();
  case 42: return cmd_osc();
  case 43: return cmd_osc_enable();
  case 44: return cmd_sdisable();
  case 45: return cmd_sclk();
  case 46: return cmd_sdata();
  case 47: return cmd_swrite();
  case 48: return cmd_reset();
  case 49: return cmd_reset_interval();
  case 50: return cmd_wait_interval();
  case 51: return cmd_write_memory();



  }
  return ERROR;
}


// NEWコマンド
int cmd_new(){
  clear_program(); 
  cmd_clear(); 
  return TERMINATE;
}


// ENDコマンド
int cmd_end() {
  return TERMINATE;
}


// QUITコマンド
int cmd_quit(){
  return QUIT;
}


// listコマンド
int cmd_list() throws BasicError{
  Program p;

//Log.d(&quot;cmd_list&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  int st = 0, ed = 0x7fffffff;
  if( TokenType == NUMBER ){
    st = (int)get_number();
    getToken();
  }


//Log.d(&quot;cmd_list&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType);

  if( TokenType == DELIMIT &amp;&amp; ( TokenText.charAt(0) == &apos;,&apos; || TokenText.charAt(0) == &apos;-&apos; ) ) getToken();
  if( TokenType == NUMBER ){
    ed = (int)get_number();
    getToken();
  }
  for( p = TopProg; p != null; p = (Program)p.next ){
    if( p.lineno &gt;= st &amp;&amp; p.lineno &lt;= ed ){
      disp_puts( p.lineno + &quot; &quot; + p.text + &quot;\n&quot; );_disp();

//      disp_puts( p.lineno + &quot; (&quot; +p.label+&quot;) &quot;+ p.text + &quot;\n&quot; );_disp();

    }
  }
  return TERMINATE;
}


// loadコマンド
int cmd_load() throws BasicError{
  if( TokenType != STRING ) assertError( SyntaxError );
  load_basic( TokenText.toString() );
  return TERMINATE;
}


// saveコマンド
int cmd_save() throws BasicError{
  Program p;
  if( TokenType != STRING ) assertError( SyntaxError );
  String fname = TokenText.toString();
  try{
    BufferedWriter dout = new BufferedWriter( new FileWriter( fname ) );
    for( p = TopProg; p != null; p = (Program)p.next ){
      String txt = p.text;
      dout.write( txt.substring(0,txt.length()-1) + &quot;\n&quot;);
    }
    dout.close();
  } catch( IOException ie ){ assertError(&quot;ファイル\&quot;&quot; + fname + &quot;\&quot;がセーブできません&quot; ); }
  return TERMINATE;
}


// editコマンド
int cmd_edit(){
  disp_prog_mode( true );
  return TERMINATE;
}


// 代入文
int cmd_let() throws BasicError{

//Log.d(&quot;cmd_let&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  if( TokenType == VARIABLE ){
    Variable var = _variable( TokenText.toString() );
    Value val = get_variable_value( var );
    checkToken(&quot;=&quot;);
    eval_expression();
    if( val.type != value_type() ) assertError( TypeMismatch );
    if( var.dimension &gt; 0 ){
      if( val.type == STRING ){
        String[] array = (String[])var.array;
        array[ var.index ]  = new String( get_string() );
      }
      else{
        double[] array = (double[])var.array;
        array[ var.index ]  = get_number();
      }
    }
    else{
      if( val.type == STRING ) val.string = new String( get_string() );
      else val.number = get_number();
    }
  }
  return DONE;
}


// runコマンド
int cmd_run() throws BasicError{

//disp_puts( &quot;cmd_run: TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode+&quot;\n&quot;);
//_disp();
  int i;

    for( i = 0; i &lt; MAX_FILES; i++ ){
      try{
        if( Xfd[i].sock != null ){
          Xfd[i].sock.close();
          Xfd[i].sock = null;
          Xfd[i].in = null;
          Xfd[i].out = null;
           }
        else{
          if( Xfd[i].in != null ){
            Xfd[i].in.close();
            Xfd[i].in = null;
              }
          if( Xfd[i].out != null ){
            Xfd[i].out.close();
            Xfd[i].out = null;
              }
           }
      } catch( Exception e){ assertError(&quot;i/o error&quot;); }
      }


 cmd_clear();     // 変数をクリア
 ForStackP   = 0; // FOR-NEXT用スタックをクリア
 GosubStackP = 0; // GOSUB-RETURN用スタックをクリア
 if( (CurrentProg = TopProg) == null ) return TERMINATE;
 TokenP = 0;
 getToken();
 return DONE;
}


// printコマンド
int cmd_print() throws BasicError{
  int k;
  String last_token = &quot;&quot;;

//Log.d(&quot;cmd_print(ENTER)&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  // print#文
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;#&apos;){
    getToken();
    if( TokenType != NUMBER ) assertError( SyntaxError );
    k = (int)TokenValue;
    if( k &lt; 0 || k &gt;= MAX_FILES ) assertError(OutOfRange );

      // ファイルの場合
    if( Xfd[k].out == null ) assertError(&quot;ファイルが開いていません(print#)&quot;);
    getToken();
    if( TokenType == EOL || ( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) ==&apos;:&apos; ) ) return DONE;
    checkToken(&quot;,&quot;);
    try{
      while( TokenType != EOL &amp;&amp; !( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;:&apos; ) ){

        // データの表示
        last_token = TokenText.toString();
        clear_value();
        eval_expression();

        // 文字列型データの表示
        if( value_type() == STRING ) Xfd[k].out.write( get_string() );

        // 数値型データの表示
        else{
          Xfd[k].out.write( xstr(get_number()) );
            }
        check_value();

        // セパレータが&apos;,&apos;の場合
        if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) ==&apos;,&apos; ){
          last_token = TokenText.toString();
          Xfd[k].out.write( &quot;,&quot; );
          getToken();
        }

        // セパレータが&apos;;&apos;の場合
        else if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) ==&apos;;&apos; ){
          last_token = TokenText.toString();
          getToken();
        }
        else if( ( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;:&apos; ) || TokenType == EOL ) break;
        else assertError( SyntaxError );

      }
      if( !last_token.startsWith(&quot;;&quot;) ) Xfd[k].out.write( &quot;\n&quot; );

    } catch( IOException ie ){ assertError(&quot;i/o error&quot; ); }
   }

  // print文
  else{
    while( !( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;:&apos; ) &amp;&amp; TokenType != EOL ){

      // データの表示
      last_token = TokenText.toString();
      clear_value();
      eval_expression();

      // 文字列型データの表示
      if( value_type() == STRING ){ disp_puts( get_string() );_disp(); }

      // 数値型データの表示
      else{
        disp_puts( xstr(get_number()) );_disp();
      }
      check_value();

      // セパレータが&apos;,&apos;の場合
      if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) ==&apos;,&apos; ){
        last_token = TokenText.toString();
        disp_puts( &quot;,&quot; );_disp();
        getToken();
      }

      // セパレータが&apos;;&apos;の場合
      else if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) ==&apos;;&apos; ){
        last_token = TokenText.toString();
        getToken();
      }
      else if( ( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;:&apos; ) || TokenType == EOL ) break;
      else assertError( SyntaxError );

    }
    if( !last_token.startsWith(&quot;;&quot;) ){ disp_puts( &quot;\n&quot; );_disp(); }
  }

//Log.d(&quot;cmd_print(END)&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  return DONE;
}


// inputコマンド
int cmd_input() throws BasicError{
  int k;
  Variable  var;
  Value val;
  String buf;

  // ファイルから入力
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;#&apos; ){

    getToken();
    if( TokenType != NUMBER ) assertError( SyntaxError );
    k = (int)TokenValue;
    if( k &lt; 0 || k &gt;= MAX_FILES ) assertError(OutOfRange);
    if( Xfd[k].in == null ) assertError(&quot;ファイルが開いていません(input#)&quot;);
    getToken();
    try{
      for(;;){

            // 変数の場合は入力する
        if( TokenType == VARIABLE ){
          var = _variable( TokenText.toString() );
          val = get_variable_value( var );
          if( (buf = Xfd[k].in.readLine()) == null ) assertError(&quot;ファイルの終わりに到達しました&quot;);

               // 配列変数の場合
          if( var.dimension &gt; 0 ){
                 // 文字列型
            if( val.type == STRING ){
              String[] array = (String[])var.array;
              array[ var.index ]  = new String( buf );
                 }
                 // 数値型
            else{
              double[] array = (double[])var.array;
              array[ var.index ]  = val( buf );
                 }
              }

               // 単純変数の場合
          else{
                 // 文字列型
            if( val.type == STRING ) val.string = new String( buf );
                 // 数値型
            else val.number = val( buf );
              }
           }

            // セパレータ &apos;,&apos; or &apos;;&apos;
        else if( TokenType == DELIMIT &amp;&amp; ( TokenText.charAt(0)  == &apos;,&apos; || TokenText.charAt(0)  == &apos;;&apos; ) ){
          getToken();
           }

            // 上記以外の場合は終了
        else break;
         }
    } catch( IOException ie ){ assertError(&quot;i/o error&quot; ); }
   }

   // コンソールから入力
  else{
    int is_question = 1;
    for(;;){

      // 文字列のときはプロンプト文字列を表示する
      if( TokenType == STRING ){
        disp_puts( TokenText.toString() );_disp();
        getToken();
        }

         // 変数の場合は入力する
      else if( TokenType == VARIABLE ){
        var = _variable( TokenText.toString() );
        val = get_variable_value( var );
        if( is_question != 0 ){ disp_puts( &quot;? &quot; );_disp(); }
        buf = disp_gets();
        buf = buf.substring(0, buf.length()-1 );

        if( !run_basic ) assertError(&quot;Break&quot;);

           // 配列変数の場合
        if( var.dimension &gt; 0 ){
              // 文字列型
          if( val.type == STRING ){
            String[] array = (String[])var.array;
            array[ var.index ]  = new String( buf );
              }
              // 数値型
          else{
            double[] array = (double[])var.array;
            array[ var.index ]  = val( buf );
              }
            }

            // 単純変数の場合
        else{
              // 文字列型
          if( val.type == STRING ) val.string = new String( buf );
              // 数値型
          else val.number = val( buf );
           }
        is_question = 1;
         }

         // このセパレータをつけると&quot;?&quot;のプロンプトを表示する
      else if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
        is_question = 1;
        getToken();
        }

         // このセパレータをつけると&quot;?&quot;のプロンプトは表示されない
      else if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;;&apos; ){
        is_question = 0;
        getToken();
        }

        // 上記以外の場合は終了
      else break;
      }
   }
  return DONE;
}


// gotoコマンド
int cmd_goto() throws BasicError{
  Program p;

  int line = 1;
  if( TokenType != LABEL ) assertError(SyntaxError);

//disp_puts(&quot;cmd_goto:checksum=&quot;+TokenCode+&quot;\n&quot;);_disp();

  if( ( p = serch_label_position( TokenCode, TokenText ) ) == null ) assertError(&quot;ラベルが見つかりません&quot;);
  CurrentProg = p;
  TokenP = 0;
  getToken();
  return DONE;
}


// forコマンド
int cmd_for() throws BasicError{
  Variable var;
  if( ForStackP &gt;= STACK_SIZE ) assertError(&quot;forスタックがオーバーフローしました&quot;);
  if( TokenType != VARIABLE ) assertError( SyntaxError );

  // ループ変数を確保
  var = _variable( TokenText.toString() );
  ForStack[ForStackP] = new FORSF();
  ForStack[ForStackP].var = var;

  // ループ変数に初期値代入
  cmd_let();

  checkToken(&quot;to&quot;);

  // ループ変数上限を得る
  clear_value();
  eval_expression();
  ForStack[ForStackP].limit = get_number();

  // STEP値があるなら代入
  if( TokenText.toString().equals( &quot;step&quot; ) ){
    getToken();
    clear_value();
    eval_expression();
    ForStack[ForStackP].step = get_number();
  }

  // STEP値が省略されていて、なおかつ初期値 &gt;= 終値ならば、STEP値に1を代入
  else if( ForStack[ForStackP].limit &gt;= var.value.number ){
    ForStack[ForStackP].step = 1.0;
  }

  // STEP値が省略されていて、なおかつ初期値 &lt; 終値ならば、STEP値に-1を代入
  else ForStack[ForStackP].step = -1.0;

  // 現在の実行位置をスタックへ保存
  ForStack[ForStackP].program = CurrentProg;
  ForStack[ForStackP].token_p = TokenP;
  ForStackP++;
  return DONE;
}


// nextコマンド
int cmd_next() throws BasicError{
  if( ForStackP &lt;= 0 ) assertError(&quot;for文なしではnext命令を実行できません&quot;);
  ForStackP--;
  if( TokenType == VARIABLE ){
    Variable v = get_variable(TokenText.toString());
    while( ForStack[ForStackP].var != v ){
      if( ForStackP &lt;= 0 ) assertError(&quot;for文なしではnext命令を実行できません&quot;);
      ForStackP--;
    }
    getToken();
  }

  /* STEP値をループ変数へ加える */
  ForStack[ForStackP].var.value.number += ForStack[ForStackP].step;

  // 終了条件を満たさなければループエントリーに戻る
  if( ForStack[ForStackP].step * ( ForStack[ForStackP].var.value.number - ForStack[ForStackP].limit ) &lt;= 0.0 ){
    TokenP = ForStack[ForStackP].token_p;
    CurrentProg = ForStack[ForStackP].program;
    ForStackP++;
    getToken();
  }
  return DONE; 
}


// gosubコマンド
int cmd_gosub() throws BasicError{
  Program p;
  int line = 1;
  if( GosubStackP &gt;= STACK_SIZE ) assertError(&quot;gosubスタックがオーバーフローしました&quot;);
  if( TokenType != LABEL ) assertError( SyntaxError );

//disp_puts(&quot;cmd_gosub:checksum=&quot;+TokenCode+&quot;\n&quot;);_disp();

  if( ( p = serch_label_position( TokenCode, TokenText ) ) == null ) assertError(&quot;ラベルが見つかりません&quot;);
  getToken();
  GosubStack[GosubStackP] = new GOSUBSF();
  GosubStack[GosubStackP].program = CurrentProg;
  GosubStack[GosubStackP].token_p = TokenP;
  GosubStackP++;
  CurrentProg = p;
  TokenP = 0;
  getToken();
  return DONE;
}


// returnコマンド
int cmd_return() throws BasicError{
  if( GosubStackP &lt;= 0 ) assertError(&quot;gosubなしではreturn命令は実行できません&quot;);
  GosubStackP--;
  TokenP = GosubStack[GosubStackP].token_p;
  CurrentProg = GosubStack[GosubStackP].program;
  getToken();
  return DONE;
}


// ifコマンド
int cmd_if() throws BasicError{

  // 論理式が真ならば&quot;thenをチェックしてその次から始める&quot;
  eval_expression();
  if( (int)get_number() != 0 ){
    checkToken(&quot;then&quot;);
    if( TokenType == LABEL ){

//disp_puts(&quot;cmd_if_then:checksum=&quot;+TokenCode+&quot;\n&quot;);_disp();

      Program p = serch_label_position( TokenCode, TokenText );
      if( p == null ) assertError(&quot;ラベルが見つかりません&quot;);
      CurrentProg = p;
      TokenP = 0;
      getToken();
    }
    return DONE;
  }

  // 行のトークンを逐次検索する
  do{
    getToken();

    // &quot;else&quot;があったらそこから始める
    if( TokenText.toString().equals( &quot;else&quot; ) ){
      getToken();
      if( TokenType == LABEL ){

//disp_puts(&quot;cmd_if_else:checksum=&quot;+TokenCode+&quot;\n&quot;);_disp();

        Program p = serch_label_position( TokenCode, TokenText );
        if( p == null ) assertError(&quot;ラベルが見つかりません&quot;);
        CurrentProg = p;
        TokenP = 0;
        getToken();
      }
      return DONE;
    }
  } while( TokenType != EOL );

  // &quot;else&quot;がなかったら完了
  return DONE;
}


// dimコマンド
int cmd_dim() throws BasicError{
  Variable var;  String var_name;
  int[] dim = new int[MAX_DIMENSION];
  int dx=0, nn=0, i=0;
  while(true){
    if( TokenType != VARIABLE ) assertError( SyntaxError );
    var_name = TokenText.toString();

//System.out.println(&quot;var_name=&quot;+var_name);

    getToken();
    checkToken(&quot;(&quot;);
    dx = 0;
    while(true){
      clear_value();
      eval_expression();
      if( dx &gt;= MAX_DIMENSION ) assertError(&quot;配列の次元が大きすぎます&quot;);
      if( ( dim[ dx++ ] = (int)get_number() ) &lt;= 0 ) assertError( OutOfRange );

//System.out.println(&quot;param=&quot;+dim[ dx-1 ]);

      if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;)&apos; ) break;
      checkToken(&quot;,&quot;);
    }
    if( get_variable( var_name ) != null ) assertError(&quot;その配列は既に存在しています&quot;);
    var = _variable( var_name );
    var.dimension = dx;

    for( nn = 1, i = 0; i &lt; dx; i++ ) nn *= ( var.dim[ i ] = dim[ i ] + 1 );

//System.out.println(&quot;dim=&quot;+dx+&quot;,num=&quot;+nn);

    // 文字列型配列を初期化
    if( var.value.type == STRING ){
      String[] p = new String[nn];
      var.array = p;
      for( i = 0; i &lt; nn; i++ ){
        p[ i ] = new String(&quot;&quot;);
      }
    }

    // 数値型配列を初期化
    else{
      var.array = new double[nn];
    }

    getToken();
    if( !(TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;,&apos;) ) break;
    getToken();
  }

//System.out.println(&quot;token=&quot;+TokenText);

  getToken();
  return DONE;
}


// openコマンド
int cmd_open() throws BasicError{
  int io_flg = 0, i;
  String fname;
  clear_value();
  eval_expression();
  fname = get_string();

   // ネットワークの場合
  if( fname.startsWith(&quot;net:&quot;) ){
    checkToken(&quot;as&quot;);
    checkToken(&quot;#&quot;);
    if( TokenType != NUMBER ) assertError( SyntaxError );
    if( ( i = (int)TokenValue ) &lt; 0 || i &gt;= MAX_FILES ) assertError( OutOfRange );
    getToken();

    if( Xfd[i].sock != null ) assertError(&quot;ファイルは既に開かれています&quot;);
    try{
    try{
      if( fname.length() &lt;= 4 ) assertError(&quot;ネットワークアドレスが不正です&quot;);
      String adrs;
      int port = 80;
      int j = fname.indexOf(&quot;:&quot;, 4 );
      if( j &gt; 4 ){
        adrs = fname.substring( 4, j );
        port = xparseInt( fname.substring(j+1) );
         }
      else adrs = fname.substring( 4, j );
      Xfd[i].sock = new Socket( adrs, port );
      Xfd[i].in0 = Xfd[i].sock.getInputStream();
      Xfd[i].out0= Xfd[i].sock.getOutputStream();
      Xfd[i].in = new BufferedReader(new InputStreamReader(Xfd[i].in0));
      Xfd[i].out = new BufferedWriter(new OutputStreamWriter(Xfd[i].out0));
    } catch( Exception e ){
      if( Xfd[i].sock != null ) Xfd[i].sock.close();
      Xfd[i].sock = null;
      Xfd[i].in =  null;
      Xfd[i].out =  null;
      assertError(&quot;ネットワークに接続できません&quot;);
      }
    } catch( Exception e ){
      Xfd[i].sock = null;
      Xfd[i].in =  null;
      Xfd[i].out =  null;
     }
   }

   // ファイルの場合
  else{
    checkToken(&quot;for&quot;);
    if( TokenText.toString().equals( &quot;input&quot; ) ) io_flg = 0;
    else if( TokenText.toString().equals( &quot;output&quot; ) ) io_flg = 1;
    else assertError( SyntaxError );
    getToken();
    checkToken(&quot;as&quot;);
    checkToken(&quot;#&quot;);
    if( TokenType != NUMBER ) assertError( SyntaxError );
    if( ( i = (int)TokenValue ) &lt; 0 || i &gt;= MAX_FILES ) assertError( OutOfRange );
    getToken();

    if( Xfd[i].in != null || Xfd[i].out != null ) assertError(&quot;ファイルは既に開かれています&quot;);

      // 書きこみモード
    try{
      if( io_flg != 0 ){
        if( (Xfd[i].out = new BufferedWriter( new FileWriter( fname ) )) == null ){
          assertError(&quot;ファイルを開くことができません(write)&quot;);
            }
         }

         // 読み込みモード
      else{
        if( (Xfd[i].in = new BufferedReader( new FileReader( fname ) )) == null ){
          assertError(&quot;ファイルを開くことができません(read)&quot;);
           }
         }
    } catch( IOException e){ assertError(&quot;i/o error&quot;); }
  }
  return DONE;
}


// closeコマンド
int cmd_close() throws BasicError{
  int i;
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;#&apos; ){
    getToken();
    if( TokenType != NUMBER ) assertError( SyntaxError );
    if( ( i = (int)TokenValue ) &lt; 0 || i &gt;= MAX_FILES ) assertError( OutOfRange );
    try{
      if( Xfd[i].sock != null ){
        Xfd[i].sock.close();
        Xfd[i].sock = null;
        Xfd[i].in = null;
        Xfd[i].out = null;
         }
      else{
        if( Xfd[i].in != null ){
          Xfd[i].in.close();
          Xfd[i].in = null;
            }
        if( Xfd[i].out != null ){
          Xfd[i].out.close();
          Xfd[i].out = null;
            }
         }
    } catch( Exception e){ assertError(&quot;i/o error&quot;); }
    getToken();
   }
  else{
    for( i = 0; i &lt; MAX_FILES; i++ ){
      try{
        if( Xfd[i].sock != null ){
          Xfd[i].sock.close();
          Xfd[i].sock = null;
          Xfd[i].in = null;
          Xfd[i].out = null;
           }
        else{
          if( Xfd[i].in != null ){
            Xfd[i].in.close();
            Xfd[i].in = null;
              }
          if( Xfd[i].out != null ){
            Xfd[i].out.close();
            Xfd[i].out = null;
              }
           }
      } catch( Exception e){ assertError(&quot;i/o error&quot;); }
      }
   }
  return DONE;
}


// clearコマンド
int cmd_clear(){
  clear_value();
  clear_variable();
  ForStackP = 0;
  return DONE;
}


// clsコマンド
int cmd_cls(){
  disp_cls();_disp();
  return DONE;
}


// psetコマンド
int cmd_pset() throws BasicError{
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  xx0 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  yy0 = (int)get_number();
  checkToken(&quot;)&quot;);
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
    getToken();
    clear_value();
    eval_expression();
    get_number();
  }
  disp_pset( xx0, yy0 );_disp();
  return DONE;
}


// lineコマンド
int cmd_line() throws BasicError{
  int x1, y1;

  // 開始座標を指定する場合
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;(&apos; ){
    getToken();
    clear_value();
    eval_expression();
    xx0 = (int)get_number();
    checkToken(&quot;,&quot;);
    clear_value();
    eval_expression();
    yy0 = (int)get_number();
    checkToken(&quot;)&quot;);
  }

  // 開始座標を指定しないときはここから始める
  checkToken(&quot;-&quot;);
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  x1 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  y1 = (int)get_number();
  checkToken(&quot;)&quot;);
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
    getToken();
    clear_value();
    eval_expression();
    if( (int)get_number() != 0 ){} else {}
  }
  else {}
  disp_line( xx0, yy0, x1, y1 );_disp();
  xx0 = x1;
  yy0 = y1;
  return DONE;
}


// boxコマンド
int cmd_box() throws BasicError{
  int x1, y1;
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  xx0 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  yy0 = (int)get_number();
  checkToken(&quot;)&quot;);
  checkToken(&quot;-&quot;);
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  x1 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  y1 = (int)get_number();
  checkToken(&quot;)&quot;);
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
    getToken();
    clear_value();
    eval_expression();
    if( (int)get_number() != 0 ) {} else {}
  }
  else {}
  disp_box( xx0, yy0, x1, y1 );_disp();
  xx0 = x1;
  yy0 = y1;
  return DONE;
}


// boxfコマンド
int cmd_boxf() throws BasicError{
  int x1, y1;
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  xx0 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  yy0 = (int)get_number();
  checkToken(&quot;)&quot;);
  checkToken(&quot;-&quot;);
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  x1 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  y1 = (int)get_number();
  checkToken(&quot;)&quot;);
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
    getToken();
    clear_value();
    eval_expression();
    if( (int)get_number() != 0 ) {} else{}
  }
  else {}
  disp_boxf( xx0, yy0, x1, y1 );_disp();
  xx0 = x1;
  yy0 = y1;
  return DONE;
}


// circleコマンド
int cmd_circle() throws BasicError{
  int x1, y1;
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  xx0 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  yy0 = (int)get_number();
  checkToken(&quot;)&quot;);
  checkToken(&quot;-&quot;);
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  x1 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  y1 = (int)get_number();
  checkToken(&quot;)&quot;);
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
    getToken();
    clear_value();
    eval_expression();
    if( (int)get_number() != 0 ) {} else {};
  }
  else {};
  disp_circle( xx0, yy0, x1, y1 );_disp();
  xx0 = x1;
  yy0 = y1;
  return DONE;
}


// circlefコマンド
int cmd_circlef() throws BasicError{
  int x1, y1;
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  xx0 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  yy0 = (int)get_number();
  checkToken(&quot;)&quot;);
  checkToken(&quot;-&quot;);
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  x1 = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  y1 = (int)get_number();
  checkToken(&quot;)&quot;);
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
    getToken();
    clear_value();
    eval_expression();
    if( (int)get_number() != 0 ){} else{}
  }
  else {}
  disp_circlef( xx0, yy0, x1, y1 );_disp();
  xx0 = x1;
  yy0 = y1;
  return DONE;
}


// locateコマンド
int cmd_locate() throws BasicError{
  int x,y;
  clear_value();
  eval_expression();
  x = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  y = (int)get_number();
  disp_locate( x, y );_disp();
  return DONE;
}


// startコマンド
int cmd_start() throws BasicError{
  String cmd;
  clear_value();
  eval_expression();
  cmd = new String( get_string() );
  disp_start( cmd );
  return DONE;
}


// execコマンド
int cmd_exec() throws BasicError{
  String cmd;
  clear_value();
  eval_expression();
  cmd = new String( get_string() );
  disp_exec( cmd );
  return DONE;
}


// waitコマンド
int cmd_wait() throws BasicError{
  int t;
  clear_value();
  eval_expression();
  t = (int)get_number();
  try{
    Thread.sleep( t, 0);
  }catch( InterruptedException e ){}
  return DONE;
}


// imageコマンド
int cmd_image() throws BasicError{
  String fname;
  int x, y;
  checkToken(&quot;(&quot;);
  clear_value();
  eval_expression();
  x = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  y = (int)get_number();
  checkToken(&quot;)&quot;);
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  fname = new String( get_string() );
  disp_image( x, y, fname );_disp();
  return DONE;
}


// colorコマンド
int cmd_color() throws BasicError{
  int x, y;
  clear_value();
  eval_expression();
  x = (int)get_number();
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
    getToken();
    clear_value();
    eval_expression();
    y = (int)get_number();
    disp_color2( x, y );
  }
  else{
    disp_color1( x );
  }
  return DONE;
}


// screenrコマンド
int cmd_screen() throws BasicError{
  int h, w, f;
  clear_value();
  eval_expression();
  h = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  w = (int)get_number();
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
    getToken();
    clear_value();
    eval_expression();
    f = (int)get_number();
    disp_screen2( h, w, f );
  }
  else{
    disp_screen1( h, w );
  }
  return DONE;
}


// playコマンド
int cmd_play() throws BasicError{
  String fname;
  clear_value();
  eval_expression();
  fname = new String( get_string() );
  disp_play( fname );
  return DONE;
}


// sendコマンド
int cmd_send() throws BasicError{
  int k;
  byte[] x = new byte[1];
  clear_value();
  eval_expression();
  k = (int)get_number();
  checkToken(&quot;,&quot;);
  clear_value();
  eval_expression();
  x[0] = (byte)(int)get_number();
  if( Xfd[k].sock == null ) assertError(&quot;ネットワークに接続されていません(send)&quot;);
  try{
    Xfd[k].out0.write(x);
  } catch( Exception e){ assertError(&quot;書き込みエラー(send)&quot;); }
  return DONE;
}



// 制御信号コマンド
int cmd_rd_port() throws BasicError{
  clear_value();
  eval_expression();
  xrd_port = (int)get_number() != 0;
  if( xrd_port ) disp_exec(rd_port_h_command); else disp_exec(rd_port_l_command); 
  update_control();
  return DONE;
}

int cmd_wr_port() throws BasicError{
  clear_value();
  eval_expression();
  xwr_port = (int)get_number() != 0;
  if( xwr_port ) disp_exec(wr_port_h_command); else disp_exec(wr_port_l_command); 
  update_control();
  return DONE;
}

int cmd_cpu_reset() throws BasicError{
  clear_value();
  eval_expression();
  xcpu_reset = (int)get_number() != 0;
  if( xcpu_reset ) disp_exec(cpu_reset_h_command); else disp_exec(cpu_reset_l_command); 
  update_control();
  return DONE;
}

int cmd_cpu_halt() throws BasicError{
  clear_value();
  eval_expression();
  xcpu_halt = (int)get_number() != 0;
  if( xcpu_halt ) disp_exec(cpu_halt_h_command); else disp_exec(cpu_halt_l_command); 
  update_control();
  return DONE;
}

int cmd_osc() throws BasicError{
  clear_value();
  eval_expression();
  xosc = (int)get_number() != 0;
  if( xosc ) disp_exec(osc_h_command); else disp_exec(osc_l_command); 
  update_control();
  return DONE;
}

int cmd_osc_enable() throws BasicError{
  clear_value();
  eval_expression();
  xosc_enable = (int)get_number() != 0;
  if( xosc_enable ) disp_exec(osc_enable_h_command); else disp_exec(osc_enable_l_command); 
  update_control();
  return DONE;
}

int cmd_sdisable() throws BasicError{
  clear_value();
  eval_expression();
  xsdisable = (int)get_number() != 0;
  if( xsdisable ) disp_exec(sdisable_h_command); else disp_exec(sdisable_l_command); 
  update_control();
  return DONE;
}

int cmd_sclk() throws BasicError{
  clear_value();
  eval_expression();
  xsclk = (int)get_number() != 0;
  if( xsclk ) disp_exec(sclk_h_command); else disp_exec(sclk_l_command); 
  update_control();
  return DONE;
}

int cmd_sdata() throws BasicError{
  clear_value();
  eval_expression();
  xsdata = (int)get_number() != 0;
  if( xsdata ) disp_exec(sdata_h_command); else disp_exec(sdata_l_command); 
  update_control();
  return DONE;
}

int cmd_swrite() throws BasicError{
  clear_value();
  eval_expression();
  xswrite = (int)get_number() != 0;
  if( xswrite ) disp_exec(swrite_h_command); else disp_exec(swrite_l_command); 
  update_control();
  return DONE;
}

int cmd_reset() throws BasicError{
  disp_exec(reset_command); 
  update_control();
  return DONE;
}

int cmd_reset_interval() throws BasicError{
  int t;
  clear_value();
  eval_expression();
  t = (int)get_number();
  disp_exec(reset_interval_command+&quot; &quot;+t); 
  update_control();
  return DONE;
}

int cmd_wait_interval() throws BasicError{
  int t;
  clear_value();
  eval_expression();
  t = (int)get_number();
  disp_exec(wait_interval_command+&quot; &quot;+t); 
  update_control();
  return DONE;
}

int cmd_write_memory() throws BasicError{
  int ad;
  clear_value();
  eval_expression();
  ad = (int)get_number();
  disp_exec(write_memory_command+&quot; &quot;+ad+&quot; &quot;+mem_c[ad]+&quot; &quot;+mem_a[ad]+&quot; &quot;+mem_r[ad]+&quot; &quot;+mem_d[ad]); 
  update_control();
  return DONE;
}

/* ------------------------------------------ ここから数式解析用の関数　------------------------------------- */


/* 式の処理 */
int eval_expression() throws BasicError{

  // 論理項を解析 */
  eval_lterm();
  for(;;){

    // 論理式は論理項OR論理項OR...
    if( TokenText.toString().equals( &quot;or&quot; ) ){
      getToken();
      eval_lterm();
      eval_or();
    }

    // 上記以外ならば終了
    else{ /* jprintf( &quot;lexp=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);*/ return 0;}
  }

//  return 0;
}


/* 論理項の処理 */
int eval_lterm() throws BasicError{

  // 論理因子を解析
  eval_relation();
  for(;;){

    // 論理項は論理因子AND論理因子AND...
    if( TokenText.toString().equals( &quot;and&quot; ) ){
      getToken();
      eval_relation();
      eval_and();

//jprintf( &quot;lterm=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);

    }

    // 上記以外ならば終了
    else{ /*jprintf( &quot;lterm=%lf\n&quot;, (CalcStackP-1)-&gt;data.number); */ return 0;}
  }

//jprintf( &quot;lterm=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);

//  return 0;
}


/* 関係式の処理 */
int eval_relation() throws BasicError{

  // 式を解析
  eval_aexpression();
  for(;;){

    // 論理因子は 式&gt;=式
    if( TokenText.toString().equals( &quot;&gt;=&quot; ) ){
      getToken();
      eval_aexpression();
      eval_cmp();
      eval_ge();

//jprintf( &quot;ge=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);

    }

    // 論理因子は 式&gt;式
    else if( TokenText.toString().equals( &quot;&gt;&quot; ) ){
      getToken();
      eval_aexpression();
      eval_cmp();
      eval_gt();

//jprintf( &quot;gt=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);

    }

    // 論理因子は 式&lt;=式
    else if( TokenText.toString().equals( &quot;&lt;=&quot; ) ){
      getToken();
      eval_aexpression();
      eval_cmp();
      eval_le();

//jprintf( &quot;le=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);

    }

    // 論理因子は 式&lt;式
    else if( TokenText.toString().equals( &quot;&lt;&quot; ) ){
      getToken();
      eval_aexpression();
      eval_cmp();
      eval_lt();

//jprintf( &quot;lt=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);

    }

    // 論理因子は 式&lt;&gt;式
    else if( TokenText.toString().equals( &quot;&lt;&gt;&quot; ) ){
      getToken();
      eval_aexpression();
      eval_cmp();
      eval_neq();

//jprintf( &quot;ne=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);

    }

    // 論理因子は 式=式
    else if( TokenText.toString().equals( &quot;=&quot; ) ){
      getToken();
      eval_aexpression();
      eval_cmp();
      eval_eq();

//jprintf( &quot;eq=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);

    }

    // 上記以外ならば終了
    else return 0;
  }

//jprintf( &quot;rel=%lf\n&quot;, (CalcStackP-1)-&gt;data.number);

//  return 0;
}


/* 算術式の処理 */
int eval_aexpression() throws BasicError{      

//dprintf(&quot;expression &quot;);

  // 項を解析
  eval_term();

  // 文字列型の場合
  if( value_type() == STRING ){
    for(;;){

      // 式は項+項
      if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;+&apos; ){
        getToken();
        eval_term();
        eval_concat();
      }
      else return 0;
    }
  }

  // 数値型の場合
  else{
    for(;;){

      // 式は項+項
      if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;+&apos; ){
        getToken();
        eval_term();
        eval_add();
      }

      // 式は項-項 */
      else if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;-&apos; ){
        getToken();
        eval_term();
        eval_sub();
      }

      else return 0;
    }
  }
//  return 0;
}


/* 項の処理 */
int eval_term() throws BasicError{      

//dprintf(&quot;term &quot;);

  // 因子を解析
  eval_factor();

  // 乗除算は数値型にのみ適用される
  if( value_type() == NUMBER ){
    for(;;){

      // 項は因子*因子
      if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;*&apos; ){
        getToken();
        eval_factor();
        eval_mul();
      }

      // 項は因子/因子
      else if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) ==&apos;/&apos; ){
        getToken();
        eval_factor();
        eval_div();
      }

      // 項は因子 mod 因子
      else if( TokenText.toString().equals( &quot;mod&quot; ) ){
        getToken();
        eval_factor();
        eval_mod();
      }
      else return 0;
    }
  }
  return 0;
}


/* 因子の処理 */
int eval_factor() throws BasicError{

//dprintf(&quot;factor &quot;);

  // 原子を解析
  eval_atom();

  // べき乗算は数値型にのみ適用される
  if( value_type() == NUMBER ){
    for(;;){

      // 因子は原子^原子
      if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) ==&apos;^&apos; ){
        getToken();
        eval_atom();
        eval_power();
      }
      else return 0;
    }
  }
  return 0;
}


/* 原子の処理 */
int eval_atom() throws BasicError{
  int sign = 0;

//dprintf(&quot;atom &quot;);

  /* 原子の前に＋がついている場合(文字列の場合は除外する) */
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;+&apos;){
    getToken();
    sign = 1;
  }

  /* 原子の前に-がついている場合(文字列の場合は除外する) */
  else if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;-&apos; ){
    getToken();
    sign = -1;
  }

  /* (式)は原子である */
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0) == &apos;(&apos; ){
    getToken();
    eval_expression();
    checkToken(&quot;)&quot;);
    if( value_type() == STRING ){
      if( sign != 0 ) assertError( TypeMismatch );
    }
    else{
      if( sign == -1 ) put_number( -get_number() );
    }
    return 0;
  }

  /* 数値は原子である*/
  else if( TokenType == NUMBER ){
    put_number( TokenValue );
    getToken();
    if( sign == -1 ) put_number( -get_number() );
    return 0;
  }

  /* 文字列は原子である*/
  else if( TokenType == STRING ){
    put_string( TokenText.toString() );
    getToken();
    if( sign != 0 ) assertError( TypeMismatch );
    return 0;
  }

  /* 関数は原子である */
  else if( TokenType == FUNCTION ){
    doBasicFunction( TokenCode );
    if( value_type() == STRING ){
      if( sign != 0 ) assertError( TypeMismatch );
    }
    else{
      if( sign == -1 ) put_number( -get_number() );
    }
    return 0;
  }

  /* 変数は原子である */
  else if( TokenType == VARIABLE ){
    Variable var = _variable( TokenText.toString() );
    Value val = get_variable_value( var );
    if( val.type == STRING ){
      put_string( val.string );
      if( sign != 0 ) assertError( TypeMismatch );
    }
    else{
      put_number( val.number );
      if( sign == -1 ) put_number( -get_number() );
    }
    return 0;

  }

  else return 0;
}


/* 文字列連結演算 */
int eval_concat() throws BasicError{
  String s1 = get_string();
  String s2 = get_string();
  put_string( s2 + s1 );
  return 0;
}


/* 加算演算 */
int eval_add() throws BasicError{
  put_number( get_number() + get_number() );
  return 0;
}


/* 減算演算 */
int eval_sub() throws BasicError{
  put_number( -get_number() + get_number() );
  return 0;
}


/* 乗算演算 */
int eval_mul() throws BasicError{
  put_number( get_number() * get_number() );
  return 0;
}


/* 除算演算 */
int eval_div() throws BasicError{
  double d1 = get_number();
  double d2 = get_number();
  if( d1 == 0.0 ) assertError(&quot;０で割ろうとしました&quot;);
  put_number( d2 / d1 );
  return 0;
}


/* 除算の余り */
int eval_mod() throws BasicError{
  double d1 = get_number();
  double d2 = get_number();
  if( d1 == 0.0 ) assertError(&quot;０で割ろうとしました&quot;);
  put_number( (double)(  (int)d2 % (int)d1 ) );
  return 0;
}


/* べき乗演算 */
int eval_power() throws BasicError{
  double d1 = get_number();
  double d2 = get_number();
  put_number( Math.pow( d2, d1 ) );
  return 0;
}


/* 論理式 OR 演算 */
int eval_or() throws BasicError{
  put_number( (double)( (int)get_number() | (int)get_number() ) );
  return 0;
}


/* 論理式 AND演算 */
int eval_and() throws BasicError{
  put_number( (double)( (int)get_number() &amp; (int)get_number() ) );
  return 0;
}


/* 比較演算 */
int eval_cmp() throws BasicError{

  // 文字列の場合
  if( value_type() == STRING ){
    String s1 = get_string();
    String s2 = get_string();
    put_number( (double)s2.compareTo( s1 ) );
  }

  // 数値の場合
  else put_number( -get_number() + get_number() );
  return 0;
}


/* &gt;= の確認 */
int eval_ge() throws BasicError{
  put_number( get_number() &gt;= 0.0? 1.0 : 0.0 );
  return 0;
}


/* &gt;  の確認 */
int eval_gt() throws BasicError{
  put_number( get_number() &gt; 0.0? 1.0 : 0.0 );
  return 0;
}


/* &lt;= の確認 */
int eval_le() throws BasicError{
  put_number( get_number() &lt;= 0.0? 1.0 : 0.0 );
  return 0;
}


/* &lt;  の確認 */
int eval_lt() throws BasicError{
  put_number( get_number() &lt; 0.0? 1.0 : 0.0 );
  return 0;
}


/* &lt;&gt; の確認 */
int eval_neq() throws BasicError{
  put_number( get_number() != 0.0? 1.0 : 0.0 );
  return 0;
}


/* =  の確認 */
int eval_eq() throws BasicError{
  put_number( get_number() == 0.0? 1.0 : 0.0 );
  return 0;
}


/* ------------------------------------------ ここからBASICの組込み関数　------------------------------------- */
//
// 文字列を扱う関数では、文法チェックが終わるまではスタックに乗っている値を引き出してはならない
// エラーが起きるとスタックに乗っている文字列は開放されるが、文法チェックが終わる前に引き出してしまうと
// 引き出した文字列は開放されずに残ってしまうことがある
// (数値のみ扱う関数であればいつ引き出しても問題はない)

void doBasicFunction( int func ) throws BasicError{

//Log.d(&quot;doFunc&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  switch( func ){
  case  0: func_int();    return;
  case  1: func_abs();    return;
  case  2: func_sqr();    return;
  case  3: func_exp();    return;
  case  4: func_log();    return;
  case  5: func_sin();    return;
  case  6: func_cos();    return;
  case  7: func_tan();    return;
  case  8: func_atn();    return;
  case  9: func_chrs();   return;
  case 10: func_asc();    return;
  case 11: func_mids();   return;
  case 12: func_lefts();  return;
  case 13: func_rights(); return;
  case 14: func_inputs(); return;
  case 15: func_inkeys(); return;
  case 16: func_eof();    return;
  case 17: func_strs();   return;
  case 18: func_val();    return;
  case 19: func_len();    return;
  case 20: func_times();  return;
  case 21: func_dates();  return;
  case 22: func_instr();  return;
  case 23: func_rnd();    return;
  case 24: func_netstat();return;
  case 25: func_recv();   return;
  case 26: func_mem_c();  return;
  case 27: func_mem_a();  return;
  case 28: func_mem_r();  return;
  case 29: func_mem_d();  return;
  case 30: func_hexs();   return;
  case 31: func_octs();   return;
  case 32: func_bins();   return;
  }
  return;
}


/* int関数 */
int func_int() throws BasicError{
  double a;

//Log.d(&quot;func_int&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = (double)(int)get_number();
  put_number( a );
  return 0;
}


/* abs関数 */
int func_abs() throws BasicError{
  double a;

//Log.d(&quot;func_abs&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = get_number();
  if( a&lt; 0 ) a= -a;
  put_number( a );
  return 0;
}


/* sqr関数 */
int func_sqr() throws BasicError{
  double a;

//Log.d(&quot;func_sqr&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = get_number();
  a = Math.sqrt( a );
  put_number( a );
  return 0;
}


/* exp関数 */
int func_exp() throws BasicError{
  double a;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = get_number();
  a = Math.exp( a );
  put_number( a );
  return 0;
}


/* log関数 */
int func_log() throws BasicError{
  double a;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = get_number();
  if( a == 0.0 ) assertError(&quot;log関数の引数が０です&quot;);
  a = Math.log( a );
  put_number( a );
  return 0;
}


/* sin関数 */
int func_sin() throws BasicError{
  double a;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = get_number();
  a = Math.sin( a );
  put_number( a );
  return 0;
}


/* cos関数 */
int func_cos() throws BasicError{
  double a;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = get_number();
  a = Math.cos( a );
  put_number( a );
  return 0;
}


/* tan関数 */
int func_tan() throws BasicError{
  double a;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = get_number();
  a = Math.tan( a );
  put_number( a );
  return 0;
}


/* atn関数 */
int func_atn() throws BasicError{
  double a;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = get_number();
  a = Math.atan( a );
  put_number( a );
  return 0;
}


/* chr$関数 */
int func_chrs() throws BasicError{
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  char ch = (char)(byte)(((int)get_number()) &amp; 0xff);
  put_string( &quot;&quot;+ch );
  return 0;
}


/* asc関数 */
int func_asc() throws BasicError{
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  String s = get_string();
  if( s == null || s.length() == 0 ) put_number(0.0);
  else put_number((double)(((int)((byte)(s.charAt(0))))&amp;0xff));
  return 0;
}


/* mid$関数 */
int func_mids() throws BasicError{
  String s;
  int i, j = -1, l;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  s = get_string();
  checkToken(&quot;,&quot;);
  eval_expression();
  i = (int)get_number() - 1;
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  ==&apos;,&apos; ){
    getToken();
    eval_expression();
    j = (int)get_number();
  }
  checkToken(&quot;)&quot;);
  if( j &gt;= 0 ){
    l = s.length();
    j += i;
    if( j &gt; l ) j = l;
    put_string( new String( s.substring( i, j ) ) );
  }
  else put_string( new String( s.substring( i ) ) );
  return 0;
}


/* left$関数 */
int func_lefts() throws BasicError{
  String s;
  int i, l;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  s = get_string();
  checkToken(&quot;,&quot;);
  eval_expression();
  i = (int)get_number();
  checkToken(&quot;)&quot;);
  l = s.length();
  if( i &gt; l ) i = l;
  put_string( new String( s.substring( 0, i ) ) );
  return 0;
}


/* right$関数 */
int func_rights() throws BasicError{
  String s;
  int i, l;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  s = get_string();
  checkToken(&quot;,&quot;);
  eval_expression();
  i = (int)get_number();
  checkToken(&quot;)&quot;);
  l = s.length();
  if( i &gt; l ) i = l;
  put_string( new String( s.substring( l - i ) ) );
  return 0;
}


/* input$関数 */
int func_inputs() throws BasicError{
  int c = 0, i, k, m, n;
  StringBuffer s = new StringBuffer(&quot;&quot;);
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  n = (int)get_number();


  // ファイルから指定文字数入力
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;,&apos; ){
    getToken();
    if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  == &apos;#&apos; ) getToken();
    eval_expression();
    k = (int)get_number();
    checkToken(&quot;)&quot;);
    if( k &lt; 0 || k &gt;= MAX_FILES ) assertError( OutOfRange );
    if( Xfd[k].in == null ) assertError(&quot;ファイルが開いていません(input$)&quot;);

      // ネットワークの場合
    if( Xfd[k].sock != null ){
      try{
        if( (m = Xfd[k].in0.available()) &gt; 0 ){
          if( m &lt; n ) n = m;
          byte cc[] = new byte[n];
          n = Xfd[k].in0.read( cc );
          for( i = 0; i &lt; n; i++ ) s.append( (char)(byte)((int)cc[i] &amp; 0xff) );
           }
      } catch( IOException e){ assertError(&quot;i/o error&quot;); }
      }

      // ファイルの場合
    else{
      try{
        char[] cc = new char[n];
        n = Xfd[k].in.read( cc, 0, n );
        for( i = 0; i &lt; n; i++ ) s.append( cc[i] );
      } catch( IOException e){ assertError(&quot;i/o error&quot;); }
      }
  }

  // コンソールから指定文字数入力
  else{
    checkToken(&quot;)&quot;);
    for( i = 0; i &lt; n; i++ ) s.append( disp_getch() );
  }
  put_string( s.toString() );
  return 0;
}


/* inkey$関数 */
int func_inkeys() throws BasicError{
  String s = &quot;&quot;;
  char c = disp_inkey();
  getToken();
  if( c != &apos;\0&apos; ) s = s +c;
  put_string(s);
  return 0;
}


/* eof関数 */
int func_eof()throws BasicError{
  int c = 0;
  int k;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  k = (int)get_number();
  if( k &lt; 0 || k &gt;= MAX_FILES ) assertError( OutOfRange );
  if( Xfd[k].in == null ) assertError(&quot;ファイルが開いていません(eof)&quot;);

  // ネットワークの場合
  if( Xfd[k].sock != null ){
    try{
      if( Xfd[k].sock.isConnected() ){
        put_number( Xfd[k].in0.available() &gt; 0? 0.0 : 2.0 );
        }
      else put_number(1.0);
    } catch( Exception e){ assertError(&quot;network error&quot;); }
   }

  // ファイルの場合
  else{
    double d = 1.0;
    try{
      d = Xfd[k].in.ready()? 0.0 : 1.0;
    } catch( IOException e){ assertError(&quot;i/o error&quot;); }
    put_number( d );
   }
  return 0;
}


/* str$関数 */
int func_strs() throws BasicError{
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  put_string( xstr(get_number()) );
  return 0;
}


/* val関数 */
int func_val() throws BasicError{
  String str;

  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  str = get_string();
  put_number( val( str ) );
  return 0;
}


/* len関数 */
int func_len() throws BasicError{
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  put_number( (double)get_string().length() );
  return 0;
}


/* time$関数 */
int func_times() throws BasicError{
  getToken();
  put_string( disp_time() );
  return 0;
}


/* date$関数 */
int func_dates() throws BasicError{
  getToken();
  put_string( disp_date() );
  return 0;
}


// instr関数
int func_instr() throws BasicError{
  String s, s1, s2;
  int i;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;,&quot;);
  eval_expression();
  if( TokenType == DELIMIT &amp;&amp; TokenText.charAt(0)  ==&apos;,&apos; ){
    getToken();
    eval_expression();
  }
  else put_number(1.0);
  checkToken(&quot;)&quot;);
  i = (int)get_number() - 1;
  s2 = get_string();
  s1 = get_string();
  i = ( i &gt;= 0 &amp;&amp; i &lt; s1.length() )? s1.indexOf( s2, i )+1 : 0;
  put_number( (double)i );
  return 0;
}


/* 乱数を生成する関数 */
int func_rnd() throws BasicError{
  double a;
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  a = get_number();
  a = a * Math.random();
  put_number( a );
  return 0;
}


// ネットワークが使用可能かどうかを返す関数
int func_netstat() throws BasicError{
  getToken();
  put_number( (double)NetStat );
  return 0;
}


/* recv関数 */
int func_recv()throws BasicError{
  int k;
  byte[] x = new byte[1];
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  k = (int)get_number();
  if( k &lt; 0 || k &gt;= MAX_FILES ) assertError( OutOfRange );
  if( Xfd[k].sock == null ) assertError(&quot;ネットワークに接続されていません(recv)&quot;);

  try{
    if( !Xfd[k].sock.isConnected() ) assertError(&quot;ネットワークに接続されていません(recv)&quot;);
    if( Xfd[k].in0.available() &gt; 0 ){
      Xfd[k].in0.read(x);
      put_number( ((int)x[0]) &amp; 255 );
      }
    else put_number(-1.0);
  } catch( Exception e){ assertError(&quot;network error&quot;); }

  return 0;
}


/* mem_c関数 */
int func_mem_c() throws BasicError{

//Log.d(&quot;func_mem_c&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  put_number((double)mem_c[(int)get_number()]);
  return 0;
}


/* mem_a関数 */
int func_mem_a() throws BasicError{

//Log.d(&quot;func_mem_a&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  put_number((double)mem_a[(int)get_number()]);
  return 0;
}


/* mem_r関数 */
int func_mem_r() throws BasicError{

//Log.d(&quot;func_mem_r&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  put_number((double)mem_r[(int)get_number()]);
  return 0;
}


/* mem_d関数 */
int func_mem_d() throws BasicError{

//Log.d(&quot;func_mem_d&quot;, &quot;TokenText=&quot;+TokenText+&quot;, Token Type=&quot;+TokenType+&quot; , Code=&quot;+TokenCode);

  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  put_number((double)mem_d[(int)get_number()]);
  return 0;
}


/* hex$関数 */
int func_hexs() throws BasicError{
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  put_string(Integer.toHexString((int)get_number()));
  return 0;
}


/* oct$関数 */
int func_octs() throws BasicError{
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  put_string(Integer.toOctalString((int)get_number()));
  return 0;
}


/* bin$関数 */
int func_bins() throws BasicError{
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  checkToken(&quot;)&quot;);
  put_string(Integer.toBinaryString((int)get_number()));
  return 0;
}


/* ------------------------------------------ ここからその他色々な関数　------------------------------------- */

// 計算用スタックを初期化する
void clear_value(){

  // 計算スタックに入っている値を全て取り出す
  while( CalcStackP &gt; 0 ){
    CalcStack[CalcStackP--] = null;
  }
  CalcStackP = 0;
}


// 現在の計算スタックをチェックして整合がとれていなかったらエラーを発生させる
void check_value() throws BasicError{
  if( CalcStackP != 0 ) assertError( &quot;式が不正です&quot;);
}


// 現在の計算スタックの値の型を返す、スタックに値が入っていない場合は0を返す
int value_type(){
  if( CalcStackP == 0 ) return 0;
  return CalcStack[CalcStackP-1].type;
}


// 数値をスタックに置く
void put_number( double num ){
  CalcStack[CalcStackP] = new Value();;
  CalcStack[CalcStackP].type = NUMBER;
  CalcStack[CalcStackP].number  = num;
  CalcStackP++;
}


// 文字列をスタックに置く
void put_string( String str ){

//Log.d(&quot;put_string&quot;, &quot;CalcStack Size=&quot;+CalcStack.length);

  CalcStack[CalcStackP] = new Value();;
  CalcStack[CalcStackP].type = STRING;
  CalcStack[CalcStackP].string  = new String( str );
  CalcStackP++;
}


// 数値をスタックから取りこむ
double get_number() throws BasicError{
  if( value_type() != NUMBER ) assertError( TypeMismatch );
  CalcStackP--;
  return CalcStack[CalcStackP].number;
}


// 文字列をスタックから取りこむ
String get_string() throws BasicError{
  if( value_type() != STRING ) assertError( TypeMismatch );
  CalcStackP--;
  return CalcStack[CalcStackP].string;
}


// 変数の全クリア
void clear_variable(){
  TopVar = EndVar = null;
}


/* 変数名から変数の型を得る */
int var_type( String var_name ){
  return var_name.charAt( var_name.length()-1 ) == &apos;$&apos;? STRING : NUMBER;
}


// 変数名から変数を得る、変数が存在しないときは新しく変数を作る
Variable _variable( String var_name ){
  Variable  var = get_variable( var_name );
  if( var != null ) return var;

  // 変数が見つからなかったら、新しく確保した変数記憶メモリへのポインタを返す 
  var = new Variable();
  var.name = new String( var_name );
  var.dimension = 0;
  var.value = new Value();

  // 文字列変数の場合は空の文字列で初期化、数値変数の場合は0で初期化する
  if( var_type( var_name ) == STRING ){
    var.value.type = STRING;
    var.value.string = new String(&quot;&quot;);
  }
  else{
    var.value.type = NUMBER;
    var.value.number = 0.0;
  }

  // 変数リストに登録する
  if( TopVar == null ) TopVar = var; else  EndVar.next = var;
  EndVar = var;
  var.next = null;
  return var;
}


// 変数名から変数記憶用メモリへのポインタを得る
Variable get_variable( String var_name ){
  Variable  var;

  // 変数を探す
  for( var = TopVar; var != null; var = (Variable)var.next ){
    if( var_name.equals( var.name ) ) return var;
  }

  // 変数が存在しないときはnullを返す
  return null;
}


// 変数の値を得る
Value get_variable_value( Variable var ) throws BasicError{
  Value val = var.value;
  int i, x, index;

  // 単純変数の場合
  if( var.dimension == 0 ){
    getToken();
    return val;
  }

  // 配列変数の場合
  getToken();
  checkToken(&quot;(&quot;);
  eval_expression();
  if( ( index = (int)get_number() ) &lt; 0 || index &gt;= var.dim[0] ) assertError(&quot;配列の添字範囲外です&quot;);
  for( i = 1; i &lt; var.dimension; i++ ){
    checkToken(&quot;,&quot;);
    eval_expression();
    if( ( x = (int)get_number() ) &lt; 0 || x &gt;= var.dim[ i ] ) assertError(&quot;配列の添字範囲外です&quot;);
    index = index * var.dim[ i ] + x;
  }
  checkToken( &quot;)&quot; );
  var.index = index;
  if( val.type == STRING ){
  String[] array = (String[])var.array;
  val.string = array[index];
  }
  else{
  double[] array = (double[])var.array;
  val.number = array[index];
  }
  return val;
}


// 文字列を数値の変換する
double val( String str ) throws BasicError{
  double d = 0.0;

  try{
  if( str.length() == 0 ) return 0.0;
  char c = str.charAt(0);
  if( ( c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos; ) || c == &apos;.&apos; || c == &apos;-&apos; || c == &apos;+&apos; ) d = xparseDouble( str );
  else if( c == &apos;&amp;&apos; ){
    if( str.length() &lt; 2 ) return 0.0;
    char c2 = str.charAt(1);
    if( c2 == &apos;h&apos; || c2 == &apos;H&apos; ) d = (double)Integer.parseInt( str.substring(2), 16 );
    else if( c2 == &apos;b&apos; || c2 == &apos;B&apos; ) d = (double)Integer.parseInt( str.substring(2), 2 );
    else d = (double)Integer.parseInt( str.substring(1), 8 );
  }
  else d = 0.0;
  }
  catch( Exception e ){ assertError(&quot;数値表現が不正です&quot;);}
  return d;
}

}

boolean isalnum(char c){return ((c&gt;=&apos;a&apos;&amp;&amp;c&lt;=&apos;z&apos;)||(c&gt;=&apos;A&apos;&amp;&amp;c&lt;=&apos;Z&apos;)||(c&gt;=&apos;0&apos;&amp;&amp;c&lt;=&apos;9&apos;)); }
boolean isalpha(char c){return ((c&gt;=&apos;a&apos;&amp;&amp;c&lt;=&apos;z&apos;)||(c&gt;=&apos;A&apos;&amp;&amp;c&lt;=&apos;Z&apos;)); }
boolean isspace(char c){return (c==&apos; &apos;||c==&apos;\t&apos;); }
boolean isdigit(char c){return (c&gt;=&apos;0&apos;&amp;&amp;c&lt;=&apos;9&apos;); }



//ラベルのチェックサムを計算する
int checkSum( String s ){
  int i = 0, c = 0, l = s.length();
  while( i &lt; l &amp;&amp; isspace(s.charAt(i)) ) i++;
  if( i &gt;= l-1 || s.charAt(i) != LABEL_HEADER ) return -1;
  i++;
  while( i &lt; l &amp;&amp; (isalnum(s.charAt(i)) || s.charAt(i) == &apos;_&apos;) ){
    c+= (int)(byte)s.charAt(i);
    i++;
  }
  return c;
}


// 数値を文字列に変換する
String xstr( double d ){
  if( d &gt; -1000000 &amp;&amp; d &lt; 1000000 &amp; d == (double)(int)d ) return Integer.toString((int)d);
  else return Double.toString(d);
}


// 文字列を数値に変換する
double xparseDouble( String s ) throws BasicError{
  int i;
  char c;

  for(i=0;i&lt;s.length()&amp;&amp;( ((c=s.charAt(i))&gt;=&apos;0&apos;&amp;&amp;c&lt;=&apos;9&apos;) ||c==&apos;.&apos;||c==&apos;+&apos;||c==&apos;-&apos;||c==&apos;E&apos;||c==&apos;e&apos;); i++ ) ;
  return i == 0? 0.0 : Double.parseDouble(s.substring(0,i));
}


}


// 文字列を整数に変換する
int xparseInt( String s ){
 int n;
 for( n = 0; n &lt; s.length() &amp;&amp; s.charAt(n)&gt;=&apos;0&apos; &amp;&amp; s.charAt(n)&lt;=&apos;9&apos;; n++ ) ;
 if( n &lt; 1 ) return 0;
 return Integer.parseInt( s.substring(0,n) );
}
</codetext>
</codeclip>
<pin>
<ID>_P26</ID>
<x0>23</x0>
<y0>150</y0>
<width>169</width>
<height>31</height>
<text>cmd_line_is(JTextField t)</text>
<px>3</px>
<py>63</py>
</pin>
<pin>
<ID>_P27</ID>
<x0>28</x0>
<y0>186</y0>
<width>132</width>
<height>27</height>
<text>cmd_in(String cmd)</text>
<px>4</px>
<py>79</py>
</pin>
<pin>
<ID>_P29</ID>
<x0>31</x0>
<y0>254</y0>
<width>60</width>
<height>30</height>
<text>stop()</text>
<px>4</px>
<py>112</py>
</pin>
<relation>
<ID>_R30</ID>
<pin1name>_PSTART</pin1name>
<pin2name>_X_G12(_P17)</pin2name>
</relation>
<relation>
<ID>_R31</ID>
<pin1name>_P26</pin1name>
<pin2name>_X_G12(_P22)</pin2name>
</relation>
<relation>
<ID>_R32</ID>
<pin1name>_P27</pin1name>
<pin2name>_X_G12(_P21)</pin2name>
</relation>
<pin>
<ID>_P34</ID>
<x0>30</x0>
<y0>218</y0>
<width>60</width>
<height>30</height>
<text>enter()</text>
<px>1</px>
<py>97</py>
</pin>
<relation>
<ID>_R35</ID>
<pin1name>_P34</pin1name>
<pin2name>_X_G12(_P23)</pin2name>
</relation>
<relation>
<ID>_R36</ID>
<pin1name>_P29</pin1name>
<pin2name>_X_G12(_P24)</pin2name>
</relation>
<codeclip>
<ID>_C37</ID>
<x0>520</x0>
<y0>88</y0>
<width>139</width>
<height>19</height>
<codetext>// 画面出力関数

    // 実際に画面に表示する
    public void _disp(){
    }
  
  
    public void disp_cls(){
      message_area.setText(&quot;&quot;);
    }


    public void disp_puts( String s ){
      print_msg( s );
    }

 public void disp_putc( char c ){
      print_msg( &quot;&quot;+c );
    }


    public void disp_color1( int c ){
    }


    public void disp_color2( int c1, int c2 ){
    }


    public void disp_screen1( int wid, int hei ){
    }


    public void disp_screen2( int wid, int hei, int fnt ){
    }

    public void disp_locate( int x, int y ){
    }

    public void disp_pset( int x, int y ){
    }

    public void disp_line( int x0, int y0, int x1, int y1 ){
    }

    public void disp_box( int x0, int y0, int x1, int y1 ){
    }


    public void disp_boxf( int x0, int y0, int x1, int y1 ){
    }


    public void disp_circle( int x0, int y0, int x1, int y1 ){
    }


    public void disp_circlef( int x0, int y0, int x1, int y1 ){
    }

    public void disp_image( int x, int y, String file ){
    }

  

    public void disp_exec( String cmd ){
      exec_command( cmd );
    }

    public void disp_start( String cmd ){
      Runtime runtime = Runtime.getRuntime();
      try {            //実行するコマンドを指定
        runtime.exec(cmd);
      } catch (IOException e) {} 
    }


    public String disp_time(){
      String s = (new SimpleDateFormat(&quot;HH:mm:ss&quot; , Locale.US)).format(new Date());
      return s;
    }


    public String disp_date(){
      String s = (new SimpleDateFormat(&quot;yy/MM/dd&quot;, Locale.US)).format(new Date());
      return s;
    }


    /* 1行入力 */
    public String disp_gets(){
      String ret;
      is_gets = true;
      while( InputBuffer.equals(&quot;&quot;) ){
        try{
          Thread.sleep(100, 0);
        }catch( InterruptedException e ){}
        }
      ret = new String( InputBuffer )+&quot;\r&quot;;
      disp_puts( InputBuffer+&quot;\n&quot; );
      InputBuffer = &quot;&quot;;
      is_gets=false;
      return ret;
     }


    // キー入力を調べる
    public char disp_inkey(){
      char cc = KeyCode;
      KeyCode = &apos;\0&apos;;
      cmd_line.setText(&quot;&quot;);
      return cc;
     }


    // １文字入力
    public char disp_getch(){
      KeyCode = &apos;\0&apos;;
      if( !is_gets ){
        while( KeyCode == &apos;\0&apos; ){
          try{
            Thread.sleep(100, 0);
          }catch( InterruptedException e ){}
           }
         }
      cmd_line.setText(&quot;&quot;);
      return KeyCode;
     }


    // メディアファイルを再生する
    public void disp_play( String fname ){
      AudioFormat format = null;
      DataLine.Info info = null;
      Clip line = null;
      File audioFile = null;

      try{
        audioFile = new File(fname);
        format = AudioSystem.getAudioFileFormat(audioFile).getFormat();
        info = new DataLine.Info(Clip.class, format);
        line = (Clip)AudioSystem.getLine(info);
        line.open(AudioSystem.getAudioInputStream(audioFile));
        line.start();
    }
    catch(Exception e){}
  }



    // モード切り替え
    public void disp_prog_mode( boolean mode ){
      }
</codetext>
</codeclip>
<pin>
<ID>_P38</ID>
<x0>517</x0>
<y0>119</y0>
<width>60</width>
<height>30</height>
<text>edit()</text>
<px>2</px>
<py>28</py>
</pin>
<pin>
<ID>_P39</ID>
<x0>528</x0>
<y0>189</y0>
<width>60</width>
<height>30</height>
<text>run()</text>
<px>1</px>
<py>44</py>
</pin>
<operation>
<ID>_O42</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>617</x0>
<y0>186</y0>
<width>148</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>cmd_in(&quot;run&quot;);
cmd_line.requestFocus();
</codetext>
</operation>
<relation>
<ID>_R43</ID>
<pin1name>_P39</pin1name>
<pin2name>_O42</pin2name>
</relation>
<operation>
<ID>_O44</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>621</x0>
<y0>117</y0>
<width>253</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// Basicファイルを編集してロードする


disp_exec(basic_edit_command);
cmd_in(&quot;load \&quot;&quot;+basic_file_name+&quot;\&quot;&quot;);
cmd_line.requestFocus();
</codetext>
</operation>
<relation>
<ID>_R45</ID>
<pin1name>_P38</pin1name>
<pin2name>_O44</pin2name>
</relation>
</xobject>
<relation>
<ID>_R115</ID>
<pin1name>_A0(_PAenter_button)</pin1name>
<pin2name>_X113(_P34)</pin2name>
</relation>
<relation>
<ID>_R116</ID>
<pin1name>_A0(_PAstop_button)</pin1name>
<pin2name>_X113(_P29)</pin2name>
</relation>
<relation>
<ID>_R121</ID>
<pin1name>_A0(_PAcommand_box)</pin1name>
<pin2name>_X113(_P27)</pin2name>
</relation>
<relation>
<ID>_R122</ID>
<pin1name>_A0(_Pcommand_box)</pin1name>
<pin2name>_X113(_P26)</pin2name>
</relation>
<relation>
<ID>_R123</ID>
<pin1name>_A0(_PAedit_basic_button)</pin1name>
<pin2name>_X113(_P38)</pin2name>
</relation>
<relation>
<ID>_R124</ID>
<pin1name>_A0(_PArun_basic_button)</pin1name>
<pin2name>_X113(_P39)</pin2name>
</relation>
<relation>
<ID>_R125</ID>
<pin1name>_A0(_PAload_button)</pin1name>
<pin2name>_X79(_P18)</pin2name>
</relation>
<relation>
<ID>_R128</ID>
<pin1name>_A0(_PAterminal_button)</pin1name>
<pin2name>_X79(_P4)</pin2name>
</relation>
<operation>
<ID>_O129</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>667</x0>
<y0>35</y0>
<width>113</width>
<height>67</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>30</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>0</outpinx0>
<outpiny0>48</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>// 初期化する





mem_c = new int[AD_SIZE];
mem_a = new int[AD_SIZE];
mem_r = new int[AD_SIZE];
mem_d = new int[AD_SIZE];

// すべてのメモリにdata命令をセットして読み書きできるようにしておく
for( int adrs = 0; adrs &lt; AD_SIZE; adrs++ ){
  mem_c[ adrs ] = DATA_INS;
  mem_a[ adrs ] = 0;
  mem_r[ adrs ] = 0;
  mem_d[ adrs ] = 0;
}

// 各ボタンを押した時に実行されるコマンドを設定する
String line;
try{

BufferedReader din = new BufferedReader( new FileReader(ini_file));
while( ((line=din.readLine())!=null)){
if( line.startsWith(&quot;edit_command=&quot;))			edit_command=line.substring(13);
if( line.startsWith(&quot;edit_inifile_command=&quot;))	edit_inifile_command=line.substring(21);
if( line.startsWith(&quot;asm_edit_command=&quot;))		asm_edit_command=line.substring(17);
if( line.startsWith(&quot;compile_command=&quot;))		compile_command=line.substring(16);
if( line.startsWith(&quot;assemble_command=&quot;))		assemble_command=line.substring(17);
if( line.startsWith(&quot;terminal_command=&quot;))		terminal_command=line.substring(17);
if( line.startsWith(&quot;rd_port_l_command=&quot;))		rd_port_l_command=line.substring(18);//
if( line.startsWith(&quot;rd_port_h_command=&quot;))		rd_port_h_command=line.substring(18);//
if( line.startsWith(&quot;wr_port_l_command=&quot;))		wr_port_l_command=line.substring(18);//
if( line.startsWith(&quot;wr_port_h_command=&quot;))		wr_port_h_command=line.substring(18);//
if( line.startsWith(&quot;cpu_reset_l_command=&quot;))	cpu_reset_l_command=line.substring(20);//
if( line.startsWith(&quot;cpu_reset_h_command=&quot;))	cpu_reset_h_command=line.substring(20);//
if( line.startsWith(&quot;cpu_halt_l_command=&quot;))		cpu_halt_l_command=line.substring(19);//
if( line.startsWith(&quot;cpu_halt_h_command=&quot;))		cpu_halt_h_command=line.substring(19);//
if( line.startsWith(&quot;osc_l_command=&quot;))  		osc_l_command=line.substring(14);//
if( line.startsWith(&quot;osc_h_command=&quot;))			osc_h_command=line.substring(14);//
if( line.startsWith(&quot;osc_enable_l_command=&quot;))	osc_enable_l_command=line.substring(21);//
if( line.startsWith(&quot;osc_enable_h_command=&quot;))	osc_enable_h_command=line.substring(21);//
if( line.startsWith(&quot;sdisable_l_command=&quot;))		sdisable_l_command=line.substring(19);//
if( line.startsWith(&quot;sdisable_h_command=&quot;))		sdisable_h_command=line.substring(19);//
if( line.startsWith(&quot;sclk_l_command=&quot;))			sclk_l_command=line.substring(15);//
if( line.startsWith(&quot;sclk_h_command=&quot;))			sclk_h_command=line.substring(15);//
if( line.startsWith(&quot;sdata_l_command=&quot;))		sdata_l_command=line.substring(16);//
if( line.startsWith(&quot;sdata_h_command=&quot;))		sdata_h_command=line.substring(16);//
if( line.startsWith(&quot;swrite_l_command=&quot;))		swrite_l_command=line.substring(17);//
if( line.startsWith(&quot;swrite_h_command=&quot;))		swrite_h_command=line.substring(17);//
if( line.startsWith(&quot;reset_command=&quot;))			reset_command=line.substring(14);//
if( line.startsWith(&quot;single_step_command=&quot;))	single_step_command=line.substring(20);//
if( line.startsWith(&quot;reset_interval_command=&quot;))	reset_interval_command=line.substring(23);//
if( line.startsWith(&quot;wait_interval_command=&quot;))  wait_interval_command=line.substring(22);//
if( line.startsWith(&quot;write_memory_command=&quot;))	write_memory_command=line.substring(21);//
if( line.startsWith(&quot;basic_edit_command=&quot;))		basic_edit_command=line.substring(19);
if( line.startsWith(&quot;basic_file_name=&quot;))		basic_file_name=line.substring(16);
}
din.close();
} catch( Exception e ){}
</codetext>
</operation>
<relation>
<ID>_R131</ID>
<pin1name>_A0(_Pstart)</pin1name>
<pin2name>_O129</pin2name>
</relation>
<operation>
<ID>_O134</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>446</x0>
<y0>77</y0>
<width>207</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>32</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>159</outpinx0>
<outpiny0>30</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 設定ファイルを更新・編集する


save_inifile();
exec_command(edit_inifile_command);
</codetext>
</operation>
<relation>
<ID>_R135</ID>
<pin1name>_A0(_PAinifile_button)</pin1name>
<pin2name>_O134</pin2name>
</relation>
<relation>
<ID>_R136</ID>
<pin1name>_O134</pin1name>
<pin2name>_O129</pin2name>
</relation>
<relation>
<ID>_R138</ID>
<pin1name>_A0(_PArun_button)</pin1name>
<pin2name>_X79(_P21)</pin2name>
</relation>
<relation>
<ID>_R139</ID>
<pin1name>_O129</pin1name>
<pin2name>_X113(_PSTART)</pin2name>
</relation>
<relation>
<ID>_R140</ID>
<pin1name>_A0(_PAsingle_button)</pin1name>
<pin2name>_X79(_P22)</pin2name>
</relation>
<codeclip>
<ID>_C141</ID>
<x0>732</x0>
<y0>643</y0>
<width>201</width>
<height>34</height>
<codetext>// 制御信号表示処理
public void update_control(){

int mc = mem_c[address];
if( (mc &amp; IO)      == 0 ) io_label.setBackground(Color.green);      else  io_label.setBackground(Color.lightGray);
if( (mc &amp; POINTER) == 0 ) pointer_label.setBackground(Color.green); else  pointer_label.setBackground(Color.lightGray);
if( (mc &amp; RET)     == 0 ) ret_label.setBackground(Color.green);     else  ret_label.setBackground(Color.lightGray);
if( (mc &amp; ST)      == 0 ) st_label.setBackground(Color.green);      else  st_label.setBackground(Color.lightGray);
if( (mc &amp; LD)      == 0 ) ld_label.setBackground(Color.green);      else  ld_label.setBackground(Color.lightGray);
if( (mc &amp; LDH)     == 0 ) ldh_label.setBackground(Color.green);     else  ldh_label.setBackground(Color.lightGray);
if( (mc &amp; LDM)     == 0 ) ldm_label.setBackground(Color.green);     else  ldm_label.setBackground(Color.lightGray);
if( (mc &amp; LDL)     == 0 ) ldl_label.setBackground(Color.green);     else  ldl_label.setBackground(Color.lightGray);

if(load_done) run_button.setForeground(Color.red); else run_button.setForeground(Color.black);

if(!xrd_port)	rd_port_button.setForeground(Color.green);	else rd_port_button.setForeground(Color.black);
if(!xwr_port)	wr_port_button.setForeground(Color.green);	else wr_port_button.setForeground(Color.black);
if(xcpu_reset)	cpu_reset_button.setForeground(Color.red);	else cpu_reset_button.setForeground(Color.black);
if(xcpu_halt)	cpu_halt_button.setForeground(Color.red);	else cpu_halt_button.setForeground(Color.black);
if(xosc)		osc_button.setForeground(Color.red); else	osc_button.setForeground(Color.black);
if(xosc_enable)	osc_enable_button.setForeground(Color.red);	else osc_enable_button.setForeground(Color.black);
if(xsdisable)	sdisable_button.setForeground(Color.red);	else sdisable_button.setForeground(Color.black);
if(xsclk)		sclk_button.setForeground(Color.red);		else sclk_button.setForeground(Color.black);
if(xsdata)		sdata_button.setForeground(Color.red);		else sdata_button.setForeground(Color.black);
if(!xswrite)	swrite_button.setForeground(Color.green);	else swrite_button.setForeground(Color.black);

cmd_line.requestFocus();

}
</codetext>
</codeclip>
<relation>
<ID>_R146</ID>
<pin1name>_A0(_Pcpu_reset_button)</pin1name>
<pin2name>_X111(_P4)</pin2name>
</relation>
<relation>
<ID>_R147</ID>
<pin1name>_A0(_PAcpu_reset_button)</pin1name>
<pin2name>_X111(_P5)</pin2name>
</relation>
<relation>
<ID>_R148</ID>
<pin1name>_A0(_Pcpu_halt_button)</pin1name>
<pin2name>_X111(_P6)</pin2name>
</relation>
<relation>
<ID>_R149</ID>
<pin1name>_A0(_PAcpu_halt_button)</pin1name>
<pin2name>_X111(_P7)</pin2name>
</relation>
<relation>
<ID>_R152</ID>
<pin1name>_A0(_Posc_enable_button)</pin1name>
<pin2name>_X111(_P10)</pin2name>
</relation>
<relation>
<ID>_R153</ID>
<pin1name>_A0(_PAosc_enable_button)</pin1name>
<pin2name>_X111(_P11)</pin2name>
</relation>
<relation>
<ID>_R162</ID>
<pin1name>_A0(_Preset_interval_box)</pin1name>
<pin2name>_X111(_P20)</pin2name>
</relation>
<relation>
<ID>_R163</ID>
<pin1name>_A0(_PAreset_interval_button)</pin1name>
<pin2name>_X111(_P22)</pin2name>
</relation>
<relation>
<ID>_R164</ID>
<pin1name>_A0(_Pwait_interval_box)</pin1name>
<pin2name>_X111(_P23)</pin2name>
</relation>
<relation>
<ID>_R165</ID>
<pin1name>_A0(_PAwait_interval_button)</pin1name>
<pin2name>_X111(_P24)</pin2name>
</relation>
<relation>
<ID>_R166</ID>
<pin1name>_A0(_PAreset_button)</pin1name>
<pin2name>_X111(_P25)</pin2name>
</relation>
<codeclip>
<ID>_C167</ID>
<x0>712</x0>
<y0>112</y0>
<width>178</width>
<height>38</height>
<codetext>// 設定ファイルを保存する
public void save_inifile(){


try{

BufferedWriter dout = new BufferedWriter( new FileWriter(ini_file));
dout.write(&quot;edit_command=&quot;+edit_command+&quot;\n&quot;);
dout.write(&quot;edit_inifile_command=&quot;+edit_inifile_command+&quot;\n&quot;);
dout.write(&quot;asm_edit_command=&quot;+asm_edit_command+&quot;\n&quot;);
dout.write(&quot;compile_command=&quot;+compile_command+&quot;\n&quot;);
dout.write(&quot;assemble_command=&quot;+assemble_command+&quot;\n&quot;);
dout.write(&quot;terminal_command=&quot;+terminal_command+&quot;\n&quot;);
dout.write(&quot;rd_port_l_command=&quot;+rd_port_l_command+&quot;\n&quot;);
dout.write(&quot;rd_port_h_command=&quot;+rd_port_h_command+&quot;\n&quot;);
dout.write(&quot;wr_port_l_command=&quot;+wr_port_l_command+&quot;\n&quot;);
dout.write(&quot;write_port_h_command=&quot;+wr_port_h_command+&quot;\n&quot;);
dout.write(&quot;cpu_reset_l_command=&quot;+cpu_reset_l_command+&quot;\n&quot;);
dout.write(&quot;cpu_reset_h_command=&quot;+cpu_reset_h_command+&quot;\n&quot;);
dout.write(&quot;cpu_halt_l_command=&quot;+cpu_halt_l_command+&quot;\n&quot;);
dout.write(&quot;cpu_halt_h_command=&quot;+cpu_halt_h_command+&quot;\n&quot;);
dout.write(&quot;osc_l_command=&quot;+osc_l_command+&quot;\n&quot;);
dout.write(&quot;osc_h_command=&quot;+osc_h_command+&quot;\n&quot;);
dout.write(&quot;osc_enable_l_command=&quot;+osc_enable_l_command+&quot;\n&quot;);
dout.write(&quot;osc_enable_h_command=&quot;+osc_enable_h_command+&quot;\n&quot;);
dout.write(&quot;sdisable_l_command=&quot;+sdisable_l_command+&quot;\n&quot;);
dout.write(&quot;sdisable_h_command=&quot;+sdisable_h_command+&quot;\n&quot;);
dout.write(&quot;sclk_l_command=&quot;+sclk_l_command+&quot;\n&quot;);
dout.write(&quot;sclk_h_command=&quot;+sclk_h_command+&quot;\n&quot;);
dout.write(&quot;sdata_l_command=&quot;+sdata_l_command+&quot;\n&quot;);
dout.write(&quot;sdata_h_command=&quot;+sdata_h_command+&quot;\n&quot;);
dout.write(&quot;swrite_l_command=&quot;+swrite_l_command+&quot;\n&quot;);
dout.write(&quot;swrite_h_command=&quot;+swrite_h_command+&quot;\n&quot;);
dout.write(&quot;reset_command=&quot;+reset_command+&quot;\n&quot;);
dout.write(&quot;single_step_command=&quot;+single_step_command+&quot;\n&quot;);
dout.write(&quot;reset_interval_command=&quot;+reset_interval_command+&quot;\n&quot;);
dout.write(&quot;wait_interval_command=&quot;+wait_interval_command+&quot;\n&quot;);
dout.write(&quot;write_memory_command=&quot;+write_memory_command+&quot;\n&quot;);
dout.write(&quot;basic_edit_command=&quot;+basic_edit_command+&quot;\n&quot;);
dout.write(&quot;basic_file_name=&quot;+basic_file_name+&quot;\n&quot;);

dout.close();
} catch(Exception e ) {}
}
</codetext>
</codeclip>
<codeclip>
<ID>_C168</ID>
<x0>734</x0>
<y0>682</y0>
<width>230</width>
<height>37</height>
<codetext>// メッセージを表示
public void print_msg( String s ){

      message_area.append( s );
      String ss = message_area.getText();
      message_area.setCaretPosition( ss.length() );
    }

</codetext>
</codeclip>
<relation>
<ID>_R171</ID>
<pin1name>_A0(_Psdisable_button)</pin1name>
<pin2name>_X111(_P12)</pin2name>
</relation>
<relation>
<ID>_R172</ID>
<pin1name>_A0(_PAsdisable_button)</pin1name>
<pin2name>_X111(_P13)</pin2name>
</relation>
<relation>
<ID>_R173</ID>
<pin1name>_A0(_PAsclk_button)</pin1name>
<pin2name>_X111(_P15)</pin2name>
</relation>
<relation>
<ID>_R174</ID>
<pin1name>_A0(_Psclk_button)</pin1name>
<pin2name>_X111(_P14)</pin2name>
</relation>
<relation>
<ID>_R175</ID>
<pin1name>_A0(_Psdata_button)</pin1name>
<pin2name>_X111(_P16)</pin2name>
</relation>
<relation>
<ID>_R176</ID>
<pin1name>_A0(_PAsdata_button)</pin1name>
<pin2name>_X111(_P17)</pin2name>
</relation>
<relation>
<ID>_R178</ID>
<pin1name>_A0(_Pswrite_button)</pin1name>
<pin2name>_X111(_P18)</pin2name>
</relation>
<relation>
<ID>_R179</ID>
<pin1name>_A0(_PAswrite_button)</pin1name>
<pin2name>_X111(_P19)</pin2name>
</relation>
<relation>
<ID>_R180</ID>
<pin1name>_A0(_Prd_port_button)</pin1name>
<pin2name>_X111(_P0)</pin2name>
</relation>
<relation>
<ID>_R181</ID>
<pin1name>_A0(_PArd_port_button)</pin1name>
<pin2name>_X111(_P2)</pin2name>
</relation>
<relation>
<ID>_R182</ID>
<pin1name>_A0(_Pwr_port_button)</pin1name>
<pin2name>_X111(_P1)</pin2name>
</relation>
<relation>
<ID>_R183</ID>
<pin1name>_A0(_PAwr_port_button)</pin1name>
<pin2name>_X111(_P3)</pin2name>
</relation>
<relation>
<ID>_R184</ID>
<pin1name>_A0(_Posc_button)</pin1name>
<pin2name>_X111(_P8)</pin2name>
</relation>
<relation>
<ID>_R185</ID>
<pin1name>_A0(_PAosc_button)</pin1name>
<pin2name>_X111(_P9)</pin2name>
</relation>
<pin>
<ID>_P186</ID>
<x0>14</x0>
<y0>75</y0>
<width>103</width>
<height>28</height>
<text>out(JFrame f)</text>
<px>9</px>
<py>46</py>
</pin>
<relation>
<ID>_R187</ID>
<pin1name>_A0(_PGUIout)</pin1name>
<pin2name>_P186</pin2name>
</relation>
<pin>
<ID>_P188</ID>
<x0>7</x0>
<y0>113</y0>
<width>97</width>
<height>29</height>
<text>card6_sym()</text>
<px>4</px>
<py>62</py>
</pin>
<pin>
<ID>_P189</ID>
<x0>9</x0>
<y0>157</y0>
<width>108</width>
<height>30</height>
<text>card6vm_sym()</text>
<px>8</px>
<py>78</py>
</pin>
<relation>
<ID>_R190</ID>
<pin1name>_A0(_P_Emulator)</pin1name>
<pin2name>_P188</pin2name>
</relation>
<aobject>
<ID>_A0</ID>
<x0>149</x0>
<y0>0</y0>
<width>280</width>
<objectname>GUI</objectname>
<description>GUIオブジェクト
</description>
<state>
<ID>_SINIT</ID>
<x0>0</x0>
<y0>40</y0>
<width>70</width>
<height>40</height>
<text>  InitState</text>
<isinitstate>1</isinitstate>
</state>
<pin>
<ID>_Pstart</ID>
<x0>400</x0>
<y0>100</y0>
<width>80</width>
<height>26</height>
<text>Start()</text>
<px>0</px>
<py>36</py>
</pin>
<pin>
<ID>_PGUIout</ID>
<x0>0</x0>
<y0>84</y0>
<width>180</width>
<height>26</height>
<text>GUI_created(JFrame f)</text>
<px>0</px>
<py>54</py>
</pin>
<pin>
<ID>_PGUIclosed</ID>
<x0>310</x0>
<y0>0</y0>
<width>180</width>
<height>26</height>
<text>GUI_closed()</text>
<px>100</px>
<py>6</py>
</pin>
<action>
<ID>_Astart</ID>
<comp1name>_Pstart</comp1name>
<comp2name>_Ocreate</comp2name>
</action>
<operation>
<ID>_Ocreate</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>220</x0>
<y0>40</y0>
<width>130</width>
<height>64</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// GUIを作成する
XGUI x = new XGUI();

</codetext>
</operation>
<pin>
<ID>_P_Emulator</ID>
<x0>0</x0>
<y0>110</y0>
<width>200</width>
<height>26</height>
<text>_Emulator_selected()</text>
<px>0</px>
<py>72</py>
</pin>
<pin>
<ID>_P_VMEmulator</ID>
<x0>0</x0>
<y0>138</y0>
<width>200</width>
<height>26</height>
<text>_VMEmulator_selected()</text>
<px>0</px>
<py>90</py>
</pin>
<pin>
<ID>_PAinifile_button</ID>
<x0>0</x0>
<y0>166</y0>
<width>200</width>
<height>26</height>
<text>inifile_button_clicked()</text>
<px>0</px>
<py>108</py>
</pin>
<pin>
<ID>_PAsingle_button</ID>
<x0>0</x0>
<y0>194</y0>
<width>200</width>
<height>26</height>
<text>single_button_clicked()</text>
<px>0</px>
<py>126</py>
</pin>
<pin>
<ID>_PAcompile_button</ID>
<x0>0</x0>
<y0>222</y0>
<width>200</width>
<height>26</height>
<text>compile_button_clicked()</text>
<px>0</px>
<py>144</py>
</pin>
<pin>
<ID>_PAclr_button</ID>
<x0>0</x0>
<y0>250</y0>
<width>200</width>
<height>26</height>
<text>clr_button_clicked()</text>
<px>0</px>
<py>162</py>
</pin>
<pin>
<ID>_PAasm_button</ID>
<x0>0</x0>
<y0>278</y0>
<width>200</width>
<height>26</height>
<text>asm_button_clicked()</text>
<px>0</px>
<py>180</py>
</pin>
<pin>
<ID>_PAasm_edit_button</ID>
<x0>0</x0>
<y0>306</y0>
<width>200</width>
<height>26</height>
<text>asm_edit_button_clicked()</text>
<px>0</px>
<py>198</py>
</pin>
<pin>
<ID>_PAterminal_button</ID>
<x0>0</x0>
<y0>334</y0>
<width>200</width>
<height>26</height>
<text>terminal_button_clicked()</text>
<px>0</px>
<py>216</py>
</pin>
<pin>
<ID>_PAedit_button</ID>
<x0>0</x0>
<y0>362</y0>
<width>200</width>
<height>26</height>
<text>edit_button_clicked()</text>
<px>0</px>
<py>234</py>
</pin>
<pin>
<ID>_PAload_button</ID>
<x0>0</x0>
<y0>390</y0>
<width>200</width>
<height>26</height>
<text>load_button_clicked()</text>
<px>0</px>
<py>252</py>
</pin>
<pin>
<ID>_PAinc_addr</ID>
<x0>0</x0>
<y0>418</y0>
<width>200</width>
<height>26</height>
<text>inc_addr_clicked()</text>
<px>0</px>
<py>270</py>
</pin>
<pin>
<ID>_PAdec_addr</ID>
<x0>0</x0>
<y0>446</y0>
<width>200</width>
<height>26</height>
<text>dec_addr_clicked()</text>
<px>0</px>
<py>288</py>
</pin>
<pin>
<ID>_PAmem_set</ID>
<x0>0</x0>
<y0>474</y0>
<width>200</width>
<height>26</height>
<text>mem_set_clicked()</text>
<px>0</px>
<py>306</py>
</pin>
<pin>
<ID>_Prun_button</ID>
<x0>0</x0>
<y0>502</y0>
<width>200</width>
<height>26</height>
<text>run_button_created(JButton b)</text>
<px>0</px>
<py>324</py>
</pin>
<pin>
<ID>_PArun_button</ID>
<x0>0</x0>
<y0>530</y0>
<width>200</width>
<height>26</height>
<text>run_button_clicked()</text>
<px>0</px>
<py>342</py>
</pin>
<pin>
<ID>_Paddr_reg</ID>
<x0>0</x0>
<y0>558</y0>
<width>200</width>
<height>26</height>
<text>addr_reg_created(JTextField t)</text>
<px>0</px>
<py>360</py>
</pin>
<pin>
<ID>_PAaddr_reg</ID>
<x0>0</x0>
<y0>586</y0>
<width>200</width>
<height>26</height>
<text>addr_reg_input(String s)</text>
<px>0</px>
<py>378</py>
</pin>
<pin>
<ID>_Pc_reg</ID>
<x0>0</x0>
<y0>614</y0>
<width>200</width>
<height>26</height>
<text>c_reg_created(JTextField t)</text>
<px>0</px>
<py>396</py>
</pin>
<pin>
<ID>_Pa_reg</ID>
<x0>0</x0>
<y0>642</y0>
<width>200</width>
<height>26</height>
<text>a_reg_created(JTextField t)</text>
<px>0</px>
<py>414</py>
</pin>
<pin>
<ID>_Pr_reg</ID>
<x0>0</x0>
<y0>670</y0>
<width>200</width>
<height>26</height>
<text>r_reg_created(JTextField t)</text>
<px>0</px>
<py>432</py>
</pin>
<pin>
<ID>_Pd_reg</ID>
<x0>0</x0>
<y0>698</y0>
<width>200</width>
<height>26</height>
<text>d_reg_created(JTextField t)</text>
<px>0</px>
<py>450</py>
</pin>
<pin>
<ID>_Pio_flg</ID>
<x0>0</x0>
<y0>726</y0>
<width>200</width>
<height>26</height>
<text>io_flg_created(JLabel l)</text>
<px>0</px>
<py>468</py>
</pin>
<pin>
<ID>_Ppointer_flg</ID>
<x0>0</x0>
<y0>754</y0>
<width>200</width>
<height>26</height>
<text>pointer_flg_created(JLabel l)</text>
<px>0</px>
<py>486</py>
</pin>
<pin>
<ID>_Preturn_flg</ID>
<x0>0</x0>
<y0>782</y0>
<width>200</width>
<height>26</height>
<text>return_flg_created(JLabel l)</text>
<px>0</px>
<py>504</py>
</pin>
<pin>
<ID>_Pstore_flg</ID>
<x0>0</x0>
<y0>810</y0>
<width>200</width>
<height>26</height>
<text>store_flg_created(JLabel l)</text>
<px>0</px>
<py>522</py>
</pin>
<pin>
<ID>_Pld_flg</ID>
<x0>0</x0>
<y0>838</y0>
<width>200</width>
<height>26</height>
<text>ld_flg_created(JLabel l)</text>
<px>0</px>
<py>540</py>
</pin>
<pin>
<ID>_Pldh_flg</ID>
<x0>0</x0>
<y0>866</y0>
<width>200</width>
<height>26</height>
<text>ldh_flg_created(JLabel l)</text>
<px>0</px>
<py>558</py>
</pin>
<pin>
<ID>_Pldm_flg</ID>
<x0>0</x0>
<y0>894</y0>
<width>200</width>
<height>26</height>
<text>ldm_flg_created(JLabel l)</text>
<px>0</px>
<py>576</py>
</pin>
<pin>
<ID>_Pldl_flg</ID>
<x0>0</x0>
<y0>922</y0>
<width>200</width>
<height>26</height>
<text>ldl_flg_created(JLabel l)</text>
<px>0</px>
<py>594</py>
</pin>
<pin>
<ID>_Pclock_field</ID>
<x0>0</x0>
<y0>950</y0>
<width>200</width>
<height>26</height>
<text>clock_field_created(JTextField t)</text>
<px>0</px>
<py>612</py>
</pin>
<pin>
<ID>_Pinterval_field</ID>
<x0>0</x0>
<y0>978</y0>
<width>200</width>
<height>26</height>
<text>interval_field_created(JTextField t)</text>
<px>0</px>
<py>630</py>
</pin>
<pin>
<ID>_Pmessage_area</ID>
<x0>0</x0>
<y0>1006</y0>
<width>200</width>
<height>26</height>
<text>message_area_created(JTextArea t)</text>
<px>0</px>
<py>648</py>
</pin>
<pin>
<ID>_PAedit_basic_button</ID>
<x0>0</x0>
<y0>1034</y0>
<width>200</width>
<height>26</height>
<text>edit_basic_button_clicked()</text>
<px>0</px>
<py>666</py>
</pin>
<pin>
<ID>_PArun_basic_button</ID>
<x0>0</x0>
<y0>1062</y0>
<width>200</width>
<height>26</height>
<text>run_basic_button_clicked()</text>
<px>0</px>
<py>684</py>
</pin>
<pin>
<ID>_Pcommand_box</ID>
<x0>0</x0>
<y0>1090</y0>
<width>200</width>
<height>26</height>
<text>command_box_created(JTextField t)</text>
<px>0</px>
<py>702</py>
</pin>
<pin>
<ID>_PAcommand_box</ID>
<x0>0</x0>
<y0>1118</y0>
<width>200</width>
<height>26</height>
<text>command_box_input(String s)</text>
<px>0</px>
<py>720</py>
</pin>
<pin>
<ID>_PAenter_button</ID>
<x0>0</x0>
<y0>1146</y0>
<width>200</width>
<height>26</height>
<text>enter_button_clicked()</text>
<px>0</px>
<py>738</py>
</pin>
<pin>
<ID>_PAstop_button</ID>
<x0>0</x0>
<y0>1174</y0>
<width>200</width>
<height>26</height>
<text>stop_button_clicked()</text>
<px>0</px>
<py>756</py>
</pin>
<pin>
<ID>_Prd_port_button</ID>
<x0>0</x0>
<y0>1202</y0>
<width>200</width>
<height>26</height>
<text>rd_port_button_created(JButton b)</text>
<px>0</px>
<py>774</py>
</pin>
<pin>
<ID>_PArd_port_button</ID>
<x0>0</x0>
<y0>1230</y0>
<width>200</width>
<height>26</height>
<text>rd_port_button_clicked()</text>
<px>0</px>
<py>792</py>
</pin>
<pin>
<ID>_Pwr_port_button</ID>
<x0>0</x0>
<y0>1258</y0>
<width>200</width>
<height>26</height>
<text>wr_port_button_created(JButton b)</text>
<px>0</px>
<py>810</py>
</pin>
<pin>
<ID>_PAwr_port_button</ID>
<x0>0</x0>
<y0>1286</y0>
<width>200</width>
<height>26</height>
<text>wr_port_button_clicked()</text>
<px>0</px>
<py>828</py>
</pin>
<pin>
<ID>_Pcpu_reset_button</ID>
<x0>0</x0>
<y0>1314</y0>
<width>200</width>
<height>26</height>
<text>cpu_reset_button_created(JButton b)</text>
<px>0</px>
<py>846</py>
</pin>
<pin>
<ID>_PAcpu_reset_button</ID>
<x0>0</x0>
<y0>1342</y0>
<width>200</width>
<height>26</height>
<text>cpu_reset_button_clicked()</text>
<px>0</px>
<py>864</py>
</pin>
<pin>
<ID>_Pcpu_halt_button</ID>
<x0>0</x0>
<y0>1370</y0>
<width>200</width>
<height>26</height>
<text>cpu_halt_button_created(JButton b)</text>
<px>0</px>
<py>882</py>
</pin>
<pin>
<ID>_PAcpu_halt_button</ID>
<x0>0</x0>
<y0>1398</y0>
<width>200</width>
<height>26</height>
<text>cpu_halt_button_clicked()</text>
<px>0</px>
<py>900</py>
</pin>
<pin>
<ID>_Posc_button</ID>
<x0>0</x0>
<y0>1426</y0>
<width>200</width>
<height>26</height>
<text>osc_button_created(JButton b)</text>
<px>0</px>
<py>918</py>
</pin>
<pin>
<ID>_PAosc_button</ID>
<x0>0</x0>
<y0>1454</y0>
<width>200</width>
<height>26</height>
<text>osc_button_clicked()</text>
<px>0</px>
<py>936</py>
</pin>
<pin>
<ID>_Posc_enable_button</ID>
<x0>0</x0>
<y0>1482</y0>
<width>200</width>
<height>26</height>
<text>osc_enable_button_created(JButton b)</text>
<px>0</px>
<py>954</py>
</pin>
<pin>
<ID>_PAosc_enable_button</ID>
<x0>0</x0>
<y0>1510</y0>
<width>200</width>
<height>26</height>
<text>osc_enable_button_clicked()</text>
<px>0</px>
<py>972</py>
</pin>
<pin>
<ID>_Psdisable_button</ID>
<x0>0</x0>
<y0>1538</y0>
<width>200</width>
<height>26</height>
<text>sdisable_button_created(JButton b)</text>
<px>0</px>
<py>990</py>
</pin>
<pin>
<ID>_PAsdisable_button</ID>
<x0>0</x0>
<y0>1566</y0>
<width>200</width>
<height>26</height>
<text>sdisable_button_clicked()</text>
<px>0</px>
<py>1008</py>
</pin>
<pin>
<ID>_Psclk_button</ID>
<x0>0</x0>
<y0>1594</y0>
<width>200</width>
<height>26</height>
<text>sclk_button_created(JButton b)</text>
<px>0</px>
<py>1026</py>
</pin>
<pin>
<ID>_PAsclk_button</ID>
<x0>0</x0>
<y0>1622</y0>
<width>200</width>
<height>26</height>
<text>sclk_button_clicked()</text>
<px>0</px>
<py>1044</py>
</pin>
<pin>
<ID>_Psdata_button</ID>
<x0>0</x0>
<y0>1650</y0>
<width>200</width>
<height>26</height>
<text>sdata_button_created(JButton b)</text>
<px>0</px>
<py>1062</py>
</pin>
<pin>
<ID>_PAsdata_button</ID>
<x0>0</x0>
<y0>1678</y0>
<width>200</width>
<height>26</height>
<text>sdata_button_clicked()</text>
<px>0</px>
<py>1080</py>
</pin>
<pin>
<ID>_Pswrite_button</ID>
<x0>0</x0>
<y0>1706</y0>
<width>200</width>
<height>26</height>
<text>swrite_button_created(JButton b)</text>
<px>0</px>
<py>1098</py>
</pin>
<pin>
<ID>_PAswrite_button</ID>
<x0>0</x0>
<y0>1734</y0>
<width>200</width>
<height>26</height>
<text>swrite_button_clicked()</text>
<px>0</px>
<py>1116</py>
</pin>
<pin>
<ID>_Preset_interval_box</ID>
<x0>0</x0>
<y0>1762</y0>
<width>200</width>
<height>26</height>
<text>reset_interval_box_created(JTextField t)</text>
<px>0</px>
<py>1134</py>
</pin>
<pin>
<ID>_PAreset_interval_button</ID>
<x0>0</x0>
<y0>1790</y0>
<width>200</width>
<height>26</height>
<text>reset_interval_button_clicked()</text>
<px>0</px>
<py>1152</py>
</pin>
<pin>
<ID>_Pwait_interval_box</ID>
<x0>0</x0>
<y0>1818</y0>
<width>200</width>
<height>26</height>
<text>wait_interval_box_created(JTextField t)</text>
<px>0</px>
<py>1170</py>
</pin>
<pin>
<ID>_PAwait_interval_button</ID>
<x0>0</x0>
<y0>1846</y0>
<width>200</width>
<height>26</height>
<text>wait_interval_button_clicked()</text>
<px>0</px>
<py>1188</py>
</pin>
<pin>
<ID>_PAreset_button</ID>
<x0>0</x0>
<y0>1874</y0>
<width>200</width>
<height>26</height>
<text>reset_button_clicked()</text>
<px>0</px>
<py>1206</py>
</pin>
<codeclip>
<ID>_CXSTART</ID>
<x0>0</x0>
<y0>0</y0>
<width>300</width>
<height>26</height>
<codetext> class XGUI extends JFrame implements WindowListener{
 JPanel cnt;
JMenuBar menubar;
 class _Emulator extends JMenuItem implements ActionListener{
   _Emulator(){
    setText( &quot;Emulator&quot; );
    setMnemonic( 48 );
    addActionListener( this );
  }
  public void actionPerformed( ActionEvent e ){
    _Emulator_selected();
  }
}
 class _VMEmulator extends JMenuItem implements ActionListener{
   _VMEmulator(){
    setText( &quot;VMEmulator&quot; );
    setMnemonic( 48 );
    addActionListener( this );
  }
  public void actionPerformed( ActionEvent e ){
    _VMEmulator_selected();
  }
}
inifile_button Iinifile_button;
 class inifile_button extends JButton implements ActionListener{
  inifile_button(){
 setOpaque( true );
 setName(  &quot;inifile_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Ini File&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inifile_button_clicked(); }
}
single_button Isingle_button;
 class single_button extends JButton implements ActionListener{
  single_button(){
 setOpaque( true );
 setName(  &quot;single_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;1step&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ single_button_clicked(); }
}
compile_button Icompile_button;
 class compile_button extends JButton implements ActionListener{
  compile_button(){
 setOpaque( true );
 setName(  &quot;compile_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Compile&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ compile_button_clicked(); }
}
clr_button Iclr_button;
 class clr_button extends JButton implements ActionListener{
  clr_button(){
 setOpaque( true );
 setName(  &quot;clr_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;CLR&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ clr_button_clicked(); }
}
asm_button Iasm_button;
 class asm_button extends JButton implements ActionListener{
  asm_button(){
 setOpaque( true );
 setName(  &quot;asm_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;assemble&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ asm_button_clicked(); }
}
asm_edit_button Iasm_edit_button;
 class asm_edit_button extends JButton implements ActionListener{
  asm_edit_button(){
 setOpaque( true );
 setName(  &quot;asm_edit_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;asm edit&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ asm_edit_button_clicked(); }
}
terminal_button Iterminal_button;
 class terminal_button extends JButton implements ActionListener{
  terminal_button(){
 setOpaque( true );
 setName(  &quot;terminal_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;TERMINAL&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ terminal_button_clicked(); }
}
LABEL2 ILABEL2;
 class LABEL2 extends JLabel{
  LABEL2(){
 setOpaque( true );
 setName(  &quot;LABEL2&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R:&quot; );
}
}
LABEL3 ILABEL3;
 class LABEL3 extends JLabel{
  LABEL3(){
 setOpaque( true );
 setName(  &quot;LABEL3&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;A:&quot; );
}
}
LABEL4 ILABEL4;
 class LABEL4 extends JLabel{
  LABEL4(){
 setOpaque( true );
 setName(  &quot;LABEL4&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;C:&quot; );
}
}
edit_button Iedit_button;
 class edit_button extends JButton implements ActionListener{
  edit_button(){
 setOpaque( true );
 setName(  &quot;edit_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;edit&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ edit_button_clicked(); }
}
load_button Iload_button;
 class load_button extends JButton implements ActionListener{
  load_button(){
 setOpaque( true );
 setName(  &quot;load_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;load&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ load_button_clicked(); }
}
inc_addr Iinc_addr;
 class inc_addr extends JButton implements ActionListener{
  inc_addr(){
 setOpaque( true );
 setName(  &quot;inc_addr&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;+&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inc_addr_clicked(); }
}
dec_addr Idec_addr;
 class dec_addr extends JButton implements ActionListener{
  dec_addr(){
 setOpaque( true );
 setName(  &quot;dec_addr&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;-&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ dec_addr_clicked(); }
}
mem_set Imem_set;
 class mem_set extends JButton implements ActionListener{
  mem_set(){
 setOpaque( true );
 setName(  &quot;mem_set&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;WRT&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ mem_set_clicked(); }
}
run_button Irun_button;
 class run_button extends JButton implements ActionListener{
  run_button(){
 setOpaque( true );
 setName(  &quot;run_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;run&quot; );
 addActionListener( this );
 run_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ run_button_clicked(); }
}
addr_reg Iaddr_reg;
 class addr_reg extends JTextField implements ActionListener{
  addr_reg(){
 setOpaque( true );
 setName(  &quot;addr_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;000000&quot; );
 addActionListener( this );
 addr_reg_created( this );
}
 public void actionPerformed( ActionEvent e ){ addr_reg_input( getText() ); }
}
c_reg Ic_reg;
 class c_reg extends JTextField{
  c_reg(){
 setOpaque( true );
 setName(  &quot;c_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;00&quot; );
 c_reg_created( this );
}
}
a_reg Ia_reg;
 class a_reg extends JTextField{
  a_reg(){
 setOpaque( true );
 setName(  &quot;a_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;000000&quot; );
 a_reg_created( this );
}
}
r_reg Ir_reg;
 class r_reg extends JTextField{
  r_reg(){
 setOpaque( true );
 setName(  &quot;r_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;000000&quot; );
 r_reg_created( this );
}
}
d_reg Id_reg;
 class d_reg extends JTextField{
  d_reg(){
 setOpaque( true );
 setName(  &quot;d_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;00&quot; );
 d_reg_created( this );
}
}
io_flg Iio_flg;
 class io_flg extends JLabel{
  io_flg(){
 setOpaque( true );
 setName(  &quot;io_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;IO&quot; );
 io_flg_created( this );
}
}
pointer_flg Ipointer_flg;
 class pointer_flg extends JLabel{
  pointer_flg(){
 setOpaque( true );
 setName(  &quot;pointer_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;POINTER&quot; );
 pointer_flg_created( this );
}
}
return_flg Ireturn_flg;
 class return_flg extends JLabel{
  return_flg(){
 setOpaque( true );
 setName(  &quot;return_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;RET&quot; );
 return_flg_created( this );
}
}
store_flg Istore_flg;
 class store_flg extends JLabel{
  store_flg(){
 setOpaque( true );
 setName(  &quot;store_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;ST&quot; );
 store_flg_created( this );
}
}
ld_flg Ild_flg;
 class ld_flg extends JLabel{
  ld_flg(){
 setOpaque( true );
 setName(  &quot;ld_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;LD&quot; );
 ld_flg_created( this );
}
}
ldh_flg Ildh_flg;
 class ldh_flg extends JLabel{
  ldh_flg(){
 setOpaque( true );
 setName(  &quot;ldh_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;LDH&quot; );
 ldh_flg_created( this );
}
}
ldm_flg Ildm_flg;
 class ldm_flg extends JLabel{
  ldm_flg(){
 setOpaque( true );
 setName(  &quot;ldm_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;LDM&quot; );
 ldm_flg_created( this );
}
}
ldl_flg Ildl_flg;
 class ldl_flg extends JLabel{
  ldl_flg(){
 setOpaque( true );
 setName(  &quot;ldl_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;LDL&quot; );
 ldl_flg_created( this );
}
}
LABEL24 ILABEL24;
 class LABEL24 extends JLabel{
  LABEL24(){
 setOpaque( true );
 setName(  &quot;LABEL24&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  251, 253, 105 ));
 setHorizontalAlignment( 2 );
 setVerticalAlignment( 0 );
 setText( &quot;CYCLE:&quot; );
}
}
clock_field Iclock_field;
 class clock_field extends JTextField{
  clock_field(){
 setOpaque( true );
 setName(  &quot;clock_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 clock_field_created( this );
}
}
interval_field Iinterval_field;
 class interval_field extends JTextField{
  interval_field(){
 setOpaque( true );
 setName(  &quot;interval_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;1&quot; );
 interval_field_created( this );
}
}
LABEL33 ILABEL33;
 class LABEL33 extends JLabel{
  LABEL33(){
 setOpaque( true );
 setName(  &quot;LABEL33&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;interval time&quot; );
}
}
LABEL34 ILABEL34;
 class LABEL34 extends JLabel{
  LABEL34(){
 setOpaque( true );
 setName(  &quot;LABEL34&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;ms&quot; );
}
}
LABEL36 ILABEL36;
 class LABEL36 extends JLabel{
  LABEL36(){
 setOpaque( true );
 setName(  &quot;LABEL36&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;ADDR:&quot; );
}
}
LABEL35 ILABEL35;
 class LABEL35 extends JLabel{
  LABEL35(){
 setOpaque( true );
 setName(  &quot;LABEL35&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;D:&quot; );
}
}
message_area Imessage_area;
 class message_area extends JTextArea{
 JScrollPane scrl;
  message_area(){
 setOpaque( true );
 setName(  &quot;message_area&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 scrl = new JScrollPane( this );
 message_area_created( this );
}
}
edit_basic_button Iedit_basic_button;
 class edit_basic_button extends JButton implements ActionListener{
  edit_basic_button(){
 setOpaque( true );
 setName(  &quot;edit_basic_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Edit&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ edit_basic_button_clicked(); }
}
run_basic_button Irun_basic_button;
 class run_basic_button extends JButton implements ActionListener{
  run_basic_button(){
 setOpaque( true );
 setName(  &quot;run_basic_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Run&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ run_basic_button_clicked(); }
}
command_box Icommand_box;
 class command_box extends JTextField implements ActionListener{
  command_box(){
 setOpaque( true );
 setName(  &quot;command_box&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 addActionListener( this );
 command_box_created( this );
}
 public void actionPerformed( ActionEvent e ){ command_box_input( getText() ); }
}
enter_button Ienter_button;
 class enter_button extends JButton implements ActionListener{
  enter_button(){
 setOpaque( true );
 setName(  &quot;enter_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Enter&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ enter_button_clicked(); }
}
LABEL57 ILABEL57;
 class LABEL57 extends JLabel{
  LABEL57(){
 setOpaque( true );
 setName(  &quot;LABEL57&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 14 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  254, 251, 115 ));
 setHorizontalAlignment( 2 );
 setVerticalAlignment( 0 );
 setText( &quot;BASIC Command Line:&quot; );
}
}
stop_button Istop_button;
 class stop_button extends JButton implements ActionListener{
  stop_button(){
 setOpaque( true );
 setName(  &quot;stop_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Stop&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ stop_button_clicked(); }
}
rd_port_button Ird_port_button;
 class rd_port_button extends JButton implements ActionListener{
  rd_port_button(){
 setOpaque( true );
 setName(  &quot;rd_port_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;RD_PORT&quot; );
 addActionListener( this );
 rd_port_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ rd_port_button_clicked(); }
}
wr_port_button Iwr_port_button;
 class wr_port_button extends JButton implements ActionListener{
  wr_port_button(){
 setOpaque( true );
 setName(  &quot;wr_port_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;WR_PORT&quot; );
 addActionListener( this );
 wr_port_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ wr_port_button_clicked(); }
}
cpu_reset_button Icpu_reset_button;
 class cpu_reset_button extends JButton implements ActionListener{
  cpu_reset_button(){
 setOpaque( true );
 setName(  &quot;cpu_reset_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;CPU_RESET&quot; );
 addActionListener( this );
 cpu_reset_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ cpu_reset_button_clicked(); }
}
cpu_halt_button Icpu_halt_button;
 class cpu_halt_button extends JButton implements ActionListener{
  cpu_halt_button(){
 setOpaque( true );
 setName(  &quot;cpu_halt_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;CPU_HALT&quot; );
 addActionListener( this );
 cpu_halt_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ cpu_halt_button_clicked(); }
}
osc_button Iosc_button;
 class osc_button extends JButton implements ActionListener{
  osc_button(){
 setOpaque( true );
 setName(  &quot;osc_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;OSC&quot; );
 addActionListener( this );
 osc_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ osc_button_clicked(); }
}
osc_enable_button Iosc_enable_button;
 class osc_enable_button extends JButton implements ActionListener{
  osc_enable_button(){
 setOpaque( true );
 setName(  &quot;osc_enable_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;OSC_ENABLE&quot; );
 addActionListener( this );
 osc_enable_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ osc_enable_button_clicked(); }
}
sdisable_button Isdisable_button;
 class sdisable_button extends JButton implements ActionListener{
  sdisable_button(){
 setOpaque( true );
 setName(  &quot;sdisable_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;SDISABLE&quot; );
 addActionListener( this );
 sdisable_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ sdisable_button_clicked(); }
}
sclk_button Isclk_button;
 class sclk_button extends JButton implements ActionListener{
  sclk_button(){
 setOpaque( true );
 setName(  &quot;sclk_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;SCLK&quot; );
 addActionListener( this );
 sclk_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ sclk_button_clicked(); }
}
sdata_button Isdata_button;
 class sdata_button extends JButton implements ActionListener{
  sdata_button(){
 setOpaque( true );
 setName(  &quot;sdata_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;SDATA&quot; );
 addActionListener( this );
 sdata_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ sdata_button_clicked(); }
}
swrite_button Iswrite_button;
 class swrite_button extends JButton implements ActionListener{
  swrite_button(){
 setOpaque( true );
 setName(  &quot;swrite_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;SWRITE&quot; );
 addActionListener( this );
 swrite_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ swrite_button_clicked(); }
}
LABEL47 ILABEL47;
 class LABEL47 extends JLabel{
  LABEL47(){
 setOpaque( true );
 setName(  &quot;LABEL47&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  251, 253, 105 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;RESET INTERVAL:&quot; );
}
}
reset_interval_box Ireset_interval_box;
 class reset_interval_box extends JTextField{
  reset_interval_box(){
 setOpaque( true );
 setName(  &quot;reset_interval_box&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;1000&quot; );
 reset_interval_box_created( this );
}
}
reset_interval_button Ireset_interval_button;
 class reset_interval_button extends JButton implements ActionListener{
  reset_interval_button(){
 setOpaque( true );
 setName(  &quot;reset_interval_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;SET&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ reset_interval_button_clicked(); }
}
LABEL50 ILABEL50;
 class LABEL50 extends JLabel{
  LABEL50(){
 setOpaque( true );
 setName(  &quot;LABEL50&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  251, 253, 105 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;WAIT INTERVAL:&quot; );
}
}
wait_interval_box Iwait_interval_box;
 class wait_interval_box extends JTextField{
  wait_interval_box(){
 setOpaque( true );
 setName(  &quot;wait_interval_box&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;10&quot; );
 wait_interval_box_created( this );
}
}
wait_interval_button Iwait_interval_button;
 class wait_interval_button extends JButton implements ActionListener{
  wait_interval_button(){
 setOpaque( true );
 setName(  &quot;wait_interval_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;SET&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ wait_interval_button_clicked(); }
}
reset_button Ireset_button;
 class reset_button extends JButton implements ActionListener{
  reset_button(){
 setOpaque( true );
 setName(  &quot;reset_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;RESET&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ reset_button_clicked(); }
}
LABEL54 ILABEL54;
 class LABEL54 extends JLabel{
  LABEL54(){
 setOpaque( true );
 setName(  &quot;LABEL54&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 14 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  251, 253, 105 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;CONTROL SIGNALS:&quot; );
}
}
 XGUI(){
 setTitle(&quot;CARD6 Debugger&quot;);
 cnt = new JPanel( new BorderLayout() );
 cnt.setPreferredSize(  new  Dimension( 392, 633 ) );
 ((Component)cnt).setBackground( new Color( 254, 251, 115 ) );
menubar = new JMenuBar();
setJMenuBar( menubar );
menubar.add( new  _Emulator() );
menubar.add( new  _VMEmulator() );
 Iinifile_button = new inifile_button();
 cnt.add( Iinifile_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iinifile_button );
 Iinifile_button.setBounds( 326, 59, 58, 50 );
 Isingle_button = new single_button();
 cnt.add( Isingle_button, 0 );
 cnt.getLayout().removeLayoutComponent( Isingle_button );
 Isingle_button.setBounds( 63, 112, 47, 44 );
 Icompile_button = new compile_button();
 cnt.add( Icompile_button, 0 );
 cnt.getLayout().removeLayoutComponent( Icompile_button );
 Icompile_button.setBounds( 217, 2, 60, 27 );
 Iclr_button = new clr_button();
 cnt.add( Iclr_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iclr_button );
 Iclr_button.setBounds( 285, 2, 33, 27 );
 Iasm_button = new asm_button();
 cnt.add( Iasm_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iasm_button );
 Iasm_button.setBounds( 86, 2, 74, 28 );
 Iasm_edit_button = new asm_edit_button();
 cnt.add( Iasm_edit_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iasm_edit_button );
 Iasm_edit_button.setBounds( 3, 2, 74, 28 );
 Iterminal_button = new terminal_button();
 cnt.add( Iterminal_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iterminal_button );
 Iterminal_button.setBounds( 305, 162, 82, 53 );
 ILABEL2 = new LABEL2();
 cnt.add( ILABEL2, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL2 );
 ILABEL2.setBounds( 148, 59, 55, 24 );
 ILABEL3 = new LABEL3();
 cnt.add( ILABEL3, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL3 );
 ILABEL3.setBounds( 90, 59, 55, 24 );
 ILABEL4 = new LABEL4();
 cnt.add( ILABEL4, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL4 );
 ILABEL4.setBounds( 61, 59, 27, 24 );
 Iedit_button = new edit_button();
 cnt.add( Iedit_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iedit_button );
 Iedit_button.setBounds( 167, 2, 42, 27 );
 Iload_button = new load_button();
 cnt.add( Iload_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iload_button );
 Iload_button.setBounds( 326, 2, 56, 27 );
 Iinc_addr = new inc_addr();
 cnt.add( Iinc_addr, 0 );
 cnt.getLayout().removeLayoutComponent( Iinc_addr );
 Iinc_addr.setBounds( 243, 59, 31, 23 );
 Idec_addr = new dec_addr();
 cnt.add( Idec_addr, 0 );
 cnt.getLayout().removeLayoutComponent( Idec_addr );
 Idec_addr.setBounds( 243, 85, 31, 23 );
 Imem_set = new mem_set();
 cnt.add( Imem_set, 0 );
 cnt.getLayout().removeLayoutComponent( Imem_set );
 Imem_set.setBounds( 278, 59, 42, 49 );
 Irun_button = new run_button();
 cnt.add( Irun_button, 0 );
 cnt.getLayout().removeLayoutComponent( Irun_button );
 Irun_button.setBounds( 239, 113, 57, 42 );
 Iaddr_reg = new addr_reg();
 cnt.add( Iaddr_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Iaddr_reg );
 Iaddr_reg.setBounds( 2, 86, 57, 24 );
 Ic_reg = new c_reg();
 cnt.add( Ic_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ic_reg );
 Ic_reg.setBounds( 61, 86, 29, 24 );
 Ia_reg = new a_reg();
 cnt.add( Ia_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ia_reg );
 Ia_reg.setBounds( 91, 86, 56, 24 );
 Ir_reg = new r_reg();
 cnt.add( Ir_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir_reg );
 Ir_reg.setBounds( 148, 86, 56, 24 );
 Id_reg = new d_reg();
 cnt.add( Id_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Id_reg );
 Id_reg.setBounds( 206, 85, 33, 25 );
 Iio_flg = new io_flg();
 cnt.add( Iio_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Iio_flg );
 Iio_flg.setBounds( 3, 33, 28, 22 );
 Ipointer_flg = new pointer_flg();
 cnt.add( Ipointer_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ipointer_flg );
 Ipointer_flg.setBounds( 36, 33, 63, 22 );
 Ireturn_flg = new return_flg();
 cnt.add( Ireturn_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ireturn_flg );
 Ireturn_flg.setBounds( 103, 33, 41, 22 );
 Istore_flg = new store_flg();
 cnt.add( Istore_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Istore_flg );
 Istore_flg.setBounds( 149, 34, 37, 21 );
 Ild_flg = new ld_flg();
 cnt.add( Ild_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ild_flg );
 Ild_flg.setBounds( 190, 34, 37, 21 );
 Ildh_flg = new ldh_flg();
 cnt.add( Ildh_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ildh_flg );
 Ildh_flg.setBounds( 229, 34, 46, 21 );
 Ildm_flg = new ldm_flg();
 cnt.add( Ildm_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ildm_flg );
 Ildm_flg.setBounds( 285, 34, 49, 21 );
 Ildl_flg = new ldl_flg();
 cnt.add( Ildl_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ildl_flg );
 Ildl_flg.setBounds( 340, 34, 43, 21 );
 ILABEL24 = new LABEL24();
 cnt.add( ILABEL24, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL24 );
 ILABEL24.setBounds( 2, 111, 59, 22 );
 Iclock_field = new clock_field();
 cnt.add( Iclock_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iclock_field );
 Iclock_field.setBounds( 1, 135, 56, 22 );
 Iinterval_field = new interval_field();
 cnt.add( Iinterval_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iinterval_field );
 Iinterval_field.setBounds( 118, 130, 75, 25 );
 ILABEL33 = new LABEL33();
 cnt.add( ILABEL33, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL33 );
 ILABEL33.setBounds( 115, 112, 105, 15 );
 ILABEL34 = new LABEL34();
 cnt.add( ILABEL34, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL34 );
 ILABEL34.setBounds( 192, 132, 27, 23 );
 ILABEL36 = new LABEL36();
 cnt.add( ILABEL36, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL36 );
 ILABEL36.setBounds( 2, 59, 57, 25 );
 ILABEL35 = new LABEL35();
 cnt.add( ILABEL35, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL35 );
 ILABEL35.setBounds( 206, 59, 32, 24 );
 Imessage_area = new message_area();
 cnt.add( Imessage_area.scrl, 0 );
 cnt.getLayout().removeLayoutComponent( Imessage_area.scrl );
 (  Imessage_area.scrl ).setBounds( 2, 395, 382, 230 );
 Iedit_basic_button = new edit_basic_button();
 cnt.add( Iedit_basic_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iedit_basic_button );
 Iedit_basic_button.setBounds( 222, 328, 78, 28 );
 Irun_basic_button = new run_basic_button();
 cnt.add( Irun_basic_button, 0 );
 cnt.getLayout().removeLayoutComponent( Irun_basic_button );
 Irun_basic_button.setBounds( 303, 328, 77, 28 );
 Icommand_box = new command_box();
 cnt.add( Icommand_box, 0 );
 cnt.getLayout().removeLayoutComponent( Icommand_box );
 Icommand_box.setBounds( 2, 359, 218, 32 );
 Ienter_button = new enter_button();
 cnt.add( Ienter_button, 0 );
 cnt.getLayout().removeLayoutComponent( Ienter_button );
 Ienter_button.setBounds( 222, 359, 77, 31 );
 ILABEL57 = new LABEL57();
 cnt.add( ILABEL57, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL57 );
 ILABEL57.setBounds( 11, 331, 161, 25 );
 Istop_button = new stop_button();
 cnt.add( Istop_button, 0 );
 cnt.getLayout().removeLayoutComponent( Istop_button );
 Istop_button.setBounds( 303, 359, 76, 31 );
 Ird_port_button = new rd_port_button();
 cnt.add( Ird_port_button, 0 );
 cnt.getLayout().removeLayoutComponent( Ird_port_button );
 Ird_port_button.setBounds( 197, 232, 93, 27 );
 Iwr_port_button = new wr_port_button();
 cnt.add( Iwr_port_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iwr_port_button );
 Iwr_port_button.setBounds( 293, 231, 95, 27 );
 Icpu_reset_button = new cpu_reset_button();
 cnt.add( Icpu_reset_button, 0 );
 cnt.getLayout().removeLayoutComponent( Icpu_reset_button );
 Icpu_reset_button.setBounds( 2, 263, 107, 27 );
 Icpu_halt_button = new cpu_halt_button();
 cnt.add( Icpu_halt_button, 0 );
 cnt.getLayout().removeLayoutComponent( Icpu_halt_button );
 Icpu_halt_button.setBounds( 113, 263, 83, 27 );
 Iosc_button = new osc_button();
 cnt.add( Iosc_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iosc_button );
 Iosc_button.setBounds( 198, 263, 91, 27 );
 Iosc_enable_button = new osc_enable_button();
 cnt.add( Iosc_enable_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iosc_enable_button );
 Iosc_enable_button.setBounds( 293, 262, 95, 28 );
 Isdisable_button = new sdisable_button();
 cnt.add( Isdisable_button, 0 );
 cnt.getLayout().removeLayoutComponent( Isdisable_button );
 Isdisable_button.setBounds( 2, 294, 108, 28 );
 Isclk_button = new sclk_button();
 cnt.add( Isclk_button, 0 );
 cnt.getLayout().removeLayoutComponent( Isclk_button );
 Isclk_button.setBounds( 113, 295, 83, 27 );
 Isdata_button = new sdata_button();
 cnt.add( Isdata_button, 0 );
 cnt.getLayout().removeLayoutComponent( Isdata_button );
 Isdata_button.setBounds( 198, 294, 91, 28 );
 Iswrite_button = new swrite_button();
 cnt.add( Iswrite_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iswrite_button );
 Iswrite_button.setBounds( 293, 294, 96, 28 );
 ILABEL47 = new LABEL47();
 cnt.add( ILABEL47, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL47 );
 ILABEL47.setBounds( 0, 162, 135, 26 );
 Ireset_interval_box = new reset_interval_box();
 cnt.add( Ireset_interval_box, 0 );
 cnt.getLayout().removeLayoutComponent( Ireset_interval_box );
 Ireset_interval_box.setBounds( 136, 161, 87, 27 );
 Ireset_interval_button = new reset_interval_button();
 cnt.add( Ireset_interval_button, 0 );
 cnt.getLayout().removeLayoutComponent( Ireset_interval_button );
 Ireset_interval_button.setBounds( 238, 162, 57, 25 );
 ILABEL50 = new LABEL50();
 cnt.add( ILABEL50, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL50 );
 ILABEL50.setBounds( 0, 190, 134, 25 );
 Iwait_interval_box = new wait_interval_box();
 cnt.add( Iwait_interval_box, 0 );
 cnt.getLayout().removeLayoutComponent( Iwait_interval_box );
 Iwait_interval_box.setBounds( 135, 190, 88, 26 );
 Iwait_interval_button = new wait_interval_button();
 cnt.add( Iwait_interval_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iwait_interval_button );
 Iwait_interval_button.setBounds( 237, 191, 59, 24 );
 Ireset_button = new reset_button();
 cnt.add( Ireset_button, 0 );
 cnt.getLayout().removeLayoutComponent( Ireset_button );
 Ireset_button.setBounds( 305, 113, 81, 42 );
 ILABEL54 = new LABEL54();
 cnt.add( ILABEL54, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL54 );
 ILABEL54.setBounds( 6, 227, 165, 32 );
 setContentPane( cnt );
 pack();
 addWindowListener( this );
 setVisible( true );
 GUI_created( this );
}
 public void windowActivated( WindowEvent e ){}
 public void windowClosed( WindowEvent e ){}
 public void windowClosing( WindowEvent e ){ GUI_closed(); }
 public void windowDeactivated( WindowEvent e ){}
 public void windowDeiconified( WindowEvent e ){}
 public void windowIconified( WindowEvent e ){}
 public void windowOpened( WindowEvent e ){}
}
</codetext>
</codeclip>
<ID_maker>84</ID_maker>
<height>1228</height>
<レイアウト>CARD6 Debugger
392
633
254
251
115
xxscale=1
BUTTON;inifile_button;Ini File;326;59;58;50;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;single_button;1step;63;112;47;44;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;compile_button;Compile;217;2;60;27;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;clr_button;CLR;285;2;33;27;51;51;51;192;192;192;Dialog;10;null;0;0;1;0;1;JButton;
BUTTON;asm_button;assemble;86;2;74;28;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;asm_edit_button;asm edit;3;2;74;28;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;terminal_button;TERMINAL;305;162;82;53;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
LABEL;LABEL2;R:;148;59;55;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL3;A:;90;59;55;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL4;C:;61;59;27;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
BUTTON;edit_button;edit;167;2;42;27;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;load_button;load;326;2;56;27;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;inc_addr;+;243;59;31;23;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;dec_addr;-;243;85;31;23;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;mem_set;WRT;278;59;42;49;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;run_button;run;239;113;57;42;51;51;51;192;192;192;Dialog;12;null;0;0;1;1;1;JButton;
TEXTFIELD;addr_reg;000000;2;86;57;24;51;51;51;255;255;255;Dialog;10;1;1;1;JTextField;
TEXTFIELD;c_reg;00;61;86;29;24;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;a_reg;000000;91;86;56;24;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;r_reg;000000;148;86;56;24;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;d_reg;00;206;85;33;25;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
LABEL;io_flg;IO;3;33;28;22;51;51;51;192;192;192;Dialog;10;null;0;0;1;1;0;JLabel;
LABEL;pointer_flg;POINTER;36;33;63;22;51;51;51;192;192;192;Dialog;10;null;0;0;1;1;0;JLabel;
LABEL;return_flg;RET;103;33;41;22;51;51;51;192;192;192;Dialog;10;null;0;0;1;1;0;JLabel;
LABEL;store_flg;ST;149;34;37;21;51;51;51;192;192;192;Dialog;10;null;0;0;1;1;0;JLabel;
LABEL;ld_flg;LD;190;34;37;21;51;51;51;192;192;192;Dialog;10;null;0;0;1;1;0;JLabel;
LABEL;ldh_flg;LDH;229;34;46;21;51;51;51;192;192;192;Dialog;10;null;0;0;1;1;0;JLabel;
LABEL;ldm_flg;LDM;285;34;49;21;51;51;51;192;192;192;Dialog;10;null;0;0;1;1;0;JLabel;
LABEL;ldl_flg;LDL;340;34;43;21;51;51;51;192;192;192;Dialog;10;null;0;0;1;1;0;JLabel;
LABEL;LABEL24;CYCLE:;2;111;59;22;51;51;51;251;253;105;Dialog;12;null;2;0;1;0;0;JLabel;
TEXTFIELD;clock_field;0;1;135;56;22;51;51;51;255;255;255;Dialog;12;1;1;0;JTextField;
TEXTFIELD;interval_field;1;118;130;75;25;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
LABEL;LABEL33;interval time;115;112;105;15;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL34;ms;192;132;27;23;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL36;ADDR:;2;59;57;25;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL35;D:;206;59;32;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTAREA;message_area;null;2;395;382;230;51;51;51;255;255;255;Dialog;12;1;1;1;JTextArea;
BUTTON;edit_basic_button;Edit;222;328;78;28;51;51;51;192;192;192;Dialog;11;null;0;0;1;0;1;JButton;
BUTTON;run_basic_button;Run;303;328;77;28;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
TEXTFIELD;command_box;null;2;359;218;32;51;51;51;255;255;255;Dialog;12;1;1;1;JTextField;
BUTTON;enter_button;Enter;222;359;77;31;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
LABEL;LABEL57;BASIC Command Line:;11;331;161;25;51;51;51;254;251;115;Dialog;14;null;2;0;1;0;0;JLabel;
BUTTON;stop_button;Stop;303;359;76;31;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;rd_port_button;RD_PORT;197;232;93;27;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
BUTTON;wr_port_button;WR_PORT;293;231;95;27;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
BUTTON;cpu_reset_button;CPU_RESET;2;263;107;27;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
BUTTON;cpu_halt_button;CPU_HALT;113;263;83;27;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
BUTTON;osc_button;OSC;198;263;91;27;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
BUTTON;osc_enable_button;OSC_ENABLE;293;262;95;28;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
BUTTON;sdisable_button;SDISABLE;2;294;108;28;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
BUTTON;sclk_button;SCLK;113;295;83;27;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
BUTTON;sdata_button;SDATA;198;294;91;28;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
BUTTON;swrite_button;SWRITE;293;294;96;28;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;1;JButton;
LABEL;LABEL47;RESET INTERVAL:;0;162;135;26;51;51;51;251;253;105;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;reset_interval_box;1000;136;161;87;27;51;51;51;255;255;255;Dialog;12;1;1;0;JTextField;
BUTTON;reset_interval_button;SET;238;162;57;25;51;51;51;192;192;192;Dialog;11;null;0;0;1;0;1;JButton;
LABEL;LABEL50;WAIT INTERVAL:;0;190;134;25;51;51;51;251;253;105;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;wait_interval_box;10;135;190;88;26;51;51;51;255;255;255;Dialog;12;1;1;0;JTextField;
BUTTON;wait_interval_button;SET;237;191;59;24;51;51;51;192;192;192;Dialog;11;null;0;0;1;0;1;JButton;
BUTTON;reset_button;RESET;305;113;81;42;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
LABEL;LABEL54;CONTROL SIGNALS:;6;227;165;32;51;51;51;251;253;105;Dialog;14;null;0;0;1;0;0;JLabel;
Menu;Emulator;48;/Menu;END;
Menu;VMEmulator;48;/Menu;END;
</レイアウト>
</aobject>
<relation>
<ID>_R192</ID>
<pin1name>_A0(_P_VMEmulator)</pin1name>
<pin2name>_P189</pin2name>
</relation>
<pin>
<ID>_P193</ID>
<x0>793</x0>
<y0>48</y0>
<width>60</width>
<height>30</height>
<text>exit()</text>
<px>133</px>
<py>28</py>
</pin>
<relation>
<ID>_R194</ID>
<pin1name>_P193</pin1name>
<pin2name>_O1</pin2name>
</relation>
<pin>
<ID>_P195</ID>
<x0>457</x0>
<y0>8</y0>
<width>60</width>
<height>30</height>
<text>close()</text>
<px>131</px>
<py>54</py>
</pin>
<relation>
<ID>_R196</ID>
<pin1name>_A0(_PGUIclosed)</pin1name>
<pin2name>_P195</pin2name>
</relation>
</xobject>
<xobject>
<ID>_X1</ID>
<x0>232</x0>
<y0>282</y0>
<width>239</width>
<height>100</height>
<ID_maker>126</ID_maker>
<objectname>card6_sym</objectname>
<description>新規のアプリケーション</description>
<codeclip>
<ID>_CSTART</ID>
<x0>7</x0>
<y0>264</y0>
<width>80</width>
<height>24</height>
<codetext> String[] ARGS;
</codetext>
</codeclip>
<pin>
<ID>_PSTART</ID>
<x0>34</x0>
<y0>3</y0>
<width>55</width>
<height>24</height>
<text>Start()</text>
<px>186</px>
<py>10</py>
</pin>
<operation>
<ID>_O1</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>830</x0>
<y0>845</y0>
<width>112</width>
<height>65</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>48</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//終了処理 






try{

BufferedWriter dout = new BufferedWriter( new FileWriter(ini_file));
dout.write(&quot;edit_command=&quot;+edit_command+&quot;\n&quot;);
dout.write(&quot;edit_inifile_command=&quot;+edit_inifile_command+&quot;\n&quot;);
dout.write(&quot;asm_edit_command=&quot;+asm_edit_command+&quot;\n&quot;);
dout.write(&quot;compile_command=&quot;+compile_command+&quot;\n&quot;);
dout.write(&quot;assemble_command=&quot;+assemble_command+&quot;\n&quot;);
dout.write(&quot;terminal_command=&quot;+terminal_command+&quot;\n&quot;);
dout.write(&quot;.entry\n&quot;);
dout.write(entry_field.getText()+&quot;\n&quot;);
dout.write(&quot;.break\n&quot;);
dout.write(break_field.getText()+&quot;\n&quot;);
dout.write(&quot;.watch\n&quot;);
int nn = memory_windows.size();
for( int i = 0;i &lt; nn; i++ ){
  memory_window w = (memory_window)(memory_windows.get(i));
  dout.write( w.name+&quot;\n&quot;+w.start+&quot;\n&quot;+w.end+&quot;\n&quot;);
}
dout.close();
} catch( Exception e ){}



</codetext>
</operation>
<relation>
<ID>_R3</ID>
<pin1name>_PSTART</pin1name>
<pin2name>_A0(_Pstart)</pin2name>
</relation>
<xobject>
<ID>_X6</ID>
<x0>421</x0>
<y0>1</y0>
<width>131</width>
<height>161</height>
<ID_maker>44</ID_maker>
<objectname>symulator</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>69</x0>
<y0>478</y0>
<width>73</width>
<height>27</height>
<text>run_stop()</text>
<px>0</px>
<py>143</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>385</x0>
<y0>348</y0>
<width>85</width>
<height>28</height>
<text>single_step()</text>
<px>0</px>
<py>25</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>120</x0>
<y0>125</y0>
<width>60</width>
<height>30</height>
<text>add()</text>
<px>0</px>
<py>62</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>111</x0>
<y0>54</y0>
<width>60</width>
<height>30</height>
<text>remove()</text>
<px>0</px>
<py>77</py>
</pin>
<operation>
<ID>_O8</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>174</x0>
<y0>463</y0>
<width>164</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>38</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>115</outpinx0>
<outpiny0>26</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//実行モードを切り替える


run_mode = 1- run_mode;
if( run_mode == 0 ) run_button.setText(&quot;run&quot;); else run_button.setText(&quot;stop&quot;);
interval = Integer.parseInt( interval_field.getText() );
</codetext>
</operation>
<relation>
<ID>_R9</ID>
<pin1name>_P0</pin1name>
<pin2name>_O8</pin2name>
</relation>
<operation>
<ID>_O13</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>182</x0>
<y0>352</y0>
<width>161</width>
<height>67</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>108</inpinx0>
<inpiny0>42</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>//シングルステップ実行
exec_one_cycle();
</codetext>
</operation>
<relation>
<ID>_R14</ID>
<pin1name>_P1</pin1name>
<pin2name>_O13</pin2name>
</relation>
<operation>
<ID>_O15</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>251</x0>
<y0>42</y0>
<width>235</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//該当番号のメモリウィンドウを削除


if( memory_windows.size() &gt; list_no ) memory_windows.remove(list_no);

int nn = memory_windows.size();
if( nn &gt; 0){
if( list_no &gt;= nn ) list_no = nn-1;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R16</ID>
<pin1name>_P3</pin1name>
<pin2name>_O15</pin2name>
</relation>
<operation>
<ID>_O19</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>258</x0>
<y0>119</y0>
<width>171</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//メモリウィンドウを追加


String n = name_field.getText();
int s = Integer.parseInt(start_field.getText(),16);
int e = Integer.parseInt(end_field.getText(),16);
memory_windows.add( new memory_window( n, s, e ) );

int nn = memory_windows.size();
if( nn &gt; 0){
list_no = nn-1;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R20</ID>
<pin1name>_P2</pin1name>
<pin2name>_O19</pin2name>
</relation>
<codeclip>
<ID>_C21</ID>
<x0>518</x0>
<y0>81</y0>
<width>198</width>
<height>33</height>
<codetext>// 1サイクル実行
public void exec_one_cycle(){

address = Integer.parseInt( address_field.getText(), 16 );
break_adrs = Integer.parseInt( break_field.getText(), 16 );
clock = Integer.parseInt( clock_field.getText() );

// 停止アドレスに到達したら停止する
if( break_adrs !=0 &amp;&amp; (break_adrs == address) ){
  run_stop();
}

// メモリ(I/O)ー＞レジスタ サイクル
reg_c = mem_c[address];
reg_a = mem_a[address];
reg_r = mem_r[address];
if( (reg_c &amp; IO)  == 0 &amp;&amp; (reg_c &amp; LD)  == 0 ){ reg_d = KeyCode0; KeyCode0 = 0x3f;}	// I/Oアクセス
if( (reg_c &amp; IO)  != 0 &amp;&amp; (reg_c &amp; LD)  == 0 ) reg_d = mem_d[address];				// メモリアクセス
if( (reg_c &amp; LDH) == 0 ) reg_h = mem_d[address];
if( (reg_c &amp; LDM) == 0 ) reg_m = mem_d[address];
if( (reg_c &amp; LDL) == 0 ) reg_l = mem_d[address];

//レジスター＞メモリ(I/O) サイクル
if( (reg_c &amp; POINTER) == 0 ) address = reg_h * 4096 + reg_m * 64 + reg_l; else address = reg_a;
if( (reg_c &amp; RET) == 0 ) mem_a[address] = reg_r;
if( (reg_c &amp; IO)  == 0 &amp;&amp; (reg_c &amp; ST)  == 0 ) PrtData = reg_d;			// I/Oアクセス
if( (reg_c &amp; IO)  != 0 &amp;&amp; (reg_c &amp; ST)  == 0 ) mem_d[address] = reg_d;	// メモリアクセス

// レジスタ表示処理
address_field.setText(hex6(address));
c_field.setText(hex2(reg_c));
a_field.setText(hex6(reg_a));
r_field.setText(hex6(reg_r));
d_field.setText(hex2(reg_d));

update_control();

// I/O同期
io_sync();

    // メモリウィンドウ表示処理
    int n = memory_windows.size();
    message_area.setText(&quot;&quot;);
    for( int i = 0; i &lt; n; i++ ){
      memory_window w = (memory_window)(memory_windows.get(i));
      message_area.append(w.name+&quot;\n&quot;);
      for( int ad = w.start; ad &lt;= w.end; ad++ ){
        message_area.append( hex6(ad)+&quot;:&quot;+hex2(mem_c[ad])+&quot; &quot;+hex6(mem_a[ad])+&quot; &quot;+hex6(mem_r[ad])+&quot; &quot;+hex2(mem_d[ad])+&quot;\n&quot; );
      }
      message_area.append( &quot;\n&quot; );
    }


// クロック表示処理
clock++;
clock_field.setText(&quot;&quot;+clock);
}
</codetext>
</codeclip>
<aobject>
<ID>_A24</ID>
<x0>393</x0>
<y0>409</y0>
<width>147</width>
<height>85</height>
<ID_maker>11</ID_maker>
<objectname>Interval_Timer</objectname>
<description>新しいオブジェクト</description>
<state>
<ID>_SINIT</ID>
<x0>188</x0>
<y0>270</y0>
<width>70</width>
<height>40</height>
<text>  初期状態</text>
<isinitstate>1</isinitstate>
</state>
<pin>
<ID>_P0</ID>
<x0>200</x0>
<y0>364</y0>
<width>99</width>
<height>25</height>
<text>play_pause()</text>
<px>1</px>
<py>61</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>476</x0>
<y0>155</y0>
<width>60</width>
<height>30</height>
<text>Action()</text>
<px>0</px>
<py>41</py>
</pin>
<codeclip>
<ID>_C3</ID>
<x0>200</x0>
<y0>5</y0>
<width>272</width>
<height>198</height>
<codetext>XTimer  timer;
class XTimer implements ActionListener{
  javax.swing.Timer unit;
 
  XTimer( int del ){
   unit = new javax.swing.Timer( del, this );
  }

  public void actionPerformed( ActionEvent e){
    Action();
  }

}
</codetext>
</codeclip>
<operation>
<ID>_O7</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>321</x0>
<y0>255</y0>
<width>171</width>
<height>53</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>3</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>45</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// タイマーの起動・停止


if( run_mode != 0 ){
 timer = new XTimer( interval );
 timer.unit.start();
}
 else timer.unit.stop();
</codetext>
</operation>
<action>
<ID>_A9</ID>
<comp1name>_P0</comp1name>
<comp2name>_O7</comp2name>
</action>
</aobject>
<relation>
<ID>_R25</ID>
<pin1name>_O8</pin1name>
<pin2name>_A24(_P0)</pin2name>
</relation>
<relation>
<ID>_R26</ID>
<pin1name>_A24(_P2)</pin1name>
<pin2name>_O13</pin2name>
</relation>
<pin>
<ID>_P32</ID>
<x0>126</x0>
<y0>205</y0>
<width>60</width>
<height>30</height>
<text>home()</text>
<px>0</px>
<py>99</py>
</pin>
<pin>
<ID>_P33</ID>
<x0>122</x0>
<y0>257</y0>
<width>60</width>
<height>30</height>
<text>inc()</text>
<px>0</px>
<py>114</py>
</pin>
<pin>
<ID>_P34</ID>
<x0>120</x0>
<y0>309</y0>
<width>60</width>
<height>30</height>
<text>dec()</text>
<px>0</px>
<py>131</py>
</pin>
<operation>
<ID>_O35</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>279</x0>
<y0>188</y0>
<width>123</width>
<height>48</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>list_no = 0;


int nn = memory_windows.size();
if( nn &gt; 0){
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R36</ID>
<pin1name>_P32</pin1name>
<pin2name>_O35</pin2name>
</relation>
<operation>
<ID>_O37</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>283</x0>
<y0>241</y0>
<width>115</width>
<height>44</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>list_no++;


int nn = memory_windows.size();
if( nn &gt; 0 ){
if( list_no &gt;= nn ) list_no = nn -1;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R38</ID>
<pin1name>_P33</pin1name>
<pin2name>_O37</pin2name>
</relation>
<operation>
<ID>_O39</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>280</x0>
<y0>291</y0>
<width>113</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>list_no--;


int nn = memory_windows.size();
if( nn &gt; 0){
if( list_no &lt; 0 ) list_no = 0;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R40</ID>
<pin1name>_P34</pin1name>
<pin2name>_O39</pin2name>
</relation>
<pin>
<ID>_P41</ID>
<x0>448</x0>
<y0>207</y0>
<width>60</width>
<height>30</height>
<text>clear()</text>
<px>0</px>
<py>45</py>
</pin>
<operation>
<ID>_O42</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>573</x0>
<y0>202</y0>
<width>171</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//メモリウィンドウを消去


memory_windows = new Vector();
list_no =0;
name_field.setText(&quot;&quot;);
start_field.setText(&quot;0000&quot;);
end_field.setText(&quot;0000&quot;);
address_field.setText( entry_field.getText() );
</codetext>
</operation>
<relation>
<ID>_R43</ID>
<pin1name>_P41</pin1name>
<pin2name>_O42</pin2name>
</relation>
</xobject>
<codeclip>
<ID>_C9</ID>
<x0>680</x0>
<y0>1</y0>
<width>286</width>
<height>212</height>
<codetext>// 変数
JButton run_button; int run_mode = 0;
JTextField c_field, a_field, r_field, d_field;
int[] mem_r, mem_a, mem_c, mem_d;
int reg_r, reg_a, reg_c, reg_d, reg_h, reg_m, reg_l; 
JLabel io_label, pointer_label, ret_label, st_label;
JLabel ld_label, ldh_label, ldm_label, ldl_label;
JTextArea message_area, disp;
JTextField clock_field; int clock=0;
JTextField interval_field; int interval=1000;
JTextField address_field; int address;
JTextField no_field, name_field, start_field, end_field;
JTextField cmd_line;
JTextField break_field;int break_adrs = 0;
JTextField entry_field;
static final int AD_SIZE = 0x1000000;
int is_break;

 int KeyCode=0, KeyCode0 = 0x3f, PrtData=0xff;
 int KeyAck = 0;
 boolean      is_gets = false;
 int list_no = 0;

String edit_command=&quot;&quot;; // コンパイラのソースファイルを編集するコマンド
String edit_inifile_command=&quot;&quot;; // 設定ファイルを編集するコマンド
String asm_edit_command=&quot;&quot;;// アセンブラのソースファイルを編集するコマンド
String compile_command=&quot;&quot;;// コンパイルコマンド
String assemble_command=&quot;&quot;;//アセンブルコマンド
String terminal_command=&quot;&quot;;// 高速エミュレータ起動コマンド

File ini_file = new File(&quot;card6_sym.ini&quot;);
</codetext>
</codeclip>
<relation>
<ID>_R11</ID>
<pin1name>_A0(_PArun_button)</pin1name>
<pin2name>_X6(_P0)</pin2name>
</relation>
<relation>
<ID>_R16</ID>
<pin1name>_A0(_PAsingle_button)</pin1name>
<pin2name>_X6(_P1)</pin2name>
</relation>
<xobject>
<ID>_X19</ID>
<x0>421</x0>
<y0>278</y0>
<width>235</width>
<height>456</height>
<ID_maker>78</ID_maker>
<objectname>set_variables</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>0</x0>
<y0>429</y0>
<width>164</width>
<height>19</height>
<text>r_field_is(JTextField t)</text>
<px>0</px>
<py>117</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>0</x0>
<y0>450</y0>
<width>163</width>
<height>22</height>
<text>a_field_is(JTextField t)</text>
<px>0</px>
<py>101</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>0</x0>
<y0>474</y0>
<width>148</width>
<height>23</height>
<text>c_field_is(JTextField t)</text>
<px>0</px>
<py>83</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>0</x0>
<y0>500</y0>
<width>150</width>
<height>21</height>
<text>d_field_is(JTextField t)</text>
<px>0</px>
<py>133</py>
</pin>
<pin>
<ID>_P4</ID>
<x0>0</x0>
<y0>155</y0>
<width>146</width>
<height>22</height>
<text>ret_label_is(JLabel l)</text>
<px>0</px>
<py>189</py>
</pin>
<pin>
<ID>_P5</ID>
<x0>1</x0>
<y0>178</y0>
<width>138</width>
<height>24</height>
<text>st_label_is(JLabel l)</text>
<px>0</px>
<py>206</py>
</pin>
<pin>
<ID>_P6</ID>
<x0>4</x0>
<y0>23</y0>
<width>132</width>
<height>22</height>
<text>ld_label_is(JLabel l)</text>
<px>0</px>
<py>224</py>
</pin>
<pin>
<ID>_P7</ID>
<x0>7</x0>
<y0>51</y0>
<width>138</width>
<height>22</height>
<text>ldh_label_is(JLabel l)</text>
<px>0</px>
<py>244</py>
</pin>
<pin>
<ID>_P8</ID>
<x0>9</x0>
<y0>77</y0>
<width>141</width>
<height>23</height>
<text>ldm_label_is(JLabel l)</text>
<px>0</px>
<py>264</py>
</pin>
<pin>
<ID>_P9</ID>
<x0>0</x0>
<y0>102</y0>
<width>143</width>
<height>23</height>
<text>ldl_label_is(JLabel l)</text>
<px>0</px>
<py>281</py>
</pin>
<pin>
<ID>_P10</ID>
<x0>3</x0>
<y0>357</y0>
<width>205</width>
<height>22</height>
<text>message_area_is(JTextArea t)</text>
<px>0</px>
<py>300</py>
</pin>
<pin>
<ID>_P11</ID>
<x0>0</x0>
<y0>226</y0>
<width>184</width>
<height>21</height>
<text>clock_field_is(JTextField t)</text>
<px>0</px>
<py>318</py>
</pin>
<pin>
<ID>_P13</ID>
<x0>0</x0>
<y0>275</y0>
<width>184</width>
<height>21</height>
<text>start_field_is(JTextField t)</text>
<px>0</px>
<py>359</py>
</pin>
<pin>
<ID>_P14</ID>
<x0>0</x0>
<y0>298</y0>
<width>167</width>
<height>27</height>
<text>end_field_is(JTextField t)</text>
<px>0</px>
<py>378</py>
</pin>
<pin>
<ID>_P15</ID>
<x0>3</x0>
<y0>326</y0>
<width>211</width>
<height>27</height>
<text>interval_field_is(JTextField t)</text>
<px>0</px>
<py>397</py>
</pin>
<pin>
<ID>_P16</ID>
<x0>800</x0>
<y0>71</y0>
<width>52</width>
<height>25</height>
<text>start()</text>
<px>140</px>
<py>5</py>
</pin>
<pin>
<ID>_P17</ID>
<x0>0</x0>
<y0>400</y0>
<width>204</width>
<height>27</height>
<text>address_field_is(JTextField t)</text>
<px>0</px>
<py>67</py>
</pin>
<operation>
<ID>_O18</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>871</x0>
<y0>7</y0>
<width>115</width>
<height>48</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>30</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>// 初期化する



memory_windows = new Vector();
mem_c = new int[AD_SIZE];
mem_a = new int[AD_SIZE];
mem_r = new int[AD_SIZE];
mem_d = new int[AD_SIZE];

// すべてのメモリにdata命令をセットして読み書きできるようにしておく
for( int adrs = 0; adrs &lt; AD_SIZE; adrs++ ){
  mem_c[ adrs ] = DATA_INS;
  mem_a[ adrs ] = 0;
  mem_r[ adrs ] = 0;
  mem_d[ adrs ] = 0;
}

// 各ボタンを押した時に実行されるコマンドを設定する
String line;
try{

BufferedReader din = new BufferedReader( new FileReader(ini_file));
while( ((line=din.readLine())!=null)){
if(&quot;.entry&quot;.equals(line) )    break;
if( &quot;.break&quot;.equals(line) )   break;
if( &quot;.watch&quot;.equals(line) )   break;
if( line.startsWith(&quot;edit_command=&quot;)) edit_command=line.substring(13);
if( line.startsWith(&quot;edit_inifile_command=&quot;)) edit_inifile_command=line.substring(21);
if( line.startsWith(&quot;asm_edit_command=&quot;)) asm_edit_command=line.substring(17);
if( line.startsWith(&quot;compile_command=&quot;)) compile_command=line.substring(16);
if( line.startsWith(&quot;assemble_command=&quot;)) assemble_command=line.substring(17);
if( line.startsWith(&quot;terminal_command=&quot;)) terminal_command=line.substring(17);
}
if(&quot;.entry&quot;.equals(line)){
  if( (line=din.readLine()) != null) {
    entry_field.setText(line);
    line=din.readLine();
  }
}
if( &quot;.break&quot;.equals(line) ){
  if( (line=din.readLine()) != null) {
    break_field.setText(line);
    line=din.readLine();
  }
}
if( &quot;.watch&quot;.equals(line) ){
  while(true){
    String name,start,end;
    if((name=din.readLine()) == null) break;
    if((start=din.readLine()) == null) break;
    if((end=din.readLine()) == null) break;
    int s = Integer.parseInt(start);
    int e = Integer.parseInt(end);
    memory_windows.add( new memory_window( name, s, e ) );
  }
}
din.close();
} catch( Exception e ){}
</codetext>
</operation>
<relation>
<ID>_R19</ID>
<pin1name>_P16</pin1name>
<pin2name>_O18</pin2name>
</relation>
<pin>
<ID>_P20</ID>
<x0>1</x0>
<y0>125</y0>
<width>161</width>
<height>26</height>
<text>pointer_label_is(JLabel l)</text>
<px>0</px>
<py>171</py>
</pin>
<operation>
<ID>_O21</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>160</x0>
<y0>3</y0>
<width>121</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ld_label = l;
</codetext>
</operation>
<relation>
<ID>_R22</ID>
<pin1name>_P6</pin1name>
<pin2name>_O21</pin2name>
</relation>
<operation>
<ID>_O23</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>299</x0>
<y0>23</y0>
<width>121</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ldh_label = l;
</codetext>
</operation>
<operation>
<ID>_O26</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>429</x0>
<y0>50</y0>
<width>105</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ldm_label = l;
</codetext>
</operation>
<operation>
<ID>_O27</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>541</x0>
<y0>77</y0>
<width>98</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ldl_label = l;
</codetext>
</operation>
<relation>
<ID>_R28</ID>
<pin1name>_P7</pin1name>
<pin2name>_O23</pin2name>
</relation>
<relation>
<ID>_R29</ID>
<pin1name>_P8</pin1name>
<pin2name>_O26</pin2name>
</relation>
<relation>
<ID>_R30</ID>
<pin1name>_P9</pin1name>
<pin2name>_O27</pin2name>
</relation>
<operation>
<ID>_O31</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>645</x0>
<y0>105</y0>
<width>130</width>
<height>48</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>pointer_label = l;
</codetext>
</operation>
<relation>
<ID>_R32</ID>
<pin1name>_P20</pin1name>
<pin2name>_O31</pin2name>
</relation>
<operation>
<ID>_O33</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>779</x0>
<y0>127</y0>
<width>111</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>ret_label = l;
</codetext>
</operation>
<relation>
<ID>_R34</ID>
<pin1name>_P4</pin1name>
<pin2name>_O33</pin2name>
</relation>
<operation>
<ID>_O35</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>895</x0>
<y0>150</y0>
<width>100</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>st_label = l;
</codetext>
</operation>
<relation>
<ID>_R36</ID>
<pin1name>_P5</pin1name>
<pin2name>_O35</pin2name>
</relation>
<operation>
<ID>_O37</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>196</x0>
<y0>200</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>clock_field = t;
</codetext>
</operation>
<relation>
<ID>_R38</ID>
<pin1name>_P11</pin1name>
<pin2name>_O37</pin2name>
</relation>
<operation>
<ID>_O41</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>453</x0>
<y0>246</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>start_field = t;
</codetext>
</operation>
<relation>
<ID>_R42</ID>
<pin1name>_P13</pin1name>
<pin2name>_O41</pin2name>
</relation>
<operation>
<ID>_O43</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>580</x0>
<y0>273</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>end_field = t;
</codetext>
</operation>
<relation>
<ID>_R44</ID>
<pin1name>_P14</pin1name>
<pin2name>_O43</pin2name>
</relation>
<operation>
<ID>_O45</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>709</x0>
<y0>301</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>interval_field = t;
</codetext>
</operation>
<relation>
<ID>_R46</ID>
<pin1name>_P15</pin1name>
<pin2name>_O45</pin2name>
</relation>
<operation>
<ID>_O47</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>856</x0>
<y0>331</y0>
<width>139</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextArea t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>message_area = t;
</codetext>
</operation>
<relation>
<ID>_R48</ID>
<pin1name>_P10</pin1name>
<pin2name>_O47</pin2name>
</relation>
<operation>
<ID>_O49</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>233</x0>
<y0>376</y0>
<width>137</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>address_field = t;
</codetext>
</operation>
<relation>
<ID>_R50</ID>
<pin1name>_P17</pin1name>
<pin2name>_O49</pin2name>
</relation>
<operation>
<ID>_O51</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>375</x0>
<y0>400</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r_field = t;
</codetext>
</operation>
<relation>
<ID>_R52</ID>
<pin1name>_P0</pin1name>
<pin2name>_O51</pin2name>
</relation>
<operation>
<ID>_O53</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>510</x0>
<y0>423</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>a_field = t;
</codetext>
</operation>
<relation>
<ID>_R54</ID>
<pin1name>_P1</pin1name>
<pin2name>_O53</pin2name>
</relation>
<operation>
<ID>_O55</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>641</x0>
<y0>447</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>c_field = t;
</codetext>
</operation>
<relation>
<ID>_R56</ID>
<pin1name>_P2</pin1name>
<pin2name>_O55</pin2name>
</relation>
<operation>
<ID>_O57</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>772</x0>
<y0>473</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>d_field = t;
</codetext>
</operation>
<relation>
<ID>_R58</ID>
<pin1name>_P3</pin1name>
<pin2name>_O57</pin2name>
</relation>
<pin>
<ID>_P59</ID>
<x0>0</x0>
<y0>588</y0>
<width>169</width>
<height>22</height>
<text>run_button_is(JButton b)</text>
<px>0</px>
<py>32</py>
</pin>
<operation>
<ID>_O60</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>364</x0>
<y0>560</y0>
<width>123</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>88</inpinwidth>
<inpinheight>19</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>run_button = b;
</codetext>
</operation>
<relation>
<ID>_R61</ID>
<pin1name>_P59</pin1name>
<pin2name>_O60</pin2name>
</relation>
<pin>
<ID>_P62</ID>
<x0>0</x0>
<y0>248</y0>
<width>184</width>
<height>23</height>
<text>name_field_is(JTextField t)</text>
<px>0</px>
<py>338</py>
</pin>
<operation>
<ID>_O63</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>326</x0>
<y0>223</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>name_field = t;
</codetext>
</operation>
<relation>
<ID>_R64</ID>
<pin1name>_P62</pin1name>
<pin2name>_O63</pin2name>
</relation>
<pin>
<ID>_P65</ID>
<x0>0</x0>
<y0>616</y0>
<width>140</width>
<height>23</height>
<text>io_label_is(JLabel l)</text>
<px>0</px>
<py>152</py>
</pin>
<operation>
<ID>_O66</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>493</x0>
<y0>589</y0>
<width>100</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JLabel l)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>io_label = l;
</codetext>
</operation>
<relation>
<ID>_R67</ID>
<pin1name>_P65</pin1name>
<pin2name>_O66</pin2name>
</relation>
<pin>
<ID>_P68</ID>
<x0>0</x0>
<y0>558</y0>
<width>182</width>
<height>21</height>
<text>break_field_is(JTextField t)</text>
<px>0</px>
<py>436</py>
</pin>
<operation>
<ID>_O69</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>225</x0>
<y0>530</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>break_field = t;
</codetext>
</operation>
<relation>
<ID>_R70</ID>
<pin1name>_P68</pin1name>
<pin2name>_O69</pin2name>
</relation>
<pin>
<ID>_P71</ID>
<x0>543</x0>
<y0>23</y0>
<width>60</width>
<height>30</height>
<text>init()</text>
<px>0</px>
<py>50</py>
</pin>
<operation>
<ID>_O72</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>622</x0>
<y0>1</y0>
<width>216</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>32</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>166</outpinx0>
<outpiny0>31</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 設定ファイルを更新・編集する

try{

BufferedWriter dout = new BufferedWriter( new FileWriter(ini_file));
dout.write(&quot;edit_command=&quot;+edit_command+&quot;\n&quot;);
dout.write(&quot;edit_inifile_command=&quot;+edit_inifile_command+&quot;\n&quot;);
dout.write(&quot;asm_edit_command=&quot;+asm_edit_command+&quot;\n&quot;);
dout.write(&quot;compile_command=&quot;+compile_command+&quot;\n&quot;);
dout.write(&quot;assemble_command=&quot;+assemble_command+&quot;\n&quot;);
dout.write(&quot;terminal_command=&quot;+terminal_command+&quot;\n&quot;);
dout.write(&quot;.entry\n&quot;);
dout.write(entry_field.getText()+&quot;\n&quot;);
dout.write(&quot;.break\n&quot;);
dout.write(break_field.getText()+&quot;\n&quot;);
dout.write(&quot;.watch\n&quot;);
int nn = memory_windows.size();
for( int i = 0;i &lt; nn; i++ ){
  memory_window w = (memory_window)(memory_windows.get(i));
  dout.write( w.name+&quot;\n&quot;+w.start+&quot;\n&quot;+w.end+&quot;\n&quot;);
}
dout.close();
} catch( Exception e ){}

exec_command(edit_inifile_command);
</codetext>
</operation>
<relation>
<ID>_R73</ID>
<pin1name>_P71</pin1name>
<pin2name>_O72</pin2name>
</relation>
<relation>
<ID>_R74</ID>
<pin1name>_O72</pin1name>
<pin2name>_O18</pin2name>
</relation>
<pin>
<ID>_P75</ID>
<x0>506</x0>
<y0>539</y0>
<width>176</width>
<height>27</height>
<text>entry_field_is(JTextField t)</text>
<px>1</px>
<py>416</py>
</pin>
<operation>
<ID>_O76</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>765</x0>
<y0>566</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>entry_field = t;
</codetext>
</operation>
<relation>
<ID>_R77</ID>
<pin1name>_P75</pin1name>
<pin2name>_O76</pin2name>
</relation>
</xobject>
<relation>
<ID>_R33</ID>
<pin1name>_A0(_Pmessage_area)</pin1name>
<pin2name>_X19(_P10)</pin2name>
</relation>
<relation>
<ID>_R34</ID>
<pin1name>_A0(_Pclock_field)</pin1name>
<pin2name>_X19(_P11)</pin2name>
</relation>
<relation>
<ID>_R36</ID>
<pin1name>_A0(_Pstart_field)</pin1name>
<pin2name>_X19(_P13)</pin2name>
</relation>
<relation>
<ID>_R37</ID>
<pin1name>_A0(_Pend_field)</pin1name>
<pin2name>_X19(_P14)</pin2name>
</relation>
<relation>
<ID>_R38</ID>
<pin1name>_A0(_Pinterval_field)</pin1name>
<pin2name>_X19(_P15)</pin2name>
</relation>
<codeclip>
<ID>_C40</ID>
<x0>681</x0>
<y0>358</y0>
<width>236</width>
<height>164</height>
<codetext>// メモリウィンドウ
Vector memory_windows;
class memory_window{
  String name;
  int start;
  int end;
  memory_window( String n, int s, int e ){
    name = n; start=s; end=e;
  }
}
</codetext>
</codeclip>
<xobject>
<ID>_X42</ID>
<x0>422</x0>
<y0>175</y0>
<width>219</width>
<height>98</height>
<ID_maker>14</ID_maker>
<objectname>memory_edit</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>117</x0>
<y0>235</y0>
<width>142</width>
<height>26</height>
<text>set_address(String s)</text>
<px>0</px>
<py>79</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>108</x0>
<y0>170</y0>
<width>60</width>
<height>30</height>
<text>inc()</text>
<px>0</px>
<py>28</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>121</x0>
<y0>313</y0>
<width>60</width>
<height>30</height>
<text>dec()</text>
<px>0</px>
<py>45</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>101</x0>
<y0>109</y0>
<width>112</width>
<height>25</height>
<text>mem_set()</text>
<px>0</px>
<py>61</py>
</pin>
<operation>
<ID>_O4</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>324</x0>
<y0>241</y0>
<width>163</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>28</inpiny0>
<inpinwidth>78</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// メモリのデータを表示


address = Integer.parseInt( s, 16 );

// レジスタ表示処理
c_field.setText(hex2(mem_c[address]));
a_field.setText(hex6(mem_a[address]));
r_field.setText(hex6(mem_r[address]));
d_field.setText(hex2(mem_d[address]));

update_control();
</codetext>
</operation>
<relation>
<ID>_R5</ID>
<pin1name>_P0</pin1name>
<pin2name>_O4</pin2name>
</relation>
<operation>
<ID>_O6</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>307</x0>
<y0>158</y0>
<width>263</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// アドレスを+1してメモリのデータを表示

address++;
if( address &gt; 0xffffff ) address-=0xffffff;

// レジスタ表示処理
address_field.setText(hex6(address));
c_field.setText(hex2(mem_c[address]));
a_field.setText(hex6(mem_a[address]));
r_field.setText(hex6(mem_r[address]));
d_field.setText(hex2(mem_d[address]));

update_control();
</codetext>
</operation>
<relation>
<ID>_R7</ID>
<pin1name>_P1</pin1name>
<pin2name>_O6</pin2name>
</relation>
<operation>
<ID>_O9</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>305</x0>
<y0>311</y0>
<width>268</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// アドレスを-1してメモリのデータを表示

address--;
if( address &lt; 0 ) address=0;

// レジスタ表示処理
address_field.setText(hex6(address));
c_field.setText(hex2(mem_c[address]));
a_field.setText(hex6(mem_a[address]));
r_field.setText(hex6(mem_r[address]));
d_field.setText(hex2(mem_d[address]));

update_control();
</codetext>
</operation>
<relation>
<ID>_R10</ID>
<pin1name>_P2</pin1name>
<pin2name>_O9</pin2name>
</relation>
<operation>
<ID>_O11</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>303</x0>
<y0>94</y0>
<width>267</width>
<height>43</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 表示されているデータをメモリに書き込む

address = Integer.parseInt( address_field.getText(), 16 );

mem_c[address] = Integer.parseInt( c_field.getText(), 16 );
mem_a[address] = Integer.parseInt( a_field.getText(), 16 );
mem_r[address] = Integer.parseInt( r_field.getText(), 16 );
mem_d[address] = Integer.parseInt( d_field.getText(), 16 );


update_control();
</codetext>
</operation>
<relation>
<ID>_R12</ID>
<pin1name>_P3</pin1name>
<pin2name>_O11</pin2name>
</relation>
</xobject>
<relation>
<ID>_R44</ID>
<pin1name>_A0(_PAinc_addr)</pin1name>
<pin2name>_X42(_P1)</pin2name>
</relation>
<relation>
<ID>_R45</ID>
<pin1name>_A0(_PAdec_addr)</pin1name>
<pin2name>_X42(_P2)</pin2name>
</relation>
<relation>
<ID>_R46</ID>
<pin1name>_A0(_PAmem_set)</pin1name>
<pin2name>_X42(_P3)</pin2name>
</relation>
<codeclip>
<ID>_C47</ID>
<x0>680</x0>
<y0>536</y0>
<width>230</width>
<height>35</height>
<codetext>// 長さが6文字の16進数文字列を返す
public String hex6( int i ){
  String s = Integer.toHexString(i);
  int l = s.length();
  if( l == 1 ) return &quot;00000&quot;+s;
  if( l == 2 ) return &quot;0000&quot;+s;
  if( l == 3 ) return &quot;000&quot;+s;
  if( l == 4 ) return &quot;00&quot;+s;
  if( l == 5 ) return &quot;0&quot;+s;
  return s;
}
</codetext>
</codeclip>
<codeclip>
<ID>_C48</ID>
<x0>680</x0>
<y0>583</y0>
<width>229</width>
<height>34</height>
<codetext>// 長さが2文字の16進数文字列を返す
public String hex2( int i ){
  String s = Integer.toHexString(i);
  int l = s.length();
  if( l ==1 ) return &quot;0&quot;+s;
  return s;
}
</codetext>
</codeclip>
<codeclip>
<ID>_C50</ID>
<x0>681</x0>
<y0>216</y0>
<width>251</width>
<height>136</height>
<codetext>//コマンドレジスタのビット割り当て
static final int IO=128;
static final int POINTER=64;
static final int RET=32;
static final int ST=16;
static final int LD=8;
static final int LDH=4;
static final int LDM=2;
static final int LDL=1;

static final int DATA_INS = 0xe7; // data命令
</codetext>
</codeclip>
<relation>
<ID>_R53</ID>
<pin1name>_A0(_Prun_button)</pin1name>
<pin2name>_X19(_P59)</pin2name>
</relation>
<プロパティ>
<ID>properties</ID>
<LookandFeel>javax.swing.plaf.metal.MetalLookAndFeel</LookandFeel>
<MainWinx0>0</MainWinx0>
<MainWiny0>0</MainWiny0>
<MainWinWidth>1024</MainWinWidth>
<MainWinHeight>740</MainWinHeight>
<MesgWinx0>0</MesgWinx0>
<MesgWiny0>0</MesgWiny0>
<MesgWinWidth>1024</MesgWinWidth>
<MesgWinHeight>745</MesgWinHeight>
<FileWinx0>36</FileWinx0>
<FileWiny0>478</FileWiny0>
<FileWinWidth>578</FileWinWidth>
<FileWinHeight>262</FileWinHeight>
<EditWinx0>347</EditWinx0>
<EditWiny0>0</EditWiny0>
<EditWinWidth>676</EditWinWidth>
<EditWinHeight>541</EditWinHeight>
<PropWinx0>1</PropWinx0>
<PropWiny0>1</PropWiny0>
<PropWinWidth>615</PropWinWidth>
<PropWinHeight>448</PropWinHeight>
<DividerLocation1>2</DividerLocation1>
<DividerLocation2>2</DividerLocation2>
<ToolBarVisible>1</ToolBarVisible>
<ViewSourceAtCompile>0</ViewSourceAtCompile>
<NoSourceCreate>0</NoSourceCreate>
<JavaEditCommand>geany</JavaEditCommand>
<JavaViewCommand></JavaViewCommand>
<HelpCommand>xdg-open ./help/manual.html</HelpCommand>
<ApplicationType>0</ApplicationType>
<CompileCommand0>./compile_java</CompileCommand0>
<RunCommand0>./run_java</RunCommand0>
<GUIDesignerCommand0>java -jar guidsin.jar -java</GUIDesignerCommand0>
<ImportFiles0> import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.geom.*;
import java.awt.print.*;
import javax.swing.border.*;
import javax.swing.filechooser.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.image.BufferedImage;
import javax.sound.sampled.*;

class Starter{
  public static void main( String args[] ){
    %AppName% ap = new %AppName%();
    ap.ARGS = args;
    ap.Start();
  }
}
</ImportFiles0>
<ProgramStartupCode0> String[] ARGS;
</ProgramStartupCode0>
<NativeHelpCommand0></NativeHelpCommand0>
<CompileCommand1></CompileCommand1>
<RunCommand1></RunCommand1>
<GUIDesignerCommand1>java -jar guidsin.jar -applet</GUIDesignerCommand1>
<ImportFiles1> import java.awt.*;
 import java.awt.event.*;
 import java.applet.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
 public class javatext extends Applet {
   %AppName% ap;
   public void init() {
     ap = new %AppName%();
     ap.APPLET = this;
     ap.Start();
   }
 }
</ImportFiles1>
<ProgramStartupCode1> Applet APPLET;
</ProgramStartupCode1>
<NativeHelpCommand1></NativeHelpCommand1>
<CompileCommand2></CompileCommand2>
<RunCommand2></RunCommand2>
<GUIDesignerCommand2></GUIDesignerCommand2>
<ImportFiles2>#include &lt;stdio.h&gt;

void Startup();
</ImportFiles2>
<ProgramStartupCode2>int main(){
 Startup();
 %AppName%::Start();
 }
</ProgramStartupCode2>
<NativeHelpCommand2></NativeHelpCommand2>
<CompileCommand3></CompileCommand3>
<RunCommand3></RunCommand3>
<GUIDesignerCommand3>java -jar guidsin.jar -cpp</GUIDesignerCommand3>
<ImportFiles3>#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;math.h&gt;
#include &quot;Ekagen.h&quot;
void Startup();
</ImportFiles3>
<ProgramStartupCode3>void Emain(){
Startup();
%AppName%::Start();
}
</ProgramStartupCode3>
<NativeHelpCommand3></NativeHelpCommand3>
<MoveStep>8</MoveStep>
<ImageEditCommand></ImageEditCommand>
<CompilerFileName>javac.exe</CompilerFileName>
<CompileCommand4>./compile_android Test com example test</CompileCommand4>
<RunCommand4>./run_android Test com example test</RunCommand4>
<GUIDesignerCommand4>java -jar guidsin.jar -android</GUIDesignerCommand4>
<ImportFiles4>package com.example.test;

import android.os.Bundle;
import android.app.Activity;
import android.view.View;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.widget.Button;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.widget.EditText;
import android.text.SpannableStringBuilder;
import android.text.TextWatcher;
import android.text.Editable;
import android.graphics.Matrix;
import android.graphics.Typeface;
import android.graphics.RectF;
import android.graphics.BitmapFactory;
import java.io.*;
 import java.net.*;
import java.util.*;
import java.text.SimpleDateFormat;
import android.media.MediaPlayer;
import android.os.Handler;
import android.content.res.Configuration;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.app.Activity;
import android.graphics.Color;

import android.widget.AbsoluteLayout;
import android.widget.*;
import android.view.Gravity;
import android.view.View.OnClickListener;

import android.hardware.Camera;

public class HelloWorld extends Activity {
  public void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    %AppName% ap = new %AppName%();
    ap.ACTIVITY = this;
    ap.Start();
  }
}
</ImportFiles4>
<ProgramStartupCode4>Activity ACTIVITY;
</ProgramStartupCode4>
<NativeHelpCommand4>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.example.test&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot; &gt;

    
    
  &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.usb.host&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt;
  &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;

  &lt;uses-sdk android:minSdkVersion=&quot;3&quot; android:targetSdkVersion=&quot;21&quot;/&gt;
  
 
    &lt;application android:label=&quot;@string/app_name&quot; &gt;
        &lt;activity
            android:name=&quot;HelloWorld&quot;
            android:label=&quot;@string/app_name&quot; &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</NativeHelpCommand4>
<HtmlEditCommand></HtmlEditCommand>
<CompileCommand5></CompileCommand5>
<RunCommand5></RunCommand5>
<GUIDesignerCommand5></GUIDesignerCommand5>
<ImportFiles5></ImportFiles5>
<ProgramStartupCode5>gosub @_PSTART
end
</ProgramStartupCode5>
<NativeHelpCommand5></NativeHelpCommand5>
<NoOptimizePin>0</NoOptimizePin>
<CompileCommand6>./compile_c</CompileCommand6>
<RunCommand6>./run_c</RunCommand6>
<GUIDesignerCommand6></GUIDesignerCommand6>
<ImportFiles6>#include &lt;setjmp.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;math.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#include &lt;X11/Xlib.h&gt;
#include &lt;X11/Xutil.h&gt;
#include &lt;X11/Xlocale.h&gt; /* ロケール用ヘッダーファイル */
#include &lt;X11/xpm.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;
#include &lt;termios.h&gt;
#include &lt;errno.h&gt;
</ImportFiles6>
<ProgramStartupCode6>int ARGC; char** ARGV;
int main( int argc, char** argv ){
  ARGC=argc;
  ARGV=argv;
  _PSTART();
}
</ProgramStartupCode6>
<NativeHelpCommand6></NativeHelpCommand6>
<IDF_LocalVariable5>\</IDF_LocalVariable5>
<IDF_LocalVariable7>\</IDF_LocalVariable7>
<CompileCommand7></CompileCommand7>
<RunCommand7></RunCommand7>
<GUIDesignerCommand7></GUIDesignerCommand7>
<ImportFiles7></ImportFiles7>
<ProgramStartupCode7></ProgramStartupCode7>
<NativeHelpCommand7></NativeHelpCommand7>
<OpenCompileDialog>0</OpenCompileDialog>
<ScriptExecCommand></ScriptExecCommand>
<RunCommand8></RunCommand8>
<CompileCommand9></CompileCommand9>
<RunCommand9></RunCommand9>
<GUIDesignerCommand9></GUIDesignerCommand9>
<ImportFiles9></ImportFiles9>
<ProgramStartupCode9></ProgramStartupCode9>
<NativeHelpCommand9></NativeHelpCommand9>
</プロパティ>
<relation>
<ID>_R60</ID>
<pin1name>_A0(_Pr_reg)</pin1name>
<pin2name>_X19(_P0)</pin2name>
</relation>
<relation>
<ID>_R61</ID>
<pin1name>_A0(_Pa_reg)</pin1name>
<pin2name>_X19(_P1)</pin2name>
</relation>
<relation>
<ID>_R62</ID>
<pin1name>_A0(_Pc_reg)</pin1name>
<pin2name>_X19(_P2)</pin2name>
</relation>
<relation>
<ID>_R63</ID>
<pin1name>_A0(_Pd_reg)</pin1name>
<pin2name>_X19(_P3)</pin2name>
</relation>
<relation>
<ID>_R64</ID>
<pin1name>_A0(_Ppointer_flg)</pin1name>
<pin2name>_X19(_P20)</pin2name>
</relation>
<relation>
<ID>_R65</ID>
<pin1name>_A0(_Preturn_flg)</pin1name>
<pin2name>_X19(_P4)</pin2name>
</relation>
<relation>
<ID>_R66</ID>
<pin1name>_A0(_Pstore_flg)</pin1name>
<pin2name>_X19(_P5)</pin2name>
</relation>
<relation>
<ID>_R67</ID>
<pin1name>_A0(_Pld_flg)</pin1name>
<pin2name>_X19(_P6)</pin2name>
</relation>
<relation>
<ID>_R68</ID>
<pin1name>_A0(_Pldh_flg)</pin1name>
<pin2name>_X19(_P7)</pin2name>
</relation>
<relation>
<ID>_R69</ID>
<pin1name>_A0(_Pldm_flg)</pin1name>
<pin2name>_X19(_P8)</pin2name>
</relation>
<relation>
<ID>_R70</ID>
<pin1name>_A0(_Pldl_flg)</pin1name>
<pin2name>_X19(_P9)</pin2name>
</relation>
<relation>
<ID>_R71</ID>
<pin1name>_A0(_PAadd_list)</pin1name>
<pin2name>_X6(_P2)</pin2name>
</relation>
<relation>
<ID>_R72</ID>
<pin1name>_A0(_PAdel_list)</pin1name>
<pin2name>_X6(_P3)</pin2name>
</relation>
<relation>
<ID>_R73</ID>
<pin1name>_A0(_PAhome_list)</pin1name>
<pin2name>_X6(_P32)</pin2name>
</relation>
<relation>
<ID>_R74</ID>
<pin1name>_A0(_PAinc_list)</pin1name>
<pin2name>_X6(_P33)</pin2name>
</relation>
<relation>
<ID>_R75</ID>
<pin1name>_A0(_PAdec_list)</pin1name>
<pin2name>_X6(_P34)</pin2name>
</relation>
<relation>
<ID>_R77</ID>
<pin1name>_A0(_Paddr_reg)</pin1name>
<pin2name>_X19(_P17)</pin2name>
</relation>
<relation>
<ID>_R78</ID>
<pin1name>_A0(_Pname_field)</pin1name>
<pin2name>_X19(_P62)</pin2name>
</relation>
<xobject>
<ID>_X79</ID>
<x0>0</x0>
<y0>626</y0>
<width>104</width>
<height>168</height>
<ID_maker>18</ID_maker>
<objectname>command</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>107</x0>
<y0>302</y0>
<width>60</width>
<height>30</height>
<text>compile()</text>
<px>1</px>
<py>36</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>161</x0>
<y0>69</y0>
<width>60</width>
<height>30</height>
<text>clr()</text>
<px>2</px>
<py>57</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>111</x0>
<y0>350</y0>
<width>74</width>
<height>29</height>
<text>assemble()</text>
<px>0</px>
<py>77</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>138</x0>
<y0>205</y0>
<width>93</width>
<height>24</height>
<text>asm_edit()</text>
<px>0</px>
<py>94</py>
</pin>
<pin>
<ID>_P4</ID>
<x0>117</x0>
<y0>439</y0>
<width>85</width>
<height>25</height>
<text>terminal()</text>
<px>0</px>
<py>113</py>
</pin>
<pin>
<ID>_P5</ID>
<x0>121</x0>
<y0>139</y0>
<width>60</width>
<height>30</height>
<text>edit()</text>
<px>0</px>
<py>135</py>
</pin>
<operation>
<ID>_O6</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>284</x0>
<y0>42</y0>
<width>155</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>30</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// レジスタ等のクリア


 address_field.setText(&quot;000000&quot;);
 c_field.setText(&quot;ff&quot;);
 a_field.setText(&quot;000000&quot;);
 r_field.setText(&quot;000000&quot;);
 d_field.setText(&quot;00&quot;);
 clock_field.setText(&quot;0&quot;);
 message_area.setText(&quot;&quot;);
 disp.setText(&quot;&quot;);
</codetext>
</operation>
<relation>
<ID>_R7</ID>
<pin1name>_P1</pin1name>
<pin2name>_O6</pin2name>
</relation>
<operation>
<ID>_O8</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>320</x0>
<y0>134</y0>
<width>234</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(edit_command);


</codetext>
</operation>
<relation>
<ID>_R9</ID>
<pin1name>_P5</pin1name>
<pin2name>_O8</pin2name>
</relation>
<operation>
<ID>_O10</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>318</x0>
<y0>213</y0>
<width>263</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(asm_edit_command);


</codetext>
</operation>
<operation>
<ID>_O11</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>317</x0>
<y0>291</y0>
<width>234</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(compile_command);


try{

BufferedReader din = new BufferedReader( new FileReader( &quot;r.out&quot; ) );

while(true){
  String line;
  int adrs,data;
  if((line=din.readLine()) == null )  break;
  adrs = Integer.parseInt(line);
  if((line=din.readLine()) == null )  break;
  data = Integer.parseInt(line);
  mem_c[adrs] = DATA_INS; // data命令
  mem_a[adrs] = 0;
  mem_r[adrs] = 0;
  mem_d[adrs] = data;
}

din.close();


} catch( IOException ie ){message_area.append(&quot;vm code load error!\n&quot;);}
</codetext>
</operation>
<operation>
<ID>_O12</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>317</x0>
<y0>363</y0>
<width>244</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(assemble_command);


try{

BufferedReader din = new BufferedReader( new FileReader( &quot;a.out&quot; ) );

while(true){
  String line;
  int adrs,c,a,r,d;
  if((line=din.readLine()) == null )  break;
  adrs = Integer.parseInt(line);
  if((line=din.readLine()) == null )  break;
  c = Integer.parseInt(line);
  mem_c[adrs] = c;
  if((line=din.readLine()) == null )  break;
  a = Integer.parseInt(line);
  mem_a[adrs] = a;
  if((line=din.readLine()) == null )  break;
  r = Integer.parseInt(line);
  mem_r[adrs] = r;
  if((line=din.readLine()) == null )  break;
  d = Integer.parseInt(line);
  mem_d[adrs] = d;
}

din.close();


} catch( IOException ie ){message_area.append(&quot;native code load error!\n&quot;);}
</codetext>
</operation>
<operation>
<ID>_O13</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>316</x0>
<y0>441</y0>
<width>249</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(terminal_command);


</codetext>
</operation>
<relation>
<ID>_R14</ID>
<pin1name>_P3</pin1name>
<pin2name>_O10</pin2name>
</relation>
<relation>
<ID>_R15</ID>
<pin1name>_P0</pin1name>
<pin2name>_O11</pin2name>
</relation>
<relation>
<ID>_R16</ID>
<pin1name>_P2</pin1name>
<pin2name>_O12</pin2name>
</relation>
<relation>
<ID>_R17</ID>
<pin1name>_P4</pin1name>
<pin2name>_O13</pin2name>
</relation>
</xobject>
<relation>
<ID>_R82</ID>
<pin1name>_A0(_PAcompile_button)</pin1name>
<pin2name>_X79(_P0)</pin2name>
</relation>
<relation>
<ID>_R83</ID>
<pin1name>_A0(_PAclr_button)</pin1name>
<pin2name>_X79(_P1)</pin2name>
</relation>
<relation>
<ID>_R84</ID>
<pin1name>_A0(_PAasm_button)</pin1name>
<pin2name>_X79(_P2)</pin2name>
</relation>
<relation>
<ID>_R85</ID>
<pin1name>_A0(_PAasm_edit_button)</pin1name>
<pin2name>_X79(_P3)</pin2name>
</relation>
<relation>
<ID>_R87</ID>
<pin1name>_A0(_PAedit_button)</pin1name>
<pin2name>_X79(_P5)</pin2name>
</relation>
<operation>
<ID>_O88</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>420</x0>
<y0>742</y0>
<width>115</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>103</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>cmd_line = t;


cmd_line.getDocument().addDocumentListener(listener = new keyinput_listener());
</codetext>
</operation>
<relation>
<ID>_R89</ID>
<pin1name>_A0(_Pcmd_field)</pin1name>
<pin2name>_O88</pin2name>
</relation>
<operation>
<ID>_O90</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>665</x0>
<y0>777</y0>
<width>118</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextArea t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>103</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>disp = t;
</codetext>
</operation>
<relation>
<ID>_R91</ID>
<pin1name>_A0(_Pdisp_area)</pin1name>
<pin2name>_O90</pin2name>
</relation>
<operation>
<ID>_O92</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>541</x0>
<y0>759</y0>
<width>115</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>75</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>KeyCode = 10;
</codetext>
</operation>
<relation>
<ID>_R93</ID>
<pin1name>_A0(_PAcmd_field)</pin1name>
<pin2name>_O92</pin2name>
</relation>
<codeclip>
<ID>_C94</ID>
<x0>681</x0>
<y0>631</y0>
<width>294</width>
<height>40</height>
<codetext>keyinput_listener listener;
class keyinput_listener implements DocumentListener{

  String s;
  boolean allow = true;
  public void caretPositionChanged(InputMethodEvent e){}
  public void changedUpdate(DocumentEvent e){}//属性が変更されたときの処理
  public void insertUpdate(DocumentEvent e){
    KeyCode = 0;
    if(!is_gets){
      if( allow &amp;&amp; (s = cmd_line.getText()).length() &gt; 0 ){
        allow = false;
        KeyCode = (int)(byte)s.charAt(0);
        allow = true;
         }
      }
   }
  public void removeUpdate(DocumentEvent e){}//ドキュメントから削除されたときの処理

}
</codetext>
</codeclip>
<operation>
<ID>_O95</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>789</x0>
<y0>680</y0>
<width>172</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>30</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// メモリと周辺装置の同期


if( KeyCode != 0 ){
  if( KeyCode == &apos;\n&apos; ) KeyCode0 = 61;
  else if( KeyCode == &apos;\r&apos; ) KeyCode0 = 61;
  else if( KeyCode &lt; 32 )  KeyCode0 = 62;
  else if( KeyCode &gt;= 0x20 &amp;&amp; KeyCode &lt;= 0x5f ) KeyCode0 = KeyCode - 0x20;
  else if( KeyCode &gt;= &apos;a&apos; &amp;&amp; KeyCode &lt;= &apos;z&apos; )   KeyCode0 = KeyCode - &apos;a&apos; + &apos;A&apos; - &apos; &apos;;
  KeyCode = 0;
  cmd_line.setText(&quot;&quot;);
}

if( PrtData != 0xff ){
  int c = PrtData;
  if(c == 61 ) c = &apos;\n&apos;;// 改行コード
  else if(c == 62 ) c = &apos;\r&apos;;// エスケープコード
  else if(c == 63 ) c = &apos;\0&apos;;// ヌル文字
  else c+= 32;
  if( c == &apos;\r&apos; ) disp.setText(&quot;&quot;);
  else disp.append(&quot;&quot;+(char)(byte)(c));
  PrtData = 0xff;
}

</codetext>
</operation>
<pin>
<ID>_P96</ID>
<x0>694</x0>
<y0>694</y0>
<width>67</width>
<height>25</height>
<text>io_sync()</text>
<px>257</px>
<py>29</py>
</pin>
<relation>
<ID>_R97</ID>
<pin1name>_P96</pin1name>
<pin2name>_O95</pin2name>
</relation>
<relation>
<ID>_R98</ID>
<pin1name>_A0(_Pio_flg)</pin1name>
<pin2name>_X19(_P65)</pin2name>
</relation>
<relation>
<ID>_R99</ID>
<pin1name>_A0(_PAaddr_reg)</pin1name>
<pin2name>_X42(_P0)</pin2name>
</relation>
<relation>
<ID>_R100</ID>
<pin1name>_A0(_Pstart)</pin1name>
<pin2name>_X19(_P16)</pin2name>
</relation>
<codeclip>
<ID>_C101</ID>
<x0>779</x0>
<y0>737</y0>
<width>184</width>
<height>34</height>
<codetext>//コマンドを実行して結果をコンソールに表示する
public void exec_command( String cmd ){

      Runtime runtime = Runtime.getRuntime();
      Process process;
      try {            //実行するコマンドを指定
        process = runtime.exec(cmd);
        new PrintThread(process.getInputStream()).start();
        new PrintThread(process.getErrorStream()).start();
        process.waitFor();
      } catch (Exception e) {}
    }


class PrintThread extends Thread{
  BufferedReader reader;
  PrintThread( InputStream s ){
    reader = new BufferedReader(new InputStreamReader(s));
  }
  
  public void run(){
    String line;
    try{
      while ((line = reader.readLine()) != null) message_area.append(line+&quot;\n&quot;);
      reader.close();
    } catch( IOException ie ){ }
  }
}
</codetext>
</codeclip>
<relation>
<ID>_R103</ID>
<pin1name>_A0(_PAclear_list)</pin1name>
<pin2name>_X6(_P41)</pin2name>
</relation>
<relation>
<ID>_R105</ID>
<pin1name>_A0(_Pbreak_field)</pin1name>
<pin2name>_X19(_P68)</pin2name>
</relation>
<relation>
<ID>_R109</ID>
<pin1name>_A0(_PAinifile_button)</pin1name>
<pin2name>_X19(_P71)</pin2name>
</relation>
<relation>
<ID>_R110</ID>
<pin1name>_A0(_Pentry_field)</pin1name>
<pin2name>_X19(_P75)</pin2name>
</relation>
<relation>
<ID>_R111</ID>
<pin1name>_A0(_PAterminal_button)</pin1name>
<pin2name>_X79(_P4)</pin2name>
</relation>
<codeclip>
<ID>_C112</ID>
<x0>787</x0>
<y0>787</y0>
<width>201</width>
<height>37</height>
<codetext>// 制御信号表示処理
public void update_control(){

int mc = mem_c[address];
if( (mc &amp; IO)      == 0 ) io_label.setBackground(Color.green);      else  io_label.setBackground(Color.lightGray);
if( (mc &amp; POINTER) == 0 ) pointer_label.setBackground(Color.green); else  pointer_label.setBackground(Color.lightGray);
if( (mc &amp; RET)     == 0 ) ret_label.setBackground(Color.green);     else  ret_label.setBackground(Color.lightGray);
if( (mc &amp; ST)      == 0 ) st_label.setBackground(Color.green);      else  st_label.setBackground(Color.lightGray);
if( (mc &amp; LD)      == 0 ) ld_label.setBackground(Color.green);      else  ld_label.setBackground(Color.lightGray);
if( (mc &amp; LDH)     == 0 ) ldh_label.setBackground(Color.green);     else  ldh_label.setBackground(Color.lightGray);
if( (mc &amp; LDM)     == 0 ) ldm_label.setBackground(Color.green);     else  ldm_label.setBackground(Color.lightGray);
if( (mc &amp; LDL)     == 0 ) ldl_label.setBackground(Color.green);     else  ldl_label.setBackground(Color.lightGray);
}
</codetext>
</codeclip>
<pin>
<ID>_P113</ID>
<x0>9</x0>
<y0>37</y0>
<width>92</width>
<height>32</height>
<text>out(JFrame f)</text>
<px>1</px>
<py>34</py>
</pin>
<relation>
<ID>_R114</ID>
<pin1name>_A0(_PGUIout)</pin1name>
<pin2name>_P113</pin2name>
</relation>
<pin>
<ID>_P115</ID>
<x0>5</x0>
<y0>77</y0>
<width>91</width>
<height>31</height>
<text>card6_debug()</text>
<px>0</px>
<py>56</py>
</pin>
<relation>
<ID>_R116</ID>
<pin1name>_A0(_P_Debugger)</pin1name>
<pin2name>_P115</pin2name>
</relation>
<pin>
<ID>_P117</ID>
<x0>0</x0>
<y0>121</y0>
<width>105</width>
<height>29</height>
<text>card6vm_sym()</text>
<px>0</px>
<py>72</py>
</pin>
<relation>
<ID>_R119</ID>
<pin1name>_A0(_P_VMEmulator)</pin1name>
<pin2name>_P117</pin2name>
</relation>
<pin>
<ID>_P120</ID>
<x0>732</x0>
<y0>882</y0>
<width>60</width>
<height>30</height>
<text>exit()</text>
<px>145</px>
<py>18</py>
</pin>
<relation>
<ID>_R121</ID>
<pin1name>_P120</pin1name>
<pin2name>_O1</pin2name>
</relation>
<pin>
<ID>_P122</ID>
<x0>583</x0>
<y0>104</y0>
<width>60</width>
<height>30</height>
<text>close()</text>
<px>147</px>
<py>42</py>
</pin>
<relation>
<ID>_R123</ID>
<pin1name>_A0(_PGUIclosed)</pin1name>
<pin2name>_P122</pin2name>
</relation>
<operation>
<ID>_O124</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>561</x0>
<y0>864</y0>
<width>132</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// メモリダンプ




// メモリの各フィールドの内容を、それぞれ別のファイルに書き出す
// Verilog HDLの初期化ファイルとして使用可能
// ファイル名はそれぞれ&quot;mem_c.txt&quot;,&quot;mem_a.txt&quot;,&quot;mem_r.txt&quot;,&quot;mem_d.txt&quot;
int ad_size=262144;
try{
BufferedWriter dout = new BufferedWriter( new FileWriter(&quot;mem_c.txt&quot;));
for( int adrs = 0; adrs &lt; ad_size; adrs++ ){
  dout.write(Integer.toHexString(mem_c[ adrs ])+&quot;\n&quot;);
}
dout.close();
dout = new BufferedWriter( new FileWriter(&quot;mem_a.txt&quot;));
for( int adrs = 0; adrs &lt; ad_size; adrs++ ){
  dout.write(Integer.toHexString(mem_a[ adrs ])+&quot;\n&quot;);
}
dout.close();
dout = new BufferedWriter( new FileWriter(&quot;mem_r.txt&quot;));
for( int adrs = 0; adrs &lt; ad_size; adrs++ ){
  dout.write(Integer.toHexString(mem_r[ adrs ])+&quot;\n&quot;);
}
dout.close();
dout = new BufferedWriter( new FileWriter(&quot;mem_d.txt&quot;));
for( int adrs = 0; adrs &lt; ad_size; adrs++ ){
  dout.write(Integer.toHexString(mem_d[ adrs ])+&quot;\n&quot;);
}
dout.close();
} catch(Exception e){}
</codetext>
</operation>
<aobject>
<ID>_A0</ID>
<x0>127</x0>
<y0>0</y0>
<width>280</width>
<objectname>GUI</objectname>
<description>GUIオブジェクト
</description>
<state>
<ID>_SINIT</ID>
<x0>0</x0>
<y0>40</y0>
<width>70</width>
<height>40</height>
<text>  InitState</text>
<isinitstate>1</isinitstate>
</state>
<pin>
<ID>_Pstart</ID>
<x0>400</x0>
<y0>100</y0>
<width>80</width>
<height>26</height>
<text>Start()</text>
<px>0</px>
<py>36</py>
</pin>
<pin>
<ID>_PGUIout</ID>
<x0>0</x0>
<y0>84</y0>
<width>180</width>
<height>26</height>
<text>GUI_created(JFrame f)</text>
<px>0</px>
<py>54</py>
</pin>
<pin>
<ID>_PGUIclosed</ID>
<x0>310</x0>
<y0>0</y0>
<width>180</width>
<height>26</height>
<text>GUI_closed()</text>
<px>94</px>
<py>6</py>
</pin>
<action>
<ID>_Astart</ID>
<comp1name>_Pstart</comp1name>
<comp2name>_Ocreate</comp2name>
</action>
<operation>
<ID>_Ocreate</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>220</x0>
<y0>40</y0>
<width>130</width>
<height>64</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// GUIを作成する
XGUI x = new XGUI();

</codetext>
</operation>
<pin>
<ID>_P_Debugger</ID>
<x0>0</x0>
<y0>110</y0>
<width>200</width>
<height>26</height>
<text>_Debugger_selected()</text>
<px>0</px>
<py>72</py>
</pin>
<pin>
<ID>_P_VMEmulator</ID>
<x0>0</x0>
<y0>138</y0>
<width>200</width>
<height>26</height>
<text>_VMEmulator_selected()</text>
<px>0</px>
<py>90</py>
</pin>
<pin>
<ID>_PAsingle_button</ID>
<x0>0</x0>
<y0>166</y0>
<width>200</width>
<height>26</height>
<text>single_button_clicked()</text>
<px>0</px>
<py>108</py>
</pin>
<pin>
<ID>_PAclear_list</ID>
<x0>0</x0>
<y0>194</y0>
<width>200</width>
<height>26</height>
<text>clear_list_clicked()</text>
<px>0</px>
<py>126</py>
</pin>
<pin>
<ID>_PAadd_list</ID>
<x0>0</x0>
<y0>222</y0>
<width>200</width>
<height>26</height>
<text>add_list_clicked()</text>
<px>0</px>
<py>144</py>
</pin>
<pin>
<ID>_PAdel_list</ID>
<x0>0</x0>
<y0>250</y0>
<width>200</width>
<height>26</height>
<text>del_list_clicked()</text>
<px>0</px>
<py>162</py>
</pin>
<pin>
<ID>_PAhome_list</ID>
<x0>0</x0>
<y0>278</y0>
<width>200</width>
<height>26</height>
<text>home_list_clicked()</text>
<px>0</px>
<py>180</py>
</pin>
<pin>
<ID>_PAinc_list</ID>
<x0>0</x0>
<y0>306</y0>
<width>200</width>
<height>26</height>
<text>inc_list_clicked()</text>
<px>0</px>
<py>198</py>
</pin>
<pin>
<ID>_PAdec_list</ID>
<x0>0</x0>
<y0>334</y0>
<width>200</width>
<height>26</height>
<text>dec_list_clicked()</text>
<px>0</px>
<py>216</py>
</pin>
<pin>
<ID>_Prun_button</ID>
<x0>0</x0>
<y0>362</y0>
<width>200</width>
<height>26</height>
<text>run_button_created(JButton b)</text>
<px>0</px>
<py>234</py>
</pin>
<pin>
<ID>_PArun_button</ID>
<x0>0</x0>
<y0>390</y0>
<width>200</width>
<height>26</height>
<text>run_button_clicked()</text>
<px>0</px>
<py>252</py>
</pin>
<pin>
<ID>_PAinc_addr</ID>
<x0>0</x0>
<y0>418</y0>
<width>200</width>
<height>26</height>
<text>inc_addr_clicked()</text>
<px>0</px>
<py>270</py>
</pin>
<pin>
<ID>_PAdec_addr</ID>
<x0>0</x0>
<y0>446</y0>
<width>200</width>
<height>26</height>
<text>dec_addr_clicked()</text>
<px>0</px>
<py>288</py>
</pin>
<pin>
<ID>_PAmem_set</ID>
<x0>0</x0>
<y0>474</y0>
<width>200</width>
<height>26</height>
<text>mem_set_clicked()</text>
<px>0</px>
<py>306</py>
</pin>
<pin>
<ID>_PAinifile_button</ID>
<x0>0</x0>
<y0>502</y0>
<width>200</width>
<height>26</height>
<text>inifile_button_clicked()</text>
<px>0</px>
<py>324</py>
</pin>
<pin>
<ID>_Paddr_reg</ID>
<x0>0</x0>
<y0>530</y0>
<width>200</width>
<height>26</height>
<text>addr_reg_created(JTextField t)</text>
<px>0</px>
<py>342</py>
</pin>
<pin>
<ID>_PAaddr_reg</ID>
<x0>0</x0>
<y0>558</y0>
<width>200</width>
<height>26</height>
<text>addr_reg_input(String s)</text>
<px>0</px>
<py>360</py>
</pin>
<pin>
<ID>_Pc_reg</ID>
<x0>0</x0>
<y0>586</y0>
<width>200</width>
<height>26</height>
<text>c_reg_created(JTextField t)</text>
<px>0</px>
<py>378</py>
</pin>
<pin>
<ID>_Pa_reg</ID>
<x0>0</x0>
<y0>614</y0>
<width>200</width>
<height>26</height>
<text>a_reg_created(JTextField t)</text>
<px>0</px>
<py>396</py>
</pin>
<pin>
<ID>_Pr_reg</ID>
<x0>0</x0>
<y0>642</y0>
<width>200</width>
<height>26</height>
<text>r_reg_created(JTextField t)</text>
<px>0</px>
<py>414</py>
</pin>
<pin>
<ID>_Pd_reg</ID>
<x0>0</x0>
<y0>670</y0>
<width>200</width>
<height>26</height>
<text>d_reg_created(JTextField t)</text>
<px>0</px>
<py>432</py>
</pin>
<pin>
<ID>_Pio_flg</ID>
<x0>0</x0>
<y0>698</y0>
<width>200</width>
<height>26</height>
<text>io_flg_created(JLabel l)</text>
<px>0</px>
<py>450</py>
</pin>
<pin>
<ID>_Ppointer_flg</ID>
<x0>0</x0>
<y0>726</y0>
<width>200</width>
<height>26</height>
<text>pointer_flg_created(JLabel l)</text>
<px>0</px>
<py>468</py>
</pin>
<pin>
<ID>_Preturn_flg</ID>
<x0>0</x0>
<y0>754</y0>
<width>200</width>
<height>26</height>
<text>return_flg_created(JLabel l)</text>
<px>0</px>
<py>486</py>
</pin>
<pin>
<ID>_Pstore_flg</ID>
<x0>0</x0>
<y0>782</y0>
<width>200</width>
<height>26</height>
<text>store_flg_created(JLabel l)</text>
<px>0</px>
<py>504</py>
</pin>
<pin>
<ID>_Pld_flg</ID>
<x0>0</x0>
<y0>810</y0>
<width>200</width>
<height>26</height>
<text>ld_flg_created(JLabel l)</text>
<px>0</px>
<py>522</py>
</pin>
<pin>
<ID>_Pldh_flg</ID>
<x0>0</x0>
<y0>838</y0>
<width>200</width>
<height>26</height>
<text>ldh_flg_created(JLabel l)</text>
<px>0</px>
<py>540</py>
</pin>
<pin>
<ID>_Pldm_flg</ID>
<x0>0</x0>
<y0>866</y0>
<width>200</width>
<height>26</height>
<text>ldm_flg_created(JLabel l)</text>
<px>0</px>
<py>558</py>
</pin>
<pin>
<ID>_Pldl_flg</ID>
<x0>0</x0>
<y0>894</y0>
<width>200</width>
<height>26</height>
<text>ldl_flg_created(JLabel l)</text>
<px>0</px>
<py>576</py>
</pin>
<pin>
<ID>_Pmessage_area</ID>
<x0>0</x0>
<y0>922</y0>
<width>200</width>
<height>26</height>
<text>message_area_created(JTextArea t)</text>
<px>0</px>
<py>594</py>
</pin>
<pin>
<ID>_Pclock_field</ID>
<x0>0</x0>
<y0>950</y0>
<width>200</width>
<height>26</height>
<text>clock_field_created(JTextField t)</text>
<px>0</px>
<py>612</py>
</pin>
<pin>
<ID>_Pname_field</ID>
<x0>0</x0>
<y0>978</y0>
<width>200</width>
<height>26</height>
<text>name_field_created(JTextField t)</text>
<px>0</px>
<py>630</py>
</pin>
<pin>
<ID>_Pstart_field</ID>
<x0>0</x0>
<y0>1006</y0>
<width>200</width>
<height>26</height>
<text>start_field_created(JTextField t)</text>
<px>0</px>
<py>648</py>
</pin>
<pin>
<ID>_Pend_field</ID>
<x0>0</x0>
<y0>1034</y0>
<width>200</width>
<height>26</height>
<text>end_field_created(JTextField t)</text>
<px>0</px>
<py>666</py>
</pin>
<pin>
<ID>_Pinterval_field</ID>
<x0>0</x0>
<y0>1062</y0>
<width>200</width>
<height>26</height>
<text>interval_field_created(JTextField t)</text>
<px>0</px>
<py>684</py>
</pin>
<pin>
<ID>_Pentry_field</ID>
<x0>0</x0>
<y0>1090</y0>
<width>200</width>
<height>26</height>
<text>entry_field_created(JTextField t)</text>
<px>0</px>
<py>702</py>
</pin>
<pin>
<ID>_Pbreak_field</ID>
<x0>0</x0>
<y0>1118</y0>
<width>200</width>
<height>26</height>
<text>break_field_created(JTextField t)</text>
<px>0</px>
<py>720</py>
</pin>
<pin>
<ID>_PAcompile_button</ID>
<x0>0</x0>
<y0>1146</y0>
<width>200</width>
<height>26</height>
<text>compile_button_clicked()</text>
<px>0</px>
<py>738</py>
</pin>
<pin>
<ID>_PAclr_button</ID>
<x0>0</x0>
<y0>1174</y0>
<width>200</width>
<height>26</height>
<text>clr_button_clicked()</text>
<px>0</px>
<py>756</py>
</pin>
<pin>
<ID>_PAasm_button</ID>
<x0>0</x0>
<y0>1202</y0>
<width>200</width>
<height>26</height>
<text>asm_button_clicked()</text>
<px>0</px>
<py>774</py>
</pin>
<pin>
<ID>_PAasm_edit_button</ID>
<x0>0</x0>
<y0>1230</y0>
<width>200</width>
<height>26</height>
<text>asm_edit_button_clicked()</text>
<px>0</px>
<py>792</py>
</pin>
<pin>
<ID>_PAterminal_button</ID>
<x0>0</x0>
<y0>1258</y0>
<width>200</width>
<height>26</height>
<text>terminal_button_clicked()</text>
<px>0</px>
<py>810</py>
</pin>
<pin>
<ID>_PAedit_button</ID>
<x0>0</x0>
<y0>1286</y0>
<width>200</width>
<height>26</height>
<text>edit_button_clicked()</text>
<px>0</px>
<py>828</py>
</pin>
<pin>
<ID>_Pcmd_field</ID>
<x0>0</x0>
<y0>1314</y0>
<width>200</width>
<height>26</height>
<text>cmd_field_created(JTextField t)</text>
<px>0</px>
<py>846</py>
</pin>
<pin>
<ID>_PAcmd_field</ID>
<x0>0</x0>
<y0>1342</y0>
<width>200</width>
<height>26</height>
<text>cmd_field_input(String s)</text>
<px>0</px>
<py>864</py>
</pin>
<pin>
<ID>_Pdisp_area</ID>
<x0>0</x0>
<y0>1370</y0>
<width>200</width>
<height>26</height>
<text>disp_area_created(JTextArea t)</text>
<px>0</px>
<py>882</py>
</pin>
<pin>
<ID>_PAdump_button</ID>
<x0>0</x0>
<y0>1398</y0>
<width>200</width>
<height>26</height>
<text>dump_button_clicked()</text>
<px>0</px>
<py>900</py>
</pin>
<codeclip>
<ID>_CXSTART</ID>
<x0>0</x0>
<y0>0</y0>
<width>300</width>
<height>26</height>
<codetext> class XGUI extends JFrame implements WindowListener{
 JPanel cnt;
JMenuBar menubar;
 class _Debugger extends JMenuItem implements ActionListener{
   _Debugger(){
    setText( &quot;Debugger&quot; );
    setMnemonic( 48 );
    addActionListener( this );
  }
  public void actionPerformed( ActionEvent e ){
    _Debugger_selected();
  }
}
 class _VMEmulator extends JMenuItem implements ActionListener{
   _VMEmulator(){
    setText( &quot;VMEmulator&quot; );
    setMnemonic( 48 );
    addActionListener( this );
  }
  public void actionPerformed( ActionEvent e ){
    _VMEmulator_selected();
  }
}
single_button Isingle_button;
 class single_button extends JButton implements ActionListener{
  single_button(){
 setOpaque( true );
 setName(  &quot;single_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;1step&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ single_button_clicked(); }
}
clear_list Iclear_list;
 class clear_list extends JButton implements ActionListener{
  clear_list(){
 setOpaque( true );
 setName(  &quot;clear_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;C&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ clear_list_clicked(); }
}
add_list Iadd_list;
 class add_list extends JButton implements ActionListener{
  add_list(){
 setOpaque( true );
 setName(  &quot;add_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;ADD&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ add_list_clicked(); }
}
del_list Idel_list;
 class del_list extends JButton implements ActionListener{
  del_list(){
 setOpaque( true );
 setName(  &quot;del_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;DEL&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ del_list_clicked(); }
}
home_list Ihome_list;
 class home_list extends JButton implements ActionListener{
  home_list(){
 setOpaque( true );
 setName(  &quot;home_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;0&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ home_list_clicked(); }
}
inc_list Iinc_list;
 class inc_list extends JButton implements ActionListener{
  inc_list(){
 setOpaque( true );
 setName(  &quot;inc_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;&gt;&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inc_list_clicked(); }
}
dec_list Idec_list;
 class dec_list extends JButton implements ActionListener{
  dec_list(){
 setOpaque( true );
 setName(  &quot;dec_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;&lt;&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ dec_list_clicked(); }
}
run_button Irun_button;
 class run_button extends JButton implements ActionListener{
  run_button(){
 setOpaque( true );
 setName(  &quot;run_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;run&quot; );
 addActionListener( this );
 run_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ run_button_clicked(); }
}
inc_addr Iinc_addr;
 class inc_addr extends JButton implements ActionListener{
  inc_addr(){
 setOpaque( true );
 setName(  &quot;inc_addr&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;+&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inc_addr_clicked(); }
}
dec_addr Idec_addr;
 class dec_addr extends JButton implements ActionListener{
  dec_addr(){
 setOpaque( true );
 setName(  &quot;dec_addr&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;-&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ dec_addr_clicked(); }
}
mem_set Imem_set;
 class mem_set extends JButton implements ActionListener{
  mem_set(){
 setOpaque( true );
 setName(  &quot;mem_set&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;WRT&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ mem_set_clicked(); }
}
inifile_button Iinifile_button;
 class inifile_button extends JButton implements ActionListener{
  inifile_button(){
 setOpaque( true );
 setName(  &quot;inifile_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Edit Ini File&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inifile_button_clicked(); }
}
addr_reg Iaddr_reg;
 class addr_reg extends JTextField implements ActionListener{
  addr_reg(){
 setOpaque( true );
 setName(  &quot;addr_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;000000&quot; );
 addActionListener( this );
 addr_reg_created( this );
}
 public void actionPerformed( ActionEvent e ){ addr_reg_input( getText() ); }
}
c_reg Ic_reg;
 class c_reg extends JTextField{
  c_reg(){
 setOpaque( true );
 setName(  &quot;c_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;ff&quot; );
 c_reg_created( this );
}
}
a_reg Ia_reg;
 class a_reg extends JTextField{
  a_reg(){
 setOpaque( true );
 setName(  &quot;a_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;000000&quot; );
 a_reg_created( this );
}
}
r_reg Ir_reg;
 class r_reg extends JTextField{
  r_reg(){
 setOpaque( true );
 setName(  &quot;r_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;000000&quot; );
 r_reg_created( this );
}
}
d_reg Id_reg;
 class d_reg extends JTextField{
  d_reg(){
 setOpaque( true );
 setName(  &quot;d_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;00&quot; );
 d_reg_created( this );
}
}
io_flg Iio_flg;
 class io_flg extends JLabel{
  io_flg(){
 setOpaque( true );
 setName(  &quot;io_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;IO&quot; );
 io_flg_created( this );
}
}
pointer_flg Ipointer_flg;
 class pointer_flg extends JLabel{
  pointer_flg(){
 setOpaque( true );
 setName(  &quot;pointer_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;POINTER&quot; );
 pointer_flg_created( this );
}
}
return_flg Ireturn_flg;
 class return_flg extends JLabel{
  return_flg(){
 setOpaque( true );
 setName(  &quot;return_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;RET&quot; );
 return_flg_created( this );
}
}
store_flg Istore_flg;
 class store_flg extends JLabel{
  store_flg(){
 setOpaque( true );
 setName(  &quot;store_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;ST&quot; );
 store_flg_created( this );
}
}
ld_flg Ild_flg;
 class ld_flg extends JLabel{
  ld_flg(){
 setOpaque( true );
 setName(  &quot;ld_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;LD&quot; );
 ld_flg_created( this );
}
}
ldh_flg Ildh_flg;
 class ldh_flg extends JLabel{
  ldh_flg(){
 setOpaque( true );
 setName(  &quot;ldh_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;LDH&quot; );
 ldh_flg_created( this );
}
}
ldm_flg Ildm_flg;
 class ldm_flg extends JLabel{
  ldm_flg(){
 setOpaque( true );
 setName(  &quot;ldm_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;LDM&quot; );
 ldm_flg_created( this );
}
}
ldl_flg Ildl_flg;
 class ldl_flg extends JLabel{
  ldl_flg(){
 setOpaque( true );
 setName(  &quot;ldl_flg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 11 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;LDL&quot; );
 ldl_flg_created( this );
}
}
message_area Imessage_area;
 class message_area extends JTextArea{
 JScrollPane scrl;
  message_area(){
 setOpaque( true );
 setName(  &quot;message_area&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 scrl = new JScrollPane( this );
 message_area_created( this );
}
}
LABEL24 ILABEL24;
 class LABEL24 extends JLabel{
  LABEL24(){
 setOpaque( true );
 setName(  &quot;LABEL24&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 2 );
 setVerticalAlignment( 0 );
 setText( &quot;CYCLE:&quot; );
}
}
clock_field Iclock_field;
 class clock_field extends JTextField{
  clock_field(){
 setOpaque( true );
 setName(  &quot;clock_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 clock_field_created( this );
}
}
LABEL27 ILABEL27;
 class LABEL27 extends JLabel{
  LABEL27(){
 setOpaque( true );
 setName(  &quot;LABEL27&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Name&quot; );
}
}
LABEL28 ILABEL28;
 class LABEL28 extends JLabel{
  LABEL28(){
 setOpaque( true );
 setName(  &quot;LABEL28&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Start&quot; );
}
}
LABEL29 ILABEL29;
 class LABEL29 extends JLabel{
  LABEL29(){
 setOpaque( true );
 setName(  &quot;LABEL29&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;End&quot; );
}
}
name_field Iname_field;
 class name_field extends JTextField{
  name_field(){
 setOpaque( true );
 setName(  &quot;name_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 name_field_created( this );
}
}
start_field Istart_field;
 class start_field extends JTextField{
  start_field(){
 setOpaque( true );
 setName(  &quot;start_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 start_field_created( this );
}
}
end_field Iend_field;
 class end_field extends JTextField{
  end_field(){
 setOpaque( true );
 setName(  &quot;end_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 end_field_created( this );
}
}
interval_field Iinterval_field;
 class interval_field extends JTextField{
  interval_field(){
 setOpaque( true );
 setName(  &quot;interval_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;1&quot; );
 interval_field_created( this );
}
}
entry_field Ientry_field;
 class entry_field extends JTextField{
  entry_field(){
 setOpaque( true );
 setName(  &quot;entry_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 entry_field_created( this );
}
}
break_field Ibreak_field;
 class break_field extends JTextField{
  break_field(){
 setOpaque( true );
 setName(  &quot;break_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 break_field_created( this );
}
}
LABEL33 ILABEL33;
 class LABEL33 extends JLabel{
  LABEL33(){
 setOpaque( true );
 setName(  &quot;LABEL33&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;interval time&quot; );
}
}
LABEL34 ILABEL34;
 class LABEL34 extends JLabel{
  LABEL34(){
 setOpaque( true );
 setName(  &quot;LABEL34&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;ms&quot; );
}
}
LABEL36 ILABEL36;
 class LABEL36 extends JLabel{
  LABEL36(){
 setOpaque( true );
 setName(  &quot;LABEL36&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;ADDR:&quot; );
}
}
LABEL35 ILABEL35;
 class LABEL35 extends JLabel{
  LABEL35(){
 setOpaque( true );
 setName(  &quot;LABEL35&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;D:&quot; );
}
}
compile_button Icompile_button;
 class compile_button extends JButton implements ActionListener{
  compile_button(){
 setOpaque( true );
 setName(  &quot;compile_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Compile&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ compile_button_clicked(); }
}
clr_button Iclr_button;
 class clr_button extends JButton implements ActionListener{
  clr_button(){
 setOpaque( true );
 setName(  &quot;clr_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;CLR&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ clr_button_clicked(); }
}
asm_button Iasm_button;
 class asm_button extends JButton implements ActionListener{
  asm_button(){
 setOpaque( true );
 setName(  &quot;asm_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;assemble&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ asm_button_clicked(); }
}
asm_edit_button Iasm_edit_button;
 class asm_edit_button extends JButton implements ActionListener{
  asm_edit_button(){
 setOpaque( true );
 setName(  &quot;asm_edit_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;asm edit&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ asm_edit_button_clicked(); }
}
terminal_button Iterminal_button;
 class terminal_button extends JButton implements ActionListener{
  terminal_button(){
 setOpaque( true );
 setName(  &quot;terminal_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Terminal&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ terminal_button_clicked(); }
}
LABEL2 ILABEL2;
 class LABEL2 extends JLabel{
  LABEL2(){
 setOpaque( true );
 setName(  &quot;LABEL2&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R:&quot; );
}
}
LABEL3 ILABEL3;
 class LABEL3 extends JLabel{
  LABEL3(){
 setOpaque( true );
 setName(  &quot;LABEL3&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;A:&quot; );
}
}
LABEL4 ILABEL4;
 class LABEL4 extends JLabel{
  LABEL4(){
 setOpaque( true );
 setName(  &quot;LABEL4&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;C:&quot; );
}
}
edit_button Iedit_button;
 class edit_button extends JButton implements ActionListener{
  edit_button(){
 setOpaque( true );
 setName(  &quot;edit_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;edit&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ edit_button_clicked(); }
}
cmd_field Icmd_field;
 class cmd_field extends JTextField implements ActionListener{
  cmd_field(){
 setOpaque( true );
 setName(  &quot;cmd_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 addActionListener( this );
 cmd_field_created( this );
}
 public void actionPerformed( ActionEvent e ){ cmd_field_input( getText() ); }
}
LABEL42 ILABEL42;
 class LABEL42 extends JLabel{
  LABEL42(){
 setOpaque( true );
 setName(  &quot;LABEL42&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Command:&quot; );
}
}
disp_area Idisp_area;
 class disp_area extends JTextArea{
 JScrollPane scrl;
  disp_area(){
 setOpaque( true );
 setName(  &quot;disp_area&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 20 ));
 setForeground( new Color(  29, 255, 32 ));
 setBackground( new Color(  1, 1, 1 ));
 setText( &quot;&quot; );
 scrl = new JScrollPane( this );
 disp_area_created( this );
}
}
LABEL50 ILABEL50;
 class LABEL50 extends JLabel{
  LABEL50(){
 setOpaque( true );
 setName(  &quot;LABEL50&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Break address&quot; );
}
}
LABEL53 ILABEL53;
 class LABEL53 extends JLabel{
  LABEL53(){
 setOpaque( true );
 setName(  &quot;LABEL53&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;entry address&quot; );
}
}
dump_button Idump_button;
 class dump_button extends JButton implements ActionListener{
  dump_button(){
 setOpaque( true );
 setName(  &quot;dump_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;DUMP&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ dump_button_clicked(); }
}
 XGUI(){
 setTitle(&quot;CARD6シミュレータ&quot;);
 cnt = new JPanel( new BorderLayout() );
 cnt.setPreferredSize(  new  Dimension( 943, 617 ) );
 ((Component)cnt).setBackground( new Color( 252, 243, 83 ) );
menubar = new JMenuBar();
setJMenuBar( menubar );
menubar.add( new  _Debugger() );
menubar.add( new  _VMEmulator() );
 Isingle_button = new single_button();
 cnt.add( Isingle_button, 0 );
 cnt.getLayout().removeLayoutComponent( Isingle_button );
 Isingle_button.setBounds( 63, 112, 47, 44 );
 Iclear_list = new clear_list();
 cnt.add( Iclear_list, 0 );
 cnt.getLayout().removeLayoutComponent( Iclear_list );
 Iclear_list.setBounds( 317, 58, 21, 24 );
 Iadd_list = new add_list();
 cnt.add( Iadd_list, 0 );
 cnt.getLayout().removeLayoutComponent( Iadd_list );
 Iadd_list.setBounds( 341, 59, 31, 23 );
 Idel_list = new del_list();
 cnt.add( Idel_list, 0 );
 cnt.getLayout().removeLayoutComponent( Idel_list );
 Idel_list.setBounds( 374, 59, 31, 23 );
 Ihome_list = new home_list();
 cnt.add( Ihome_list, 0 );
 cnt.getLayout().removeLayoutComponent( Ihome_list );
 Ihome_list.setBounds( 317, 85, 22, 23 );
 Iinc_list = new inc_list();
 cnt.add( Iinc_list, 0 );
 cnt.getLayout().removeLayoutComponent( Iinc_list );
 Iinc_list.setBounds( 375, 85, 30, 23 );
 Idec_list = new dec_list();
 cnt.add( Idec_list, 0 );
 cnt.getLayout().removeLayoutComponent( Idec_list );
 Idec_list.setBounds( 343, 85, 29, 23 );
 Irun_button = new run_button();
 cnt.add( Irun_button, 0 );
 cnt.getLayout().removeLayoutComponent( Irun_button );
 Irun_button.setBounds( 292, 2, 44, 27 );
 Iinc_addr = new inc_addr();
 cnt.add( Iinc_addr, 0 );
 cnt.getLayout().removeLayoutComponent( Iinc_addr );
 Iinc_addr.setBounds( 241, 59, 28, 23 );
 Idec_addr = new dec_addr();
 cnt.add( Idec_addr, 0 );
 cnt.getLayout().removeLayoutComponent( Idec_addr );
 Idec_addr.setBounds( 241, 85, 28, 23 );
 Imem_set = new mem_set();
 cnt.add( Imem_set, 0 );
 cnt.getLayout().removeLayoutComponent( Imem_set );
 Imem_set.setBounds( 272, 59, 42, 49 );
 Iinifile_button = new inifile_button();
 cnt.add( Iinifile_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iinifile_button );
 Iinifile_button.setBounds( 772, 3, 94, 30 );
 Iaddr_reg = new addr_reg();
 cnt.add( Iaddr_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Iaddr_reg );
 Iaddr_reg.setBounds( 2, 86, 57, 24 );
 Ic_reg = new c_reg();
 cnt.add( Ic_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ic_reg );
 Ic_reg.setBounds( 61, 86, 29, 24 );
 Ia_reg = new a_reg();
 cnt.add( Ia_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ia_reg );
 Ia_reg.setBounds( 91, 86, 56, 24 );
 Ir_reg = new r_reg();
 cnt.add( Ir_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir_reg );
 Ir_reg.setBounds( 148, 86, 56, 24 );
 Id_reg = new d_reg();
 cnt.add( Id_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Id_reg );
 Id_reg.setBounds( 206, 85, 33, 25 );
 Iio_flg = new io_flg();
 cnt.add( Iio_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Iio_flg );
 Iio_flg.setBounds( 3, 33, 33, 22 );
 Ipointer_flg = new pointer_flg();
 cnt.add( Ipointer_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ipointer_flg );
 Ipointer_flg.setBounds( 42, 33, 67, 23 );
 Ireturn_flg = new return_flg();
 cnt.add( Ireturn_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ireturn_flg );
 Ireturn_flg.setBounds( 116, 34, 41, 22 );
 Istore_flg = new store_flg();
 cnt.add( Istore_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Istore_flg );
 Istore_flg.setBounds( 164, 34, 37, 21 );
 Ild_flg = new ld_flg();
 cnt.add( Ild_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ild_flg );
 Ild_flg.setBounds( 207, 34, 37, 21 );
 Ildh_flg = new ldh_flg();
 cnt.add( Ildh_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ildh_flg );
 Ildh_flg.setBounds( 249, 34, 46, 21 );
 Ildm_flg = new ldm_flg();
 cnt.add( Ildm_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ildm_flg );
 Ildm_flg.setBounds( 300, 34, 49, 21 );
 Ildl_flg = new ldl_flg();
 cnt.add( Ildl_flg, 0 );
 cnt.getLayout().removeLayoutComponent( Ildl_flg );
 Ildl_flg.setBounds( 354, 34, 50, 21 );
 Imessage_area = new message_area();
 cnt.add( Imessage_area.scrl, 0 );
 cnt.getLayout().removeLayoutComponent( Imessage_area.scrl );
 (  Imessage_area.scrl ).setBounds( 4, 185, 404, 426 );
 ILABEL24 = new LABEL24();
 cnt.add( ILABEL24, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL24 );
 ILABEL24.setBounds( 2, 111, 59, 22 );
 Iclock_field = new clock_field();
 cnt.add( Iclock_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iclock_field );
 Iclock_field.setBounds( 3, 135, 56, 22 );
 ILABEL27 = new LABEL27();
 cnt.add( ILABEL27, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL27 );
 ILABEL27.setBounds( 226, 113, 64, 19 );
 ILABEL28 = new LABEL28();
 cnt.add( ILABEL28, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL28 );
 ILABEL28.setBounds( 294, 114, 55, 18 );
 ILABEL29 = new LABEL29();
 cnt.add( ILABEL29, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL29 );
 ILABEL29.setBounds( 353, 114, 50, 18 );
 Iname_field = new name_field();
 cnt.add( Iname_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iname_field );
 Iname_field.setBounds( 225, 134, 67, 22 );
 Istart_field = new start_field();
 cnt.add( Istart_field, 0 );
 cnt.getLayout().removeLayoutComponent( Istart_field );
 Istart_field.setBounds( 295, 135, 54, 21 );
 Iend_field = new end_field();
 cnt.add( Iend_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iend_field );
 Iend_field.setBounds( 352, 134, 52, 22 );
 Iinterval_field = new interval_field();
 cnt.add( Iinterval_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iinterval_field );
 Iinterval_field.setBounds( 116, 132, 75, 25 );
 Ientry_field = new entry_field();
 cnt.add( Ientry_field, 0 );
 cnt.getLayout().removeLayoutComponent( Ientry_field );
 Ientry_field.setBounds( 116, 158, 96, 23 );
 Ibreak_field = new break_field();
 cnt.add( Ibreak_field, 0 );
 cnt.getLayout().removeLayoutComponent( Ibreak_field );
 Ibreak_field.setBounds( 328, 158, 76, 23 );
 ILABEL33 = new LABEL33();
 cnt.add( ILABEL33, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL33 );
 ILABEL33.setBounds( 115, 114, 105, 15 );
 ILABEL34 = new LABEL34();
 cnt.add( ILABEL34, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL34 );
 ILABEL34.setBounds( 194, 133, 27, 23 );
 ILABEL36 = new LABEL36();
 cnt.add( ILABEL36, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL36 );
 ILABEL36.setBounds( 2, 59, 57, 25 );
 ILABEL35 = new LABEL35();
 cnt.add( ILABEL35, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL35 );
 ILABEL35.setBounds( 206, 59, 32, 24 );
 Icompile_button = new compile_button();
 cnt.add( Icompile_button, 0 );
 cnt.getLayout().removeLayoutComponent( Icompile_button );
 Icompile_button.setBounds( 196, 3, 60, 27 );
 Iclr_button = new clr_button();
 cnt.add( Iclr_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iclr_button );
 Iclr_button.setBounds( 258, 3, 33, 27 );
 Iasm_button = new asm_button();
 cnt.add( Iasm_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iasm_button );
 Iasm_button.setBounds( 78, 2, 74, 28 );
 Iasm_edit_button = new asm_edit_button();
 cnt.add( Iasm_edit_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iasm_edit_button );
 Iasm_edit_button.setBounds( 3, 2, 74, 28 );
 Iterminal_button = new terminal_button();
 cnt.add( Iterminal_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iterminal_button );
 Iterminal_button.setBounds( 338, 2, 68, 28 );
 ILABEL2 = new LABEL2();
 cnt.add( ILABEL2, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL2 );
 ILABEL2.setBounds( 148, 59, 55, 24 );
 ILABEL3 = new LABEL3();
 cnt.add( ILABEL3, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL3 );
 ILABEL3.setBounds( 90, 59, 55, 24 );
 ILABEL4 = new LABEL4();
 cnt.add( ILABEL4, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL4 );
 ILABEL4.setBounds( 61, 59, 27, 24 );
 Iedit_button = new edit_button();
 cnt.add( Iedit_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iedit_button );
 Iedit_button.setBounds( 153, 3, 42, 27 );
 Icmd_field = new cmd_field();
 cnt.add( Icmd_field, 0 );
 cnt.getLayout().removeLayoutComponent( Icmd_field );
 Icmd_field.setBounds( 507, 3, 260, 30 );
 ILABEL42 = new LABEL42();
 cnt.add( ILABEL42, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL42 );
 ILABEL42.setBounds( 411, 2, 91, 29 );
 Idisp_area = new disp_area();
 cnt.add( Idisp_area.scrl, 0 );
 cnt.getLayout().removeLayoutComponent( Idisp_area.scrl );
 (  Idisp_area.scrl ).setBounds( 411, 36, 527, 578 );
 ILABEL50 = new LABEL50();
 cnt.add( ILABEL50, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL50 );
 ILABEL50.setBounds( 219, 158, 107, 22 );
 ILABEL53 = new LABEL53();
 cnt.add( ILABEL53, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL53 );
 ILABEL53.setBounds( 1, 158, 110, 22 );
 Idump_button = new dump_button();
 cnt.add( Idump_button, 0 );
 cnt.getLayout().removeLayoutComponent( Idump_button );
 Idump_button.setBounds( 868, 3, 69, 30 );
 setContentPane( cnt );
 pack();
 addWindowListener( this );
 setVisible( true );
 GUI_created( this );
}
 public void windowActivated( WindowEvent e ){}
 public void windowClosed( WindowEvent e ){}
 public void windowClosing( WindowEvent e ){ GUI_closed(); }
 public void windowDeactivated( WindowEvent e ){}
 public void windowDeiconified( WindowEvent e ){}
 public void windowIconified( WindowEvent e ){}
 public void windowOpened( WindowEvent e ){}
}
</codetext>
</codeclip>
<ID_maker>67</ID_maker>
<height>922</height>
<レイアウト>CARD6シミュレータ
943
617
252
243
83
xxscale=1
BUTTON;single_button;1step;63;112;47;44;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;clear_list;C;317;58;21;24;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;add_list;ADD;341;59;31;23;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;del_list;DEL;374;59;31;23;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;home_list;0;317;85;22;23;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;inc_list;&gt;;375;85;30;23;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;dec_list;&lt;;343;85;29;23;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;run_button;run;292;2;44;27;51;51;51;192;192;192;Dialog;12;null;0;0;1;1;1;JButton;
BUTTON;inc_addr;+;241;59;28;23;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;dec_addr;-;241;85;28;23;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;mem_set;WRT;272;59;42;49;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;inifile_button;Edit Ini File;772;3;94;30;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
TEXTFIELD;addr_reg;000000;2;86;57;24;51;51;51;255;255;255;Dialog;10;1;1;1;JTextField;
TEXTFIELD;c_reg;ff;61;86;29;24;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;a_reg;000000;91;86;56;24;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;r_reg;000000;148;86;56;24;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;d_reg;00;206;85;33;25;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
LABEL;io_flg;IO;3;33;33;22;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;0;JLabel;
LABEL;pointer_flg;POINTER;42;33;67;23;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;0;JLabel;
LABEL;return_flg;RET;116;34;41;22;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;0;JLabel;
LABEL;store_flg;ST;164;34;37;21;51;51;51;192;192;192;Dialog;12;null;0;0;1;1;0;JLabel;
LABEL;ld_flg;LD;207;34;37;21;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;0;JLabel;
LABEL;ldh_flg;LDH;249;34;46;21;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;0;JLabel;
LABEL;ldm_flg;LDM;300;34;49;21;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;0;JLabel;
LABEL;ldl_flg;LDL;354;34;50;21;51;51;51;192;192;192;Dialog;11;null;0;0;1;1;0;JLabel;
TEXTAREA;message_area;null;4;185;404;426;51;51;51;255;255;255;Dialog;12;1;1;1;JTextArea;
LABEL;LABEL24;CYCLE:;2;111;59;22;51;51;51;192;192;192;Dialog;12;null;2;0;1;0;0;JLabel;
TEXTFIELD;clock_field;0;3;135;56;22;51;51;51;255;255;255;Dialog;12;1;1;0;JTextField;
LABEL;LABEL27;Name;226;113;64;19;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL28;Start;294;114;55;18;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL29;End;353;114;50;18;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;name_field;null;225;134;67;22;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;start_field;0;295;135;54;21;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;end_field;0;352;134;52;22;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;interval_field;1;116;132;75;25;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;entry_field;0;116;158;96;23;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;break_field;0;328;158;76;23;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
LABEL;LABEL33;interval time;115;114;105;15;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL34;ms;194;133;27;23;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL36;ADDR:;2;59;57;25;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL35;D:;206;59;32;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
BUTTON;compile_button;Compile;196;3;60;27;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;clr_button;CLR;258;3;33;27;51;51;51;192;192;192;Dialog;10;null;0;0;1;0;1;JButton;
BUTTON;asm_button;assemble;78;2;74;28;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;asm_edit_button;asm edit;3;2;74;28;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;terminal_button;Terminal;338;2;68;28;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
LABEL;LABEL2;R:;148;59;55;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL3;A:;90;59;55;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL4;C:;61;59;27;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
BUTTON;edit_button;edit;153;3;42;27;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
TEXTFIELD;cmd_field;null;507;3;260;30;51;51;51;255;255;255;Dialog;12;1;1;1;JTextField;
LABEL;LABEL42;Command:;411;2;91;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTAREA;disp_area;null;411;36;527;578;29;255;32;1;1;1;Dialog;20;1;1;1;JTextArea;
LABEL;LABEL50;Break address;219;158;107;22;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL53;entry address;1;158;110;22;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
BUTTON;dump_button;DUMP;868;3;69;30;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
Menu;Debugger;48;/Menu;END;
Menu;VMEmulator;48;/Menu;END;
</レイアウト>
</aobject>
<relation>
<ID>_R125</ID>
<pin1name>_A0(_PAdump_button)</pin1name>
<pin2name>_O124</pin2name>
</relation>
</xobject>
<xobject>
<ID>_X2</ID>
<x0>230</x0>
<y0>401</y0>
<width>245</width>
<height>96</height>
<ID_maker>127</ID_maker>
<objectname>card6vm_sym</objectname>
<description>新規のアプリケーション</description>
<codeclip>
<ID>_CSTART</ID>
<x0>699</x0>
<y0>3</y0>
<width>121</width>
<height>26</height>
<codetext> String[] ARGS;
</codetext>
</codeclip>
<pin>
<ID>_PSTART</ID>
<x0>443</x0>
<y0>22</y0>
<width>55</width>
<height>24</height>
<text>Start()</text>
<px>193</px>
<py>15</py>
</pin>
<relation>
<ID>_R3</ID>
<pin1name>_PSTART</pin1name>
<pin2name>_A0(_Pstart)</pin2name>
</relation>
<xobject>
<ID>_X6</ID>
<x0>0</x0>
<y0>515</y0>
<width>107</width>
<height>183</height>
<ID_maker>48</ID_maker>
<objectname>symulator</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>7</x0>
<y0>415</y0>
<width>73</width>
<height>27</height>
<text>run_stop()</text>
<px>1</px>
<py>29</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>233</x0>
<y0>320</y0>
<width>85</width>
<height>28</height>
<text>single_step()</text>
<px>0</px>
<py>159</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>38</x0>
<y0>9</y0>
<width>60</width>
<height>30</height>
<text>add()</text>
<px>0</px>
<py>67</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>42</x0>
<y0>54</y0>
<width>60</width>
<height>30</height>
<text>delete()</text>
<px>0</px>
<py>85</py>
</pin>
<operation>
<ID>_O8</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>102</x0>
<y0>387</y0>
<width>110</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>38</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>63</outpinx0>
<outpiny0>24</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//実行・停止


run_mode = 1- run_mode;
if( run_mode == 0 ) run_button.setText(&quot;run&quot;);else run_button.setText(&quot;stop&quot;);
interval = Integer.parseInt( interval_field.getText() );
</codetext>
</operation>
<relation>
<ID>_R9</ID>
<pin1name>_P0</pin1name>
<pin2name>_O8</pin2name>
</relation>
<operation>
<ID>_O13</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>48</x0>
<y0>328</y0>
<width>155</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>104</inpinx0>
<inpiny0>32</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>//シングルステップ実行



   exec_one_cycle();
</codetext>
</operation>
<relation>
<ID>_R14</ID>
<pin1name>_P1</pin1name>
<pin2name>_O13</pin2name>
</relation>
<operation>
<ID>_O15</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>165</x0>
<y0>50</y0>
<width>235</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//該当番号のメモリウィンドウを削除


if( memory_windows.size() &gt; list_no ) memory_windows.remove(list_no);

int nn = memory_windows.size();
if( nn &gt; 0){
if( list_no &gt;= nn ) list_no = nn-1;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R16</ID>
<pin1name>_P3</pin1name>
<pin2name>_O15</pin2name>
</relation>
<operation>
<ID>_O19</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>164</x0>
<y0>0</y0>
<width>169</width>
<height>44</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//メモリウィンドウを追加


String n = name_field.getText();
int s = Integer.parseInt(start_field.getText(),16);
int e = Integer.parseInt(end_field.getText(),16);
memory_windows.add( new memory_window( n, s, e ) );

int nn = memory_windows.size();
if( nn &gt; 0){
list_no = nn-1;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R20</ID>
<pin1name>_P2</pin1name>
<pin2name>_O19</pin2name>
</relation>
<codeclip>
<ID>_C21</ID>
<x0>169</x0>
<y0>447</y0>
<width>198</width>
<height>33</height>
<codetext>// 1サイクル実行
public void exec_one_cycle(){
  int ins, adr, tmp, opr1, opr2, t0, t1;
  int access0 = -1, access1 = -1;

    // 各レジスタ、クロックカウンタの設定
    reg_pc = Integer.parseInt( pc_reg.getText(), 16 );
    reg_r0 =  Integer.parseInt( r0_reg.getText() );
    reg_r1 =  Integer.parseInt( r1_reg.getText() );
    reg_r2 =  Integer.parseInt( r2_reg.getText() );
    reg_r3 =  Integer.parseInt( r2_reg.getText() );
    reg_sp = Integer.parseInt( sp_reg.getText(), 16 );
    clock =  Integer.parseInt( clock_field.getText() );
    break_adrs = Integer.parseInt( break_field.getText(), 16 );

    // opコード表示
    message_area.setText(&quot; OP CODE:\n&quot;+hex6(reg_pc) );
    
//    System.out.println( &quot;opcode=&quot;+ mem[ reg_pc ]);
    
    message_area.append( &quot; : &quot;+opcode[ mem[ reg_pc ] ]+&quot;\n\n&quot; );

    // 停止アドレスに到達したら停止する
    if( break_adrs !=0 &amp;&amp; break_adrs == reg_pc ){
     run_stop();
    }

    // 命令コードをフェッチ
    ins = mem[ reg_pc++ ];

    // 命令コードに応じた処理
    switch( ins ){

case hlt:		// 停止する
is_break = 1;
break;

case jmp:		// ジャンプする(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
reg_pc = opr1;
break;

case xxjmp:		// r0に格納されているアドレスにジャンプする
reg_pc = reg_r0;
break;

case jge:		// 演算結果が&gt;=0ならジャンプする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
t0 = reg_r0&gt;=0x20000? reg_r0-0x40000 : reg_r0;
t1 = reg_r1&gt;=0x20000? reg_r1-0x40000 : reg_r1;
if( t1 &gt;= t0 ) reg_pc = opr1;
break;

case jlt:		// 演算結果が&gt;0ならジャンプする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
t0 = reg_r0&gt;=0x20000? reg_r0-0x40000 : reg_r0;
t1 = reg_r1&gt;=0x20000? reg_r1-0x40000 : reg_r1;
if( t1 &lt; t0 ) reg_pc = opr1;
break;

case jz:		// 演算結果が==0ならジャンプする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
if( reg_r1 == reg_r0 ) reg_pc = opr1;
break;

case jnz:		// 演算結果が!=0ならジャンプする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
if( reg_r1 != reg_r0 ) reg_pc = opr1;
break;

case call:		// サブルーチンを呼び出す(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
mem[ --reg_sp ] = (reg_pc&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;0)  &amp; 0x3f;
reg_pc = opr1;
break;

case callxx:	// サブルーチンを呼び出す(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
mem[ --reg_sp ] = (reg_pc&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;0)  &amp; 0x3f;
reg_pc = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case xxcall:	// reg_r0に格納されているアドレスを呼び出す
mem[ --reg_sp ] = (reg_pc&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;0)  &amp; 0x3f;
reg_pc = reg_r0;
break;

case ret:		// サブルーチンから復帰する
reg_pc = mem[ reg_sp++ ] | (mem[ reg_sp++ ] &lt;&lt; 6) | (mem[ reg_sp++ ] &lt;&lt; 12);
break;

case add:		// r0=r1+r0
reg_r0=(reg_r1+reg_r0)&amp;0x3ffff;
break;

case sub:		// r0=r1-r0
reg_r0=(reg_r1-reg_r0)&amp;0x3ffff;
break;

case mul:		// r0=r1*r0
reg_r0=(reg_r1*reg_r0)&amp;0x3ffff;
break;

case div:		// r0=r1/r0
reg_r0=reg_r1/reg_r0;
break;

case umul:		// r0=r1*r0(符号なし)
reg_r0=(reg_r1&amp;0x3ffff)*(reg_r0&amp;0x3ffff);
break;

case udiv:		// r0=r1/r0(符号なし)
reg_r0=(reg_r1&amp;0x3ffff)/(reg_r0&amp;0x3ffff);
break;

case mod:		// r0=r1%r0
reg_r0=reg_r1%reg_r0;
break;

case and:		// r0=r1&amp;r0
reg_r0=reg_r1&amp;reg_r0;
break;

case or:		// r0=r1|r0
reg_r0=reg_r1|reg_r0;
break;

case neg:		// r0=-r0
reg_r0=(-reg_r0)&amp;0x3ffff;
break;

case not:		// r0=~r0
reg_r0=(~reg_r0)&amp;0x3ffff;
break;

case in:		// ポートから入力した値をr0にセット
reg_r0= KeyCode0 &amp; 0x3f;
KeyCode0 = 0x3f;
break;

case out:		// r0の値をポートに出力
PrtData= reg_r0 &amp; 0x3f;
break;

case swap:		// r0とr1の値を入れ替える
tmp=reg_r0;
reg_r0=reg_r1;
reg_r1=tmp;
break;

case pushr:		// レジスタファイル(r1-r3)にr0の値をプッシュ
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
break;

case popr:		// レジスタファイル(r1-r3)からr0に値をポップ
reg_r0 = reg_r1;
reg_r1 = reg_r2;
reg_r2 = reg_r3;
break;

case pushs:		// スタックにr0の値をプッシュ
mem[ --reg_sp ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
access1 = (access0 = reg_sp)+2;
break;

case pops:		// スタックからr0に値をポップ
reg_r0 = mem[ reg_sp++ ] | (mem[ reg_sp++ ] &lt;&lt; 6) | (mem[ reg_sp++ ] &lt;&lt; 12);
break;

case inc_l:		// オペランド(ロング型)をインクリメント
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp++;
mem[ opr1-- ] = (tmp&gt;&gt;12) &amp; 0x3f;
mem[ opr1-- ] = (tmp&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (tmp&gt;&gt;0)  &amp; 0x3f;
access1 = (access0 = opr1)+2;
break;

case dec_l:		// オペランド(ロング型)をデクリメント
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp--;
mem[ opr1-- ] = (tmp&gt;&gt;12) &amp; 0x3f;
mem[ opr1-- ] = (tmp&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (tmp&gt;&gt;0)  &amp; 0x3f;
access1 = (access0 = opr1)+2;
break;

case inc_b:		// オペランド(バイト型)をインクリメント
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr1];
tmp++;
mem[ opr1 ] = tmp &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case dec_b:		// オペランド(バイト型)をデクリメント
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr1];
tmp--;
mem[ opr1 ] = tmp &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case callxx_mbr:// 構造体のメンバに格納されているアドレスを呼び出す
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
mem[ --reg_sp ] = (reg_pc&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;0)  &amp; 0x3f;
reg_pc = adr;
break;

case st_mbr_l:	// 構造体のメンバ(ロング型)にr1の値を格納する
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
mem[ opr1++ ] = (reg_r1&gt;&gt;0)  &amp; 0x3f;
mem[ opr1++ ] = (reg_r1&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (reg_r1&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = opr1)-2;
break;

case st_mbr_b:	// 構造体のメンバ(バイト型)にr1の値を格納する
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
mem[ opr1 ] = reg_r1 &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case ld_mbr_l:	// 構造体のメンバ(ロング型)の値をr0にロードする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
reg_r0 = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case ld_mbr_b:	// 構造体のメンバ(バイト型)の値をr0にロードする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
reg_r0 = mem[opr1] &amp; 0x3f;
break;

case lea_mbr:	// 構造体のメンバのアドレスをr0にロードする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
reg_r0 += opr1;
reg_r0&amp;=0x3ffff;
break;

case ldxx_a_v_l:// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
adr+=tmp;
adr+=tmp;
adr+=tmp;
adr&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr++] | (mem[adr++] &lt;&lt; 6) | (mem[adr] &lt;&lt; 12);
break;

case ld_a_v_l:	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
opr1+=tmp;
opr1+=tmp;
opr1+=tmp;
opr1&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case ldxx_a_v_b:// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
adr+=tmp;
adr&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr] &amp; 0x3f;
break;

case ld_a_v_b:	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
opr1+=tmp;
opr1&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1] &amp; 0x3f;
break;

case stxx_a_v_l:// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
adr+=tmp;
adr+=tmp;
adr+=tmp;
adr&amp;=0x3ffff;
mem[ adr++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ adr++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ adr   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = adr)-2;
break;

case st_a_v_l:	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
opr1+=tmp;
opr1+=tmp;
opr1+=tmp;
opr1&amp;=0x3ffff;
mem[ opr1++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ opr1++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = opr1)-2;
break;

case stxx_a_v_b:// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
adr+=tmp;
adr&amp;=0x3ffff;
mem[ adr ] = reg_r0 &amp; 0x3f;
access1 = (access0 = adr)+0;
break;

case st_a_v_b:	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
opr1+=tmp;
opr1&amp;=0x3ffff;
mem[ opr1 ] = reg_r0 &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case ldxx_a_k_l:// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
adr+=opr2;
adr+=opr2;
adr+=opr2;
adr&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr++] | (mem[adr++] &lt;&lt; 6) | (mem[adr] &lt;&lt; 12);
break;

case ld_a_k_l:	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1+=opr2;
opr1+=opr2;
opr1+=opr2;
opr1&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case ldxx_a_k_b:// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
adr+=opr2;
adr&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr] &amp; 0x3f;
break;

case ld_a_k_b:	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1+=opr2;
opr1&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1] &amp; 0x3f;
break;

case stxx_a_k_l:// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
adr+=opr2;
adr+=opr2;
adr+=opr2;
adr&amp;=0x3ffff;
mem[ adr++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ adr++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ adr   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = adr)-2;
break;

case st_a_k_l:	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1+=opr2;
opr1+=opr2;
opr1+=opr2;
opr1&amp;=0x3ffff;
mem[ opr1++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ opr1++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = opr1)-2;
break;

case stxx_a_k_b:// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
adr+=opr2;
adr&amp;=0x3ffff;
mem[ adr ] = reg_r0 &amp; 0x3f;
access1 = (access0 = adr)+0;
break;

case st_a_k_b:	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1+=opr2;
opr1&amp;=0x3ffff;
mem[ opr1 ] = reg_r0 &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case ldxx_v_l:	// 変数(ロング型)の値をr0にロードする(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr++] | (mem[adr++] &lt;&lt; 6) | (mem[adr] &lt;&lt; 12);
break;

case ld_v_l:	// 変数(ロング型)の値をr0にロードする(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case ldxx_v_b:	// 変数(バイト型)の値をr0にロードする(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr] &amp; 0x3f;
break;

case ld_v_b:	// 変数(バイト型)の値をr0にロードする(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1] &amp; 0x3f;
break;

case ld_k:		// 定数をr0にセットする
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
break;

case stxx_v_l:	// r0の値を変数(ロング型)に格納する(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
mem[ adr++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ adr++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ adr   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = adr)-2;
break;

case st_v_l:	// r0の値を変数(ロング型)に格納する(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
mem[ opr1++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ opr1++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = opr1)-2;
break;

case stxx_v_b:	// r0の値を変数(バイト型)に格納する(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
mem[ adr ] = reg_r0 &amp; 0x3f;
access1 = (access0 = adr)+0;
break;

case st_v_b	:	// r0の値を変数(バイト型)に格納する(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
mem[ opr1 ] = reg_r0 &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

    }

//System.out.println(&quot;access:&quot;+hex6(access0)+&quot;-&quot;+hex6(access1));

// レジスタ領域にアクセスがあったときはレジスタを更新する
if( access0 &lt;= REG_PC &amp;&amp; REG_PC &lt;= access1 ) {reg_pc = mem[REG_PC]+mem[REG_PC+1]*64+mem[REG_PC+2]*4096;}
if( access0 &lt;= REG_SP &amp;&amp; REG_SP &lt;= access1 ) {reg_sp = mem[REG_SP]+mem[REG_SP+1]*64+mem[REG_SP+2]*4096;}
if( access0 &lt;= REG_R0 &amp;&amp; REG_R0 &lt;= access1 ) {reg_r0 = mem[REG_R0]+mem[REG_R0+1]*64+mem[REG_R0+2]*4096;}
if( access0 &lt;= REG_R1 &amp;&amp; REG_R1 &lt;= access1 ) {reg_r1 = mem[REG_R1]+mem[REG_R1+1]*64+mem[REG_R1+2]*4096;}
if( access0 &lt;= REG_R2 &amp;&amp; REG_R2 &lt;= access1 ) {reg_r2 = mem[REG_R2]+mem[REG_R2+1]*64+mem[REG_R2+2]*4096;}
if( access0 &lt;= REG_R3 &amp;&amp; REG_R3 &lt;= access1 ) {reg_r3 = mem[REG_R3]+mem[REG_R3+1]*64+mem[REG_R3+2]*4096;}

    // メモリウィンドウ表示処理
    int n = memory_windows.size();
    for( int i = 0; i &lt; n; i++ ){
      memory_window w = (memory_window)(memory_windows.get(i));
      message_area.append(w.name+&quot;\n&quot;+hex6(w.start)+&quot;: &quot;);
      for( int ad = w.start; ad &lt;= w.end; ad++ ){
        message_area.append( hex2(mem[ad])+ &quot; &quot; );
      }
      message_area.append( &quot;\n\n&quot; );
    }

    // I/O同期
    io_sync();

    // レジスタ表示処理
    pc_reg.setText(hex6(reg_pc));
    r0_reg.setText(&quot;&quot;+reg_r0);
    r1_reg.setText(&quot;&quot;+reg_r1);
    r2_reg.setText(&quot;&quot;+reg_r2);
    r3_reg.setText(&quot;&quot;+reg_r3);
    sp_reg.setText(hex6(reg_sp));

    // クロック表示処理
    clock++;
    clock_field.setText(&quot;&quot;+clock);

}
</codetext>
</codeclip>
<aobject>
<ID>_A24</ID>
<x0>236</x0>
<y0>354</y0>
<width>147</width>
<height>85</height>
<ID_maker>11</ID_maker>
<objectname>Interval_Timer</objectname>
<description>新しいオブジェクト</description>
<state>
<ID>_SINIT</ID>
<x0>188</x0>
<y0>270</y0>
<width>70</width>
<height>40</height>
<text>  初期状態</text>
<isinitstate>1</isinitstate>
</state>
<pin>
<ID>_P0</ID>
<x0>200</x0>
<y0>364</y0>
<width>99</width>
<height>25</height>
<text>play_pause()</text>
<px>1</px>
<py>61</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>476</x0>
<y0>155</y0>
<width>60</width>
<height>30</height>
<text>Action()</text>
<px>0</px>
<py>41</py>
</pin>
<codeclip>
<ID>_C3</ID>
<x0>200</x0>
<y0>5</y0>
<width>272</width>
<height>198</height>
<codetext>XTimer  timer;
class XTimer implements ActionListener{
  javax.swing.Timer unit;
 
  XTimer( int del ){
   unit = new javax.swing.Timer( del, this );
  }

  public void actionPerformed( ActionEvent e){
    Action();
  }

}
</codetext>
</codeclip>
<operation>
<ID>_O7</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>321</x0>
<y0>255</y0>
<width>171</width>
<height>53</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>3</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>45</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// タイマーの起動・停止


if( run_mode != 0 ){
 timer = new XTimer( interval );
 timer.unit.start();
}
 else timer.unit.stop();
</codetext>
</operation>
<action>
<ID>_A9</ID>
<comp1name>_P0</comp1name>
<comp2name>_O7</comp2name>
</action>
</aobject>
<relation>
<ID>_R25</ID>
<pin1name>_O8</pin1name>
<pin2name>_A24(_P0)</pin2name>
</relation>
<relation>
<ID>_R26</ID>
<pin1name>_A24(_P2)</pin1name>
<pin2name>_O13</pin2name>
</relation>
<codeclip>
<ID>_C32</ID>
<x0>410</x0>
<y0>4</y0>
<width>593</width>
<height>631</height>
<codetext>static final int hlt=0;	// 停止する
static final int jmp=1;	// ジャンプする(アドレスは直接指定)
static final int xxjmp=2;	// r0に格納されているアドレスにジャンプする
static final int jge=3;	// r1&gt;=r0ならジャンプする
static final int jlt=4;	// r1&gt;r0ならジャンプする
static final int jz=5;	// r1==r0ならジャンプする
static final int jnz=6;	// r1!=r0ならジャンプする
static final int call=7;	// サブルーチンを呼び出す(アドレスは直接指定)
static final int callxx=8;	// サブルーチンを呼び出す(アドレスは間接指定)
static final int xxcall=9;	// r0に格納されているアドレスを呼び出す
static final int ret=10;	// サブルーチンから復帰する
static final int add=11;	// r0=r1+r0
static final int sub=12;	// r0=r1-r0
static final int mul=13;	// r0=r1*r0
static final int div=14;	// r0=r1/r0
static final int umul=15;	// r0=r1*r0(符号なし)
static final int udiv=16;	// r0=r1/r0(符号なし)
static final int mod=17;	// r0=r1%r0
static final int and=18;	// r0=r1&amp;r0
static final int or=19;	// r0=r1|r0
static final int neg=20;	// r0=-r0
static final int not=21;	// r0=~r0
static final int in=22;	// ポートから入力した値をr0にセット
static final int out=23;	// r0の値をポートに出力
static final int swap=24;	// r0とr1の値を入れ替える
static final int pushr=25;	// レジスタファイル(r1-r3)にr0の値をプッシュ
static final int popr=26;	// レジスタファイル(r1-r3)からr0に値をポップ
static final int pushs=27;	// スタックにr0の値をプッシュ
static final int pops=28;	// スタックからr0に値をポップ
static final int inc_l=29;	// オペランド(ロング型)をインクリメント
static final int dec_l=30;	// オペランド(ロング型)をデクリメント
static final int inc_b=31;	// オペランド(バイト型)をインクリメント
static final int dec_b=32;	// オペランド(バイト型)をデクリメント
static final int callxx_mbr=33;// 構造体のメンバに格納されているアドレスを呼び出す
static final int st_mbr_l=34;// 構造体のメンバ(ロング型)にr0の値を格納する
static final int st_mbr_b=35;// 構造体のメンバ(バイト型)にr0の値を格納する
static final int ld_mbr_l=36;// 構造体のメンバ(ロング型)の値をr0にロードする
static final int ld_mbr_b=37;// 構造体のメンバ(バイト型)の値をr0にロードする
static final int lea_mbr=38;// 構造体のメンバのアドレスをr0にロードする
static final int ldxx_a_v_l=39;// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定=;インデックスは変数)
static final int ld_a_v_l=40;// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定=;インデックスは変数)
static final int ldxx_a_v_b=41;// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定=;インデックスは変数)
static final int ld_a_v_b=42;	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定=;インデックスは変数)
static final int stxx_a_v_l=43;// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定=;インデックスは変数)
static final int st_a_v_l=44;	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定=;インデックスは変数)
static final int stxx_a_v_b=45;// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定=;インデックスは変数)
static final int st_a_v_b=46;	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定=;インデックスは変数)
static final int ldxx_a_k_l=47;// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定=;インデックスは定数)
static final int ld_a_k_l=48;	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定=;インデックスは定数)
static final int ldxx_a_k_b=49;// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定=;インデックスは定数)
static final int ld_a_k_b=50;	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定=;インデックスは定数)
static final int stxx_a_k_l=51;// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定=;インデックスは定数)
static final int st_a_k_l=52;	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定=;インデックスは定数)
static final int stxx_a_k_b=53;// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定=;インデックスは定数)
static final int st_a_k_b=54;	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定=;インデックスは定数)
static final int ldxx_v_l=55;	// 変数(ロング型)の値をr0にロードする(アドレスは間接指定)
static final int ld_v_l=56;	// 変数(ロング型)の値をr0にロードする(アドレスは直接指定)
static final int ldxx_v_b=57;	// 変数(バイト型)の値をr0にロードする(アドレスは間接指定)
static final int ld_v_b=58;	// 変数(バイト型)の値をr0にロードする(アドレスは直接指定)
static final int ld_k=59;		// 定数をr0にセットする
static final int stxx_v_l=60;	// r0の値を変数(ロング型)に格納する(アドレスは間接指定)
static final int st_v_l=61;	// r0の値を変数(ロング型)に格納する(アドレスは直接指定)
static final int stxx_v_b=62;	// r0の値を変数(バイト型)に格納する(アドレスは間接指定)
static final int st_v_b=63;	// r0の値を変数(バイト型)に格納する(アドレスは直接指定)

// レジスタアドレス
static final int REG_PC=0x3ffec;
static final int REG_SP=0x3ffef;
static final int REG_R0=0x3fff2;
static final int REG_R1=0x3fff5;
static final int REG_R2=0x3fff8;
static final int REG_R3=0x3fffb;
</codetext>
</codeclip>
<codeclip>
<ID>_C34</ID>
<x0>167</x0>
<y0>501</y0>
<width>207</width>
<height>83</height>
<codetext>/*  仮想マシンのレジスタセット
  PC: プログラムカウンタ
  R0-R3:  データレジスタ
  SP:  スタックポインタ
*/

</codetext>
</codeclip>
<pin>
<ID>_P35</ID>
<x0>44</x0>
<y0>212</y0>
<width>60</width>
<height>30</height>
<text>inc()</text>
<px>0</px>
<py>124</py>
</pin>
<pin>
<ID>_P36</ID>
<x0>46</x0>
<y0>262</y0>
<width>60</width>
<height>30</height>
<text>dec()</text>
<px>0</px>
<py>143</py>
</pin>
<pin>
<ID>_P37</ID>
<x0>36</x0>
<y0>168</y0>
<width>60</width>
<height>30</height>
<text>home()</text>
<px>0</px>
<py>106</py>
</pin>
<codeclip>
<ID>_C38</ID>
<x0>22</x0>
<y0>305</y0>
<width>187</width>
<height>19</height>
<codetext>int list_no=0; //リスト番号
</codetext>
</codeclip>
<operation>
<ID>_O39</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>174</x0>
<y0>152</y0>
<width>117</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>list_no = 0;


int nn = memory_windows.size();
if( nn &gt; 0){
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R40</ID>
<pin1name>_P37</pin1name>
<pin2name>_O39</pin2name>
</relation>
<operation>
<ID>_O41</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>173</x0>
<y0>197</y0>
<width>117</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>list_no++;


int nn = memory_windows.size();
if( nn &gt; 0 ){
if( list_no &gt;= nn ) list_no = nn -1;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<operation>
<ID>_O42</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>171</x0>
<y0>248</y0>
<width>117</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>list_no--;


int nn = memory_windows.size();
if( nn &gt; 0){
if( list_no &lt; 0 ) list_no = 0;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R43</ID>
<pin1name>_P35</pin1name>
<pin2name>_O41</pin2name>
</relation>
<relation>
<ID>_R44</ID>
<pin1name>_P36</pin1name>
<pin2name>_O42</pin2name>
</relation>
<pin>
<ID>_P45</ID>
<x0>42</x0>
<y0>110</y0>
<width>60</width>
<height>30</height>
<text>clear()</text>
<px>0</px>
<py>47</py>
</pin>
<operation>
<ID>_O46</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>173</x0>
<y0>104</y0>
<width>176</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//メモリウィンドウを消去


memory_windows = new Vector();
list_no =0;
name_field.setText(&quot;&quot;);
start_field.setText(&quot;0&quot;);
end_field.setText(&quot;0&quot;);
</codetext>
</operation>
<relation>
<ID>_R47</ID>
<pin1name>_P45</pin1name>
<pin2name>_O46</pin2name>
</relation>
</xobject>
<codeclip>
<ID>_C9</ID>
<x0>685</x0>
<y0>356</y0>
<width>182</width>
<height>32</height>
<codetext>// 変数
int[] mem;
int reg_pc, reg_r0, reg_r1, reg_r2, reg_r3, reg_sp, reg_cf, reg_zf; 
JButton run_button; int run_mode = 0;
JTextField pc_reg, r0_reg, r1_reg, r2_reg, r3_reg, sp_reg;
JTextField adrs_field, data_field;
JTextArea message_area, disp;
JTextField cmd_line;
JTextField clock_field; int clock=0;
JTextField interval_field; int interval=1000;
JTextField no_field, name_field, start_field, end_field;
JTextField entry_field; int entry_adrs =0;
JTextField break_field; int break_adrs =0;
static final int AD_SIZE = 0x40000;
int is_break;

 int KeyCode=0, KeyCode0 = 0x3f, PrtData=0xff;
 int KeyAck = 0;
 boolean      is_gets = false;

String edit_command = &quot;&quot;;
String edit_inifile_command = &quot;&quot;;
String compile_command = &quot;&quot;;
String terminal_command=&quot;&quot;;// 高速エミュレータ起動コマンド
</codetext>
</codeclip>
<relation>
<ID>_R11</ID>
<pin1name>_A0(_PArun_button)</pin1name>
<pin2name>_X6(_P0)</pin2name>
</relation>
<relation>
<ID>_R16</ID>
<pin1name>_A0(_PAsingle_button)</pin1name>
<pin2name>_X6(_P1)</pin2name>
</relation>
<xobject>
<ID>_X19</ID>
<x0>436</x0>
<y0>109</y0>
<width>231</width>
<height>437</height>
<ID_maker>91</ID_maker>
<objectname>set_variables</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>0</x0>
<y0>141</y0>
<width>164</width>
<height>19</height>
<text>r2_reg_is(JTextField t)</text>
<px>0</px>
<py>133</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>0</x0>
<y0>165</y0>
<width>163</width>
<height>22</height>
<text>r1_reg_is(JTextField t)</text>
<px>1</px>
<py>114</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>1</x0>
<y0>193</y0>
<width>148</width>
<height>23</height>
<text>r0_reg_is(JTextField t)</text>
<px>0</px>
<py>98</py>
</pin>
<pin>
<ID>_P10</ID>
<x0>3</x0>
<y0>357</y0>
<width>205</width>
<height>22</height>
<text>message_area_is(JTextArea t)</text>
<px>0</px>
<py>191</py>
</pin>
<pin>
<ID>_P11</ID>
<x0>0</x0>
<y0>247</y0>
<width>184</width>
<height>21</height>
<text>clock_field_is(JTextField t)</text>
<px>0</px>
<py>209</py>
</pin>
<pin>
<ID>_P13</ID>
<x0>0</x0>
<y0>275</y0>
<width>184</width>
<height>21</height>
<text>start_field_is(JTextField t)</text>
<px>0</px>
<py>244</py>
</pin>
<pin>
<ID>_P14</ID>
<x0>0</x0>
<y0>298</y0>
<width>167</width>
<height>27</height>
<text>end_field_is(JTextField t)</text>
<px>0</px>
<py>265</py>
</pin>
<pin>
<ID>_P15</ID>
<x0>3</x0>
<y0>326</y0>
<width>211</width>
<height>27</height>
<text>interval_field_is(JTextField t)</text>
<px>0</px>
<py>283</py>
</pin>
<pin>
<ID>_P16</ID>
<x0>668</x0>
<y0>78</y0>
<width>52</width>
<height>25</height>
<text>start()</text>
<px>0</px>
<py>31</py>
</pin>
<pin>
<ID>_P17</ID>
<x0>0</x0>
<y0>113</y0>
<width>158</width>
<height>24</height>
<text>pc_reg_is(JTextField t)</text>
<px>0</px>
<py>301</py>
</pin>
<operation>
<ID>_O18</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>726</x0>
<y0>17</y0>
<width>115</width>
<height>48</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>28</inpiny0>
<inpinwidth>32</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>// 初期化する


memory_windows = new Vector();
mem = new int[AD_SIZE];

// 各ボタンを押した時に実行されるコマンドを設定する
String line;
try{

BufferedReader din = new BufferedReader( new FileReader(ini_file));
while( ((line=din.readLine())!=null) ){
if(&quot;.entry&quot;.equals(line)) break;
if(&quot;.break&quot;.equals(line)) break;
if(&quot;.watch&quot;.equals(line)) break;
if( line.startsWith(&quot;edit_command=&quot;)) edit_command=line.substring(13);
if( line.startsWith(&quot;edit_inifile_command=&quot;)) edit_inifile_command=line.substring(21);
if( line.startsWith(&quot;compile_command=&quot;)) compile_command=line.substring(16);
if( line.startsWith(&quot;terminal_command=&quot;)) terminal_command=line.substring(17);
}
if(&quot;.entry&quot;.equals(line)){
  if( (line=din.readLine()) != null) {
    entry_field.setText(line);
    line=din.readLine();
  }
}
if(&quot;.break&quot;.equals(line)){
  if( (line=din.readLine()) != null) {
    break_field.setText(line);
    line=din.readLine();
  }
}
if(&quot;.watch&quot;.equals(line)){
  while(true){
    String name,start,end;
    if((name=din.readLine()) == null) break;
    if((start=din.readLine()) == null) break;
    if((end=din.readLine()) == null) break;
    int s = Integer.parseInt(start);
    int e = Integer.parseInt(end);
    memory_windows.add( new memory_window( name, s, e ) );
  }
}
din.close();
} catch( Exception e ){}

</codetext>
</operation>
<relation>
<ID>_R19</ID>
<pin1name>_P16</pin1name>
<pin2name>_O18</pin2name>
</relation>
<operation>
<ID>_O37</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>211</x0>
<y0>221</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>clock_field = t;
</codetext>
</operation>
<relation>
<ID>_R38</ID>
<pin1name>_P11</pin1name>
<pin2name>_O37</pin2name>
</relation>
<operation>
<ID>_O41</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>453</x0>
<y0>246</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>start_field = t;
</codetext>
</operation>
<relation>
<ID>_R42</ID>
<pin1name>_P13</pin1name>
<pin2name>_O41</pin2name>
</relation>
<operation>
<ID>_O43</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>580</x0>
<y0>273</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>end_field = t;
</codetext>
</operation>
<relation>
<ID>_R44</ID>
<pin1name>_P14</pin1name>
<pin2name>_O43</pin2name>
</relation>
<operation>
<ID>_O45</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>709</x0>
<y0>301</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>interval_field = t;
</codetext>
</operation>
<relation>
<ID>_R46</ID>
<pin1name>_P15</pin1name>
<pin2name>_O45</pin2name>
</relation>
<operation>
<ID>_O47</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>856</x0>
<y0>331</y0>
<width>139</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextArea t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>message_area = t;
</codetext>
</operation>
<relation>
<ID>_R48</ID>
<pin1name>_P10</pin1name>
<pin2name>_O47</pin2name>
</relation>
<operation>
<ID>_O49</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>415</x0>
<y0>87</y0>
<width>137</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>pc_reg = t;
</codetext>
</operation>
<relation>
<ID>_R50</ID>
<pin1name>_P17</pin1name>
<pin2name>_O49</pin2name>
</relation>
<operation>
<ID>_O51</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>556</x0>
<y0>113</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r2_reg = t;
</codetext>
</operation>
<relation>
<ID>_R52</ID>
<pin1name>_P0</pin1name>
<pin2name>_O51</pin2name>
</relation>
<operation>
<ID>_O53</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>690</x0>
<y0>139</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r1_reg = t;
</codetext>
</operation>
<relation>
<ID>_R54</ID>
<pin1name>_P1</pin1name>
<pin2name>_O53</pin2name>
</relation>
<operation>
<ID>_O55</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>822</x0>
<y0>167</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r0_reg = t;
</codetext>
</operation>
<relation>
<ID>_R56</ID>
<pin1name>_P2</pin1name>
<pin2name>_O55</pin2name>
</relation>
<pin>
<ID>_P59</ID>
<x0>0</x0>
<y0>415</y0>
<width>169</width>
<height>22</height>
<text>run_button_is(JButton b)</text>
<px>0</px>
<py>416</py>
</pin>
<operation>
<ID>_O60</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>211</x0>
<y0>390</y0>
<width>123</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>88</inpinwidth>
<inpinheight>19</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>run_button = b;
</codetext>
</operation>
<relation>
<ID>_R61</ID>
<pin1name>_P59</pin1name>
<pin2name>_O60</pin2name>
</relation>
<pin>
<ID>_P62</ID>
<x0>0</x0>
<y0>449</y0>
<width>180</width>
<height>26</height>
<text>adrs_field_is(JTextField t)</text>
<px>0</px>
<py>339</py>
</pin>
<pin>
<ID>_P63</ID>
<x0>0</x0>
<y0>488</y0>
<width>169</width>
<height>24</height>
<text>data_field_is(JTextField t)</text>
<px>0</px>
<py>319</py>
</pin>
<operation>
<ID>_O65</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>338</x0>
<y0>424</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>adrs_field = t;
</codetext>
</operation>
<operation>
<ID>_O66</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>482</x0>
<y0>462</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>data_field = t;
</codetext>
</operation>
<relation>
<ID>_R67</ID>
<pin1name>_P62</pin1name>
<pin2name>_O65</pin2name>
</relation>
<relation>
<ID>_R68</ID>
<pin1name>_P63</pin1name>
<pin2name>_O66</pin2name>
</relation>
<pin>
<ID>_P69</ID>
<x0>0</x0>
<y0>520</y0>
<width>182</width>
<height>30</height>
<text>name_field_is(JTextField t)</text>
<px>0</px>
<py>227</py>
</pin>
<operation>
<ID>_O70</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>623</x0>
<y0>497</y0>
<width>134</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>name_field = t;
</codetext>
</operation>
<relation>
<ID>_R71</ID>
<pin1name>_P69</pin1name>
<pin2name>_O70</pin2name>
</relation>
<pin>
<ID>_P72</ID>
<x0>0</x0>
<y0>554</y0>
<width>154</width>
<height>24</height>
<text>sp_reg_is(JTextField t)</text>
<px>0</px>
<py>169</py>
</pin>
<operation>
<ID>_O74</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>764</x0>
<y0>527</y0>
<width>134</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>sp_reg = t;
</codetext>
</operation>
<relation>
<ID>_R75</ID>
<pin1name>_P72</pin1name>
<pin2name>_O74</pin2name>
</relation>
<pin>
<ID>_P78</ID>
<x0>0</x0>
<y0>609</y0>
<width>179</width>
<height>24</height>
<text>break_field_is(JTextField t)</text>
<px>0</px>
<py>79</py>
</pin>
<operation>
<ID>_O79</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>429</x0>
<y0>583</y0>
<width>137</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>break_field = t;
</codetext>
</operation>
<relation>
<ID>_R80</ID>
<pin1name>_P78</pin1name>
<pin2name>_O79</pin2name>
</relation>
<operation>
<ID>_O81</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>464</x0>
<y0>13</y0>
<width>209</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>149</outpinx0>
<outpiny0>26</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 設定ファイルを更新・編集する

try{

BufferedWriter dout = new BufferedWriter( new FileWriter(ini_file));
dout.write(&quot;edit_command=&quot;+edit_command+&quot;\n&quot;);
dout.write(&quot;edit_inifile_command=&quot;+edit_inifile_command+&quot;\n&quot;);
dout.write(&quot;compile_command=&quot;+compile_command+&quot;\n&quot;);
dout.write(&quot;terminal_command=&quot;+terminal_command+&quot;\n&quot;);
dout.write(&quot;.entry\n&quot;);
dout.write(entry_field.getText()+&quot;\n&quot;);
dout.write(&quot;.break\n&quot;);
dout.write(break_field.getText()+&quot;\n&quot;);
dout.write(&quot;.watch\n&quot;);
int nn = memory_windows.size();
for( int i = 0;i &lt; nn; i++ ){
  memory_window w = (memory_window)(memory_windows.get(i));
  dout.write( w.name+&quot;\n&quot;+w.start+&quot;\n&quot;+w.end+&quot;\n&quot;);
}
dout.close();
} catch( Exception e ){}
exec_command(edit_inifile_command);
</codetext>
</operation>
<relation>
<ID>_R82</ID>
<pin1name>_O81</pin1name>
<pin2name>_O18</pin2name>
</relation>
<pin>
<ID>_P83</ID>
<x0>360</x0>
<y0>30</y0>
<width>60</width>
<height>30</height>
<text>init()</text>
<px>0</px>
<py>47</py>
</pin>
<relation>
<ID>_R84</ID>
<pin1name>_P83</pin1name>
<pin2name>_O81</pin2name>
</relation>
<pin>
<ID>_P85</ID>
<x0>467</x0>
<y0>385</y0>
<width>189</width>
<height>26</height>
<text>entry_field_is(JTextField t)</text>
<px>0</px>
<py>62</py>
</pin>
<pin>
<ID>_P86</ID>
<x0>630</x0>
<y0>233</y0>
<width>159</width>
<height>24</height>
<text>r3_reg_is(JTextField t)</text>
<px>0</px>
<py>153</py>
</pin>
<operation>
<ID>_O87</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>710</x0>
<y0>407</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>entry_field = t;
</codetext>
</operation>
<relation>
<ID>_R88</ID>
<pin1name>_P85</pin1name>
<pin2name>_O87</pin2name>
</relation>
<operation>
<ID>_O89</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>822</x0>
<y0>229</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r3_reg = t;
</codetext>
</operation>
<relation>
<ID>_R90</ID>
<pin1name>_P86</pin1name>
<pin2name>_O89</pin2name>
</relation>
</xobject>
<relation>
<ID>_R33</ID>
<pin1name>_A0(_Pmessage_area)</pin1name>
<pin2name>_X19(_P10)</pin2name>
</relation>
<relation>
<ID>_R34</ID>
<pin1name>_A0(_Pclock_field)</pin1name>
<pin2name>_X19(_P11)</pin2name>
</relation>
<relation>
<ID>_R36</ID>
<pin1name>_A0(_Pstart_field)</pin1name>
<pin2name>_X19(_P13)</pin2name>
</relation>
<relation>
<ID>_R37</ID>
<pin1name>_A0(_Pend_field)</pin1name>
<pin2name>_X19(_P14)</pin2name>
</relation>
<relation>
<ID>_R38</ID>
<pin1name>_A0(_Pinterval_field)</pin1name>
<pin2name>_X19(_P15)</pin2name>
</relation>
<codeclip>
<ID>_C40</ID>
<x0>686</x0>
<y0>110</y0>
<width>302</width>
<height>152</height>
<codetext>// メモリウィンドウ
Vector memory_windows;
class memory_window{
  String name;
  int start;
  int end;
  memory_window( String n, int s, int e ){
    name = n; start=s; end=e;
  }
}
</codetext>
</codeclip>
<xobject>
<ID>_X42</ID>
<x0>0</x0>
<y0>395</y0>
<width>135</width>
<height>110</height>
<ID_maker>13</ID_maker>
<objectname>memory_edit</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>17</x0>
<y0>33</y0>
<width>125</width>
<height>25</height>
<text>adrs_set(String s)</text>
<px>0</px>
<py>29</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>52</x0>
<y0>98</y0>
<width>60</width>
<height>30</height>
<text>inc()</text>
<px>0</px>
<py>50</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>54</x0>
<y0>150</y0>
<width>60</width>
<height>30</height>
<text>dec()</text>
<px>0</px>
<py>67</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>39</x0>
<y0>220</y0>
<width>112</width>
<height>25</height>
<text>mem_set()</text>
<px>0</px>
<py>83</py>
</pin>
<operation>
<ID>_O4</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>248</x0>
<y0>22</y0>
<width>233</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>28</inpiny0>
<inpinwidth>78</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 指定アドレスメモリのデータを表示


int address = Integer.parseInt( s, 16 );
adrs_field.setText(hex6(address));
data_field.setText(hex2(mem[address]));
</codetext>
</operation>
<relation>
<ID>_R5</ID>
<pin1name>_P0</pin1name>
<pin2name>_O4</pin2name>
</relation>
<operation>
<ID>_O6</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>251</x0>
<y0>86</y0>
<width>263</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// アドレスを+1してメモリのデータを表示


int address = Integer.parseInt( adrs_field.getText(), 16 );
address++;
if( address &gt; 0xffffff ) address=0;
adrs_field.setText(hex6(address));
data_field.setText(hex2(mem[address]));
</codetext>
</operation>
<relation>
<ID>_R7</ID>
<pin1name>_P1</pin1name>
<pin2name>_O6</pin2name>
</relation>
<operation>
<ID>_O9</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>250</x0>
<y0>142</y0>
<width>268</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// アドレスを-1してメモリのデータを表示


int address = Integer.parseInt( adrs_field.getText(), 16 );
address--;
if( address &lt; 0 ) address=0xffffff;
adrs_field.setText(hex6(address));
data_field.setText(hex2(mem[address]));
</codetext>
</operation>
<relation>
<ID>_R10</ID>
<pin1name>_P2</pin1name>
<pin2name>_O9</pin2name>
</relation>
<operation>
<ID>_O11</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>255</x0>
<y0>206</y0>
<width>267</width>
<height>43</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 表示されているデータをメモリに書き込む

int address = Integer.parseInt( adrs_field.getText(), 16 );
mem[address] = Integer.parseInt( data_field.getText(), 16 );
io_sync();
</codetext>
</operation>
<relation>
<ID>_R12</ID>
<pin1name>_P3</pin1name>
<pin2name>_O11</pin2name>
</relation>
</xobject>
<relation>
<ID>_R44</ID>
<pin1name>_A0(_PAinc_addr)</pin1name>
<pin2name>_X42(_P1)</pin2name>
</relation>
<relation>
<ID>_R45</ID>
<pin1name>_A0(_PAdec_addr)</pin1name>
<pin2name>_X42(_P2)</pin2name>
</relation>
<relation>
<ID>_R46</ID>
<pin1name>_A0(_PAmem_set)</pin1name>
<pin2name>_X42(_P3)</pin2name>
</relation>
<codeclip>
<ID>_C48</ID>
<x0>696</x0>
<y0>78</y0>
<width>229</width>
<height>28</height>
<codetext>// 長さが2文字の16進数文字列を返す
public String hex2( int i ){
  String s = Integer.toHexString(i);
  int l = s.length();
  if( l ==1 ) return &quot;0&quot;+s;
  return s;
}
</codetext>
</codeclip>
<relation>
<ID>_R53</ID>
<pin1name>_A0(_Prun_button)</pin1name>
<pin2name>_X19(_P59)</pin2name>
</relation>
<pin>
<ID>_P57</ID>
<x0>594</x0>
<y0>626</y0>
<width>63</width>
<height>22</height>
<text>io_sync()</text>
<px>278</px>
<py>29</py>
</pin>
<プロパティ>
<ID>properties</ID>
<LookandFeel>javax.swing.plaf.metal.MetalLookAndFeel</LookandFeel>
<MainWinx0>0</MainWinx0>
<MainWiny0>0</MainWiny0>
<MainWinWidth>1024</MainWinWidth>
<MainWinHeight>741</MainWinHeight>
<MesgWinx0>0</MesgWinx0>
<MesgWiny0>0</MesgWiny0>
<MesgWinWidth>1024</MesgWinWidth>
<MesgWinHeight>745</MesgWinHeight>
<FileWinx0>36</FileWinx0>
<FileWiny0>476</FileWiny0>
<FileWinWidth>578</FileWinWidth>
<FileWinHeight>262</FileWinHeight>
<EditWinx0>347</EditWinx0>
<EditWiny0>0</EditWiny0>
<EditWinWidth>676</EditWinWidth>
<EditWinHeight>541</EditWinHeight>
<PropWinx0>1</PropWinx0>
<PropWiny0>1</PropWiny0>
<PropWinWidth>615</PropWinWidth>
<PropWinHeight>448</PropWinHeight>
<DividerLocation1>2</DividerLocation1>
<DividerLocation2>2</DividerLocation2>
<ToolBarVisible>1</ToolBarVisible>
<ViewSourceAtCompile>0</ViewSourceAtCompile>
<NoSourceCreate>0</NoSourceCreate>
<JavaEditCommand>geany</JavaEditCommand>
<JavaViewCommand></JavaViewCommand>
<HelpCommand>xdg-open ./help/manual.html</HelpCommand>
<ApplicationType>0</ApplicationType>
<CompileCommand0>./compile_java</CompileCommand0>
<RunCommand0>./run_java</RunCommand0>
<GUIDesignerCommand0>java -jar guidsin.jar -java</GUIDesignerCommand0>
<ImportFiles0> import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.geom.*;
import java.awt.print.*;
import javax.swing.border.*;
import javax.swing.filechooser.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.image.BufferedImage;
import javax.sound.sampled.*;

class Starter{
  public static void main( String args[] ){
    %AppName% ap = new %AppName%();
    ap.ARGS = args;
    ap.Start();
  }
}
</ImportFiles0>
<ProgramStartupCode0> String[] ARGS;
</ProgramStartupCode0>
<NativeHelpCommand0></NativeHelpCommand0>
<CompileCommand1></CompileCommand1>
<RunCommand1></RunCommand1>
<GUIDesignerCommand1>java -jar guidsin.jar -applet</GUIDesignerCommand1>
<ImportFiles1> import java.awt.*;
 import java.awt.event.*;
 import java.applet.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
 public class javatext extends Applet {
   %AppName% ap;
   public void init() {
     ap = new %AppName%();
     ap.APPLET = this;
     ap.Start();
   }
 }
</ImportFiles1>
<ProgramStartupCode1> Applet APPLET;
</ProgramStartupCode1>
<NativeHelpCommand1></NativeHelpCommand1>
<CompileCommand2></CompileCommand2>
<RunCommand2></RunCommand2>
<GUIDesignerCommand2></GUIDesignerCommand2>
<ImportFiles2>#include &lt;stdio.h&gt;

void Startup();
</ImportFiles2>
<ProgramStartupCode2>int main(){
 Startup();
 %AppName%::Start();
 }
</ProgramStartupCode2>
<NativeHelpCommand2></NativeHelpCommand2>
<CompileCommand3></CompileCommand3>
<RunCommand3></RunCommand3>
<GUIDesignerCommand3>java -jar guidsin.jar -cpp</GUIDesignerCommand3>
<ImportFiles3>#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;math.h&gt;
#include &quot;Ekagen.h&quot;
void Startup();
</ImportFiles3>
<ProgramStartupCode3>void Emain(){
Startup();
%AppName%::Start();
}
</ProgramStartupCode3>
<NativeHelpCommand3></NativeHelpCommand3>
<MoveStep>8</MoveStep>
<ImageEditCommand></ImageEditCommand>
<CompilerFileName>javac.exe</CompilerFileName>
<CompileCommand4>./compile_android Test com example test</CompileCommand4>
<RunCommand4>./run_android Test com example test</RunCommand4>
<GUIDesignerCommand4>java -jar guidsin.jar -android</GUIDesignerCommand4>
<ImportFiles4>package com.example.test;

import android.os.Bundle;
import android.app.Activity;
import android.view.View;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.widget.Button;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.widget.EditText;
import android.text.SpannableStringBuilder;
import android.text.TextWatcher;
import android.text.Editable;
import android.graphics.Matrix;
import android.graphics.Typeface;
import android.graphics.RectF;
import android.graphics.BitmapFactory;
import java.io.*;
 import java.net.*;
import java.util.*;
import java.text.SimpleDateFormat;
import android.media.MediaPlayer;
import android.os.Handler;
import android.content.res.Configuration;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.app.Activity;
import android.graphics.Color;

import android.widget.AbsoluteLayout;
import android.widget.*;
import android.view.Gravity;
import android.view.View.OnClickListener;

import android.hardware.Camera;

public class HelloWorld extends Activity {
  public void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    %AppName% ap = new %AppName%();
    ap.ACTIVITY = this;
    ap.Start();
  }
}
</ImportFiles4>
<ProgramStartupCode4>Activity ACTIVITY;
</ProgramStartupCode4>
<NativeHelpCommand4>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.example.test&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot; &gt;

    
    
  &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.usb.host&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt;
  &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;

  &lt;uses-sdk android:minSdkVersion=&quot;3&quot; android:targetSdkVersion=&quot;21&quot;/&gt;
  
 
    &lt;application android:label=&quot;@string/app_name&quot; &gt;
        &lt;activity
            android:name=&quot;HelloWorld&quot;
            android:label=&quot;@string/app_name&quot; &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</NativeHelpCommand4>
<HtmlEditCommand></HtmlEditCommand>
<CompileCommand5></CompileCommand5>
<RunCommand5></RunCommand5>
<GUIDesignerCommand5></GUIDesignerCommand5>
<ImportFiles5></ImportFiles5>
<ProgramStartupCode5>gosub @_PSTART
end
</ProgramStartupCode5>
<NativeHelpCommand5></NativeHelpCommand5>
<NoOptimizePin>0</NoOptimizePin>
<CompileCommand6>./compile_c</CompileCommand6>
<RunCommand6>./run_c</RunCommand6>
<GUIDesignerCommand6></GUIDesignerCommand6>
<ImportFiles6>#include &lt;setjmp.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;math.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#include &lt;X11/Xlib.h&gt;
#include &lt;X11/Xutil.h&gt;
#include &lt;X11/Xlocale.h&gt; /* ロケール用ヘッダーファイル */
#include &lt;X11/xpm.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;
#include &lt;termios.h&gt;
#include &lt;errno.h&gt;
</ImportFiles6>
<ProgramStartupCode6>int ARGC; char** ARGV;
int main( int argc, char** argv ){
  ARGC=argc;
  ARGV=argv;
  _PSTART();
}
</ProgramStartupCode6>
<NativeHelpCommand6></NativeHelpCommand6>
<IDF_LocalVariable5>\</IDF_LocalVariable5>
<IDF_LocalVariable7>\</IDF_LocalVariable7>
<CompileCommand7></CompileCommand7>
<RunCommand7></RunCommand7>
<GUIDesignerCommand7></GUIDesignerCommand7>
<ImportFiles7></ImportFiles7>
<ProgramStartupCode7></ProgramStartupCode7>
<NativeHelpCommand7></NativeHelpCommand7>
</プロパティ>
<relation>
<ID>_R60</ID>
<pin1name>_A0(_Pstart)</pin1name>
<pin2name>_X19(_P16)</pin2name>
</relation>
<codeclip>
<ID>_C62</ID>
<x0>695</x0>
<y0>38</y0>
<width>230</width>
<height>35</height>
<codetext>// 長さが6文字の16進数文字列を返す
public String hex6( int i ){
  String s = Integer.toHexString(i);
  int l = s.length();
  if( l == 1 ) return &quot;00000&quot;+s;
  if( l == 2 ) return &quot;0000&quot;+s;
  if( l == 3 ) return &quot;000&quot;+s;
  if( l == 4 ) return &quot;00&quot;+s;
  if( l == 5 ) return &quot;0&quot;+s;
  return s;
}
</codetext>
</codeclip>
<relation>
<ID>_R68</ID>
<pin1name>_A0(_Ppc_reg)</pin1name>
<pin2name>_X19(_P17)</pin2name>
</relation>
<codeclip>
<ID>_C70</ID>
<x0>686</x0>
<y0>271</y0>
<width>301</width>
<height>38</height>
<codetext>//コマンドを実行して結果をコンソールに表示する
public void exec_command( String cmd ){

      Runtime runtime = Runtime.getRuntime();
      Process process;
      try {            //実行するコマンドを指定
        process = runtime.exec(cmd);
        new PrintThread(process.getInputStream()).start();
        new PrintThread(process.getErrorStream()).start();
        process.waitFor();
      } catch (Exception e) {}
    }


class PrintThread extends Thread{
  BufferedReader reader;
  PrintThread( InputStream s ){
    reader = new BufferedReader(new InputStreamReader(s));
  }
  
  public void run(){
    String line;
    try{
      while ((line = reader.readLine()) != null) message_area.append(line+&quot;\n&quot;);
      reader.close();
    } catch( IOException ie ){ }
  }
}
</codetext>
</codeclip>
<relation>
<ID>_R71</ID>
<pin1name>_A0(_Padrs_field)</pin1name>
<pin2name>_X19(_P62)</pin2name>
</relation>
<relation>
<ID>_R72</ID>
<pin1name>_A0(_Pdata_field)</pin1name>
<pin2name>_X19(_P63)</pin2name>
</relation>
<relation>
<ID>_R73</ID>
<pin1name>_A0(_PAadrs_field)</pin1name>
<pin2name>_X42(_P0)</pin2name>
</relation>
<xobject>
<ID>_X74</ID>
<x0>8</x0>
<y0>6</y0>
<width>101</width>
<height>150</height>
<ID_maker>20</ID_maker>
<objectname>command</objectname>
<description></description>
<pin>
<ID>_P4</ID>
<x0>32</x0>
<y0>49</y0>
<width>60</width>
<height>30</height>
<text>compile()</text>
<px>1</px>
<py>54</py>
</pin>
<pin>
<ID>_P5</ID>
<x0>36</x0>
<y0>127</y0>
<width>60</width>
<height>30</height>
<text>edit()</text>
<px>0</px>
<py>121</py>
</pin>
<operation>
<ID>_O10</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>161</x0>
<y0>46</y0>
<width>258</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(compile_command);


try{

BufferedReader din = new BufferedReader( new FileReader( &quot;r.out&quot; ) );

while(true){
  String line;
  int adrs,data;
  if((line=din.readLine()) == null )  break;
  adrs = Integer.parseInt(line);
  if((line=din.readLine()) == null )  break;
  data = Integer.parseInt(line);
  mem[adrs] = data;
}

din.close();


} catch( IOException ie ){message_area.append(&quot;load error!\n&quot;);}
</codetext>
</operation>
<operation>
<ID>_O11</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>172</x0>
<y0>116</y0>
<width>233</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(edit_command);
</codetext>
</operation>
<relation>
<ID>_R12</ID>
<pin1name>_P5</pin1name>
<pin2name>_O11</pin2name>
</relation>
<relation>
<ID>_R13</ID>
<pin1name>_P4</pin1name>
<pin2name>_O10</pin2name>
</relation>
<pin>
<ID>_P14</ID>
<x0>50</x0>
<y0>370</y0>
<width>60</width>
<height>30</height>
<text>clear()</text>
<px>0</px>
<py>77</py>
</pin>
<operation>
<ID>_O15</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>176</x0>
<y0>368</y0>
<width>168</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>30</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// レジスタ等のクリア


 pc_reg.setText(entry_field.getText());
 r0_reg.setText(&quot;0&quot;);
 r1_reg.setText(&quot;0&quot;);
 r2_reg.setText(&quot;0&quot;);
 r3_reg.setText(&quot;0&quot;);
 sp_reg.setText(&quot;0000&quot;);
 clock_field.setText(&quot;0&quot;);
 message_area.setText(&quot;&quot;);
 disp.setText(&quot;&quot;);
</codetext>
</operation>
<relation>
<ID>_R16</ID>
<pin1name>_P14</pin1name>
<pin2name>_O15</pin2name>
</relation>
<pin>
<ID>_P17</ID>
<x0>32</x0>
<y0>204</y0>
<width>75</width>
<height>25</height>
<text>terminal()</text>
<px>0</px>
<py>99</py>
</pin>
<operation>
<ID>_O18</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>176</x0>
<y0>188</y0>
<width>244</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(terminal_command);
</codetext>
</operation>
<relation>
<ID>_R19</ID>
<pin1name>_P17</pin1name>
<pin2name>_O18</pin2name>
</relation>
</xobject>
<relation>
<ID>_R75</ID>
<pin1name>_A0(_PAcompile_button)</pin1name>
<pin2name>_X74(_P4)</pin2name>
</relation>
<relation>
<ID>_R78</ID>
<pin1name>_A0(_PAedit_button)</pin1name>
<pin2name>_X74(_P5)</pin2name>
</relation>
<relation>
<ID>_R80</ID>
<pin1name>_A0(_Pname_field)</pin1name>
<pin2name>_X19(_P69)</pin2name>
</relation>
<relation>
<ID>_R84</ID>
<pin1name>_A0(_Psp_reg)</pin1name>
<pin2name>_X19(_P72)</pin2name>
</relation>
<relation>
<ID>_R87</ID>
<pin1name>_A0(_PAclr_button)</pin1name>
<pin2name>_X74(_P14)</pin2name>
</relation>
<codeclip>
<ID>_C88</ID>
<x0>687</x0>
<y0>316</y0>
<width>172</width>
<height>33</height>
<codetext>// 仮想マシンの命令セット
String opcode[] ={
&quot; hlt&quot;,			// 停止する
&quot; jmp&quot;,			// ジャンプする(アドレスは直接指定)
&quot; xxjmp&quot;,		// r0に格納されているアドレスにジャンプする
&quot; jge&quot;,			// 演算結果が&gt;=0ならジャンプする
&quot; jlt&quot;,			// 演算結果が&gt;0ならジャンプする
&quot; jz&quot;,			// 演算結果が==0ならジャンプする
&quot; jnz&quot;,			// 演算結果が!=0ならジャンプする
&quot; call&quot;,		// サブルーチンを呼び出す(アドレスは直接指定)
&quot; callxx&quot;,		// サブルーチンを呼び出す(アドレスは間接指定)
&quot; xxcall&quot;,		// r0に格納されているアドレスを呼び出す
&quot; ret&quot;,			// サブルーチンから復帰する
&quot; add&quot;,			// r0=r1+r0
&quot; sub&quot;,			// r0=r1-r0
&quot; mul&quot;,			// r0=r1*r0
&quot; div&quot;,			// r0=r1/r0
&quot; umul&quot;,		// r0=r1*r0(符号なし)
&quot; udiv&quot;,		// r0=r1/r0(符号なし)
&quot; mod&quot;,			// r0=r1%r0
&quot; and&quot;,			// r0=r1&amp;r0
&quot; or&quot;,			// r0=r1|r0
&quot; neg&quot;,			// r0=-r0
&quot; not&quot;,			// r0=~r0
&quot; in&quot;,			// ポートから入力した値をr0にセット
&quot; out&quot;,			// r0の値をポートに出力
&quot; swap&quot;,		// r0とr1の値を入れ替える
&quot; pushr&quot;,		// レジスタファイル(r1-r3)にr0の値をプッシュ
&quot; popr&quot;,		// レジスタファイル(r1-r3)からr0に値をポップ
&quot; pushs&quot;,		// スタックにr0の値をプッシュ
&quot; pops&quot;,		// スタックからr0に値をポップ
&quot; inc_l&quot;,		// オペランド(ロング型)をインクリメント
&quot; dec_l&quot;,		// オペランド(ロング型)をデクリメント
&quot; inc_b&quot;,		// オペランド(バイト型)をインクリメント
&quot; dec_b&quot;,		// オペランド(バイト型)をデクリメント
&quot; callxx_mbr&quot;,	// 構造体のメンバに格納されているアドレスを呼び出す
&quot; st_mbr_l&quot;,	// 構造体のメンバ(ロング型)にr0の値を格納する
&quot; st_mbr_b&quot;,	// 構造体のメンバ(バイト型)にr0の値を格納する
&quot; ld_mbr_l&quot;,	// 構造体のメンバ(ロング型)の値をr0にロードする
&quot; ld_mbr_b&quot;,	// 構造体のメンバ(バイト型)の値をr0にロードする
&quot; lea_mbr&quot;,		// 構造体のメンバのアドレスをr0にロードする
&quot; ldxx_a_v_l&quot;,	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは変数)
&quot; ld_a_v_l&quot;,	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは変数)
&quot; ldxx_a_v_b&quot;,	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは変数)
&quot; ld_a_v_b&quot;,	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは変数)
&quot; stxx_a_v_l&quot;,	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定,インデックスは変数)
&quot; st_a_v_l&quot;,	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定,インデックスは変数)
&quot; stxx_a_v_b&quot;,	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定,インデックスは変数)
&quot; st_a_v_b&quot;,	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定,インデックスは変数)
&quot; ldxx_a_k_l&quot;,	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは定数)
&quot; ld_a_k_l&quot;,	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは定数)
&quot; ldxx_a_k_b&quot;,	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは定数)
&quot; ld_a_k_b&quot;,	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは定数)
&quot; stxx_a_k_l&quot;,	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定,インデックスは定数)
&quot; st_a_k_l&quot;,	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定,インデックスは定数)
&quot; stxx_a_k_b&quot;,	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定,インデックスは定数)
&quot; st_a_k_b&quot;,	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定,インデックスは定数)
&quot; ldxx_v_l&quot;,	// 変数(ロング型)の値をr0にロードする(アドレスは間接指定)
&quot; ld_v_l&quot;,		// 変数(ロング型)の値をr0にロードする(アドレスは直接指定)
&quot; ldxx_v_b&quot;,	// 変数(バイト型)の値をr0にロードする(アドレスは間接指定)
&quot; ld_v_b&quot;,		// 変数(バイト型)の値をr0にロードする(アドレスは直接指定)
&quot; ld_k&quot;,		// 定数をr0にセットする
&quot; stxx_v_l&quot;,	// r0の値を変数(ロング型)に格納する(アドレスは間接指定)
&quot; st_v_l&quot;,		// r0の値を変数(ロング型)に格納する(アドレスは直接指定)
&quot; stxx_v_b&quot;,	// r0の値を変数(バイト型)に格納する(アドレスは間接指定)
&quot; st_v_b&quot;		// r0の値を変数(バイト型)に格納する(アドレスは直接指定)
};

</codetext>
</codeclip>
<relation>
<ID>_R89</ID>
<pin1name>_A0(_PAadd_list)</pin1name>
<pin2name>_X6(_P2)</pin2name>
</relation>
<relation>
<ID>_R90</ID>
<pin1name>_A0(_PAdel_list)</pin1name>
<pin2name>_X6(_P3)</pin2name>
</relation>
<relation>
<ID>_R91</ID>
<pin1name>_A0(_PAinc_list)</pin1name>
<pin2name>_X6(_P35)</pin2name>
</relation>
<relation>
<ID>_R92</ID>
<pin1name>_A0(_PAdec_list)</pin1name>
<pin2name>_X6(_P36)</pin2name>
</relation>
<relation>
<ID>_R93</ID>
<pin1name>_A0(_PAhome_list)</pin1name>
<pin2name>_X6(_P37)</pin2name>
</relation>
<operation>
<ID>_O94</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>456</x0>
<y0>698</y0>
<width>125</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextArea t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>109</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>disp = t;
</codetext>
</operation>
<relation>
<ID>_R95</ID>
<pin1name>_A0(_Pdisp_area)</pin1name>
<pin2name>_O94</pin2name>
</relation>
<operation>
<ID>_O96</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>455</x0>
<y0>563</y0>
<width>125</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>109</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>cmd_line = t;


cmd_line.getDocument().addDocumentListener(listener = new keyinput_listener());
</codetext>
</operation>
<relation>
<ID>_R97</ID>
<pin1name>_A0(_Pcmd_field)</pin1name>
<pin2name>_O96</pin2name>
</relation>
<operation>
<ID>_O98</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>453</x0>
<y0>632</y0>
<width>128</width>
<height>55</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>33</inpiny0>
<inpinwidth>81</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>KeyCode = 10;
</codetext>
</operation>
<relation>
<ID>_R99</ID>
<pin1name>_A0(_PAcmd_field)</pin1name>
<pin2name>_O98</pin2name>
</relation>
<codeclip>
<ID>_C100</ID>
<x0>596</x0>
<y0>567</y0>
<width>364</width>
<height>36</height>
<codetext>keyinput_listener listener;
class keyinput_listener implements DocumentListener{

  String s;
  boolean allow = true;
  public void caretPositionChanged(InputMethodEvent e){}
  public void changedUpdate(DocumentEvent e){}//属性が変更されたときの処理
  public void insertUpdate(DocumentEvent e){
    KeyCode = 0;
    if(!is_gets){
      if( allow &amp;&amp; (s = cmd_line.getText()).length() &gt; 0 ){
        allow = false;
        KeyCode = (int)(byte)s.charAt(0);
        allow = true;
         }
      }
   }
  public void removeUpdate(DocumentEvent e){}//ドキュメントから削除されたときの処理

}
</codetext>
</codeclip>
<operation>
<ID>_O101</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>679</x0>
<y0>611</y0>
<width>182</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// メモリと周辺装置の同期



if( KeyCode != 0 ){
  if( KeyCode == &apos;\n&apos; ) KeyCode0 = 61;
  else if( KeyCode == &apos;\r&apos; ) KeyCode0 = 61;
  else if( KeyCode &lt; 32 )  KeyCode0 = 62;
  else if( KeyCode &gt;= 0x20 &amp;&amp; KeyCode &lt;= 0x5f ) KeyCode0 = KeyCode - 0x20;
  else if( KeyCode &gt;= &apos;a&apos; &amp;&amp; KeyCode &lt;= &apos;z&apos; )   KeyCode0 = KeyCode - &apos;a&apos; + &apos;A&apos; - &apos; &apos;;
  KeyCode = 0;
  cmd_line.setText(&quot;&quot;);
}

if( PrtData != 0xff ){
  int c = PrtData;
  if(c == 61 ) c = &apos;\n&apos;;// 改行コード
  else if(c == 62 ) c = &apos;\r&apos;;// エスケープコード
  else if(c == 63 ) c = &apos;\0&apos;;// ヌル文字
  else c+= 32;
  if( c == &apos;\r&apos; ) disp.setText(&quot;&quot;);
  else disp.append(&quot;&quot;+(char)(byte)(c));
  PrtData = 0xff;
}
</codetext>
</operation>
<relation>
<ID>_R102</ID>
<pin1name>_P57</pin1name>
<pin2name>_O101</pin2name>
</relation>
<codeclip>
<ID>_C104</ID>
<x0>680</x0>
<y0>490</y0>
<width>277</width>
<height>40</height>
<codetext>// 初期化ファイル
File ini_file=new File(&quot;card6vm_sym.ini&quot;);

</codetext>
</codeclip>
<relation>
<ID>_R105</ID>
<pin1name>_A0(_PAclear_list)</pin1name>
<pin2name>_X6(_P45)</pin2name>
</relation>
<relation>
<ID>_R107</ID>
<pin1name>_A0(_Pbreak_field)</pin1name>
<pin2name>_X19(_P78)</pin2name>
</relation>
<relation>
<ID>_R108</ID>
<pin1name>_A0(_PAinifile_button)</pin1name>
<pin2name>_X19(_P83)</pin2name>
</relation>
<relation>
<ID>_R110</ID>
<pin1name>_A0(_Pentry_field)</pin1name>
<pin2name>_X19(_P85)</pin2name>
</relation>
<relation>
<ID>_R111</ID>
<pin1name>_A0(_Pr0_reg)</pin1name>
<pin2name>_X19(_P2)</pin2name>
</relation>
<relation>
<ID>_R112</ID>
<pin1name>_A0(_Pr1_reg)</pin1name>
<pin2name>_X19(_P1)</pin2name>
</relation>
<relation>
<ID>_R113</ID>
<pin1name>_A0(_Pr2_reg)</pin1name>
<pin2name>_X19(_P0)</pin2name>
</relation>
<relation>
<ID>_R114</ID>
<pin1name>_A0(_Pr3_reg)</pin1name>
<pin2name>_X19(_P86)</pin2name>
</relation>
<relation>
<ID>_R115</ID>
<pin1name>_A0(_PAterminal_button)</pin1name>
<pin2name>_X74(_P17)</pin2name>
</relation>
<pin>
<ID>_P116</ID>
<x0>0</x0>
<y0>179</y0>
<width>93</width>
<height>30</height>
<text>out(JFrame f)</text>
<px>2</px>
<py>38</py>
</pin>
<relation>
<ID>_R117</ID>
<pin1name>_A0(_PGUIout)</pin1name>
<pin2name>_P116</pin2name>
</relation>
<aobject>
<ID>_A0</ID>
<x0>136</x0>
<y0>0</y0>
<width>280</width>
<objectname>GUI</objectname>
<description>GUIオブジェクト
</description>
<state>
<ID>_SINIT</ID>
<x0>0</x0>
<y0>40</y0>
<width>70</width>
<height>40</height>
<text>  InitState</text>
<isinitstate>1</isinitstate>
</state>
<pin>
<ID>_Pstart</ID>
<x0>400</x0>
<y0>100</y0>
<width>80</width>
<height>26</height>
<text>Start()</text>
<px>0</px>
<py>36</py>
</pin>
<pin>
<ID>_PGUIout</ID>
<x0>0</x0>
<y0>84</y0>
<width>180</width>
<height>26</height>
<text>GUI_created(JFrame f)</text>
<px>0</px>
<py>54</py>
</pin>
<pin>
<ID>_PGUIclosed</ID>
<x0>310</x0>
<y0>0</y0>
<width>180</width>
<height>26</height>
<text>GUI_closed()</text>
<px>100</px>
<py>6</py>
</pin>
<action>
<ID>_Astart</ID>
<comp1name>_Pstart</comp1name>
<comp2name>_Ocreate</comp2name>
</action>
<operation>
<ID>_Ocreate</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>220</x0>
<y0>40</y0>
<width>130</width>
<height>64</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// GUIを作成する
XGUI x = new XGUI();

</codetext>
</operation>
<pin>
<ID>_P_Debugger</ID>
<x0>0</x0>
<y0>110</y0>
<width>200</width>
<height>26</height>
<text>_Debugger_selected()</text>
<px>0</px>
<py>72</py>
</pin>
<pin>
<ID>_P_Emulator</ID>
<x0>0</x0>
<y0>138</y0>
<width>200</width>
<height>26</height>
<text>_Emulator_selected()</text>
<px>0</px>
<py>90</py>
</pin>
<pin>
<ID>_PAcompile_button</ID>
<x0>0</x0>
<y0>166</y0>
<width>200</width>
<height>26</height>
<text>compile_button_clicked()</text>
<px>0</px>
<py>108</py>
</pin>
<pin>
<ID>_PAclr_button</ID>
<x0>0</x0>
<y0>194</y0>
<width>200</width>
<height>26</height>
<text>clr_button_clicked()</text>
<px>0</px>
<py>126</py>
</pin>
<pin>
<ID>_PAterminal_button</ID>
<x0>0</x0>
<y0>222</y0>
<width>200</width>
<height>26</height>
<text>terminal_button_clicked()</text>
<px>0</px>
<py>144</py>
</pin>
<pin>
<ID>_PAinifile_button</ID>
<x0>0</x0>
<y0>250</y0>
<width>200</width>
<height>26</height>
<text>inifile_button_clicked()</text>
<px>0</px>
<py>162</py>
</pin>
<pin>
<ID>_PAedit_button</ID>
<x0>0</x0>
<y0>278</y0>
<width>200</width>
<height>26</height>
<text>edit_button_clicked()</text>
<px>0</px>
<py>180</py>
</pin>
<pin>
<ID>_Pentry_field</ID>
<x0>0</x0>
<y0>306</y0>
<width>200</width>
<height>26</height>
<text>entry_field_created(JTextField t)</text>
<px>0</px>
<py>198</py>
</pin>
<pin>
<ID>_Pbreak_field</ID>
<x0>0</x0>
<y0>334</y0>
<width>200</width>
<height>26</height>
<text>break_field_created(JTextField t)</text>
<px>0</px>
<py>216</py>
</pin>
<pin>
<ID>_Pr0_reg</ID>
<x0>0</x0>
<y0>362</y0>
<width>200</width>
<height>26</height>
<text>r0_reg_created(JTextField t)</text>
<px>0</px>
<py>234</py>
</pin>
<pin>
<ID>_Pr1_reg</ID>
<x0>0</x0>
<y0>390</y0>
<width>200</width>
<height>26</height>
<text>r1_reg_created(JTextField t)</text>
<px>0</px>
<py>252</py>
</pin>
<pin>
<ID>_Pr2_reg</ID>
<x0>0</x0>
<y0>418</y0>
<width>200</width>
<height>26</height>
<text>r2_reg_created(JTextField t)</text>
<px>0</px>
<py>270</py>
</pin>
<pin>
<ID>_Pr3_reg</ID>
<x0>0</x0>
<y0>446</y0>
<width>200</width>
<height>26</height>
<text>r3_reg_created(JTextField t)</text>
<px>0</px>
<py>288</py>
</pin>
<pin>
<ID>_Psp_reg</ID>
<x0>0</x0>
<y0>474</y0>
<width>200</width>
<height>26</height>
<text>sp_reg_created(JTextField t)</text>
<px>0</px>
<py>306</py>
</pin>
<pin>
<ID>_Pmessage_area</ID>
<x0>0</x0>
<y0>502</y0>
<width>200</width>
<height>26</height>
<text>message_area_created(JTextArea t)</text>
<px>0</px>
<py>324</py>
</pin>
<pin>
<ID>_Pclock_field</ID>
<x0>0</x0>
<y0>530</y0>
<width>200</width>
<height>26</height>
<text>clock_field_created(JTextField t)</text>
<px>0</px>
<py>342</py>
</pin>
<pin>
<ID>_Pname_field</ID>
<x0>0</x0>
<y0>558</y0>
<width>200</width>
<height>26</height>
<text>name_field_created(JTextField t)</text>
<px>0</px>
<py>360</py>
</pin>
<pin>
<ID>_Pstart_field</ID>
<x0>0</x0>
<y0>586</y0>
<width>200</width>
<height>26</height>
<text>start_field_created(JTextField t)</text>
<px>0</px>
<py>378</py>
</pin>
<pin>
<ID>_Pend_field</ID>
<x0>0</x0>
<y0>614</y0>
<width>200</width>
<height>26</height>
<text>end_field_created(JTextField t)</text>
<px>0</px>
<py>396</py>
</pin>
<pin>
<ID>_Pinterval_field</ID>
<x0>0</x0>
<y0>642</y0>
<width>200</width>
<height>26</height>
<text>interval_field_created(JTextField t)</text>
<px>0</px>
<py>414</py>
</pin>
<pin>
<ID>_Ppc_reg</ID>
<x0>0</x0>
<y0>670</y0>
<width>200</width>
<height>26</height>
<text>pc_reg_created(JTextField t)</text>
<px>0</px>
<py>432</py>
</pin>
<pin>
<ID>_Pdata_field</ID>
<x0>0</x0>
<y0>698</y0>
<width>200</width>
<height>26</height>
<text>data_field_created(JTextField t)</text>
<px>0</px>
<py>450</py>
</pin>
<pin>
<ID>_Padrs_field</ID>
<x0>0</x0>
<y0>726</y0>
<width>200</width>
<height>26</height>
<text>adrs_field_created(JTextField t)</text>
<px>0</px>
<py>468</py>
</pin>
<pin>
<ID>_PAadrs_field</ID>
<x0>0</x0>
<y0>754</y0>
<width>200</width>
<height>26</height>
<text>adrs_field_input(String s)</text>
<px>0</px>
<py>486</py>
</pin>
<pin>
<ID>_PAinc_addr</ID>
<x0>0</x0>
<y0>782</y0>
<width>200</width>
<height>26</height>
<text>inc_addr_clicked()</text>
<px>0</px>
<py>504</py>
</pin>
<pin>
<ID>_PAdec_addr</ID>
<x0>0</x0>
<y0>810</y0>
<width>200</width>
<height>26</height>
<text>dec_addr_clicked()</text>
<px>0</px>
<py>522</py>
</pin>
<pin>
<ID>_PAmem_set</ID>
<x0>0</x0>
<y0>838</y0>
<width>200</width>
<height>26</height>
<text>mem_set_clicked()</text>
<px>0</px>
<py>540</py>
</pin>
<pin>
<ID>_Prun_button</ID>
<x0>0</x0>
<y0>866</y0>
<width>200</width>
<height>26</height>
<text>run_button_created(JButton b)</text>
<px>0</px>
<py>558</py>
</pin>
<pin>
<ID>_PArun_button</ID>
<x0>0</x0>
<y0>894</y0>
<width>200</width>
<height>26</height>
<text>run_button_clicked()</text>
<px>0</px>
<py>576</py>
</pin>
<pin>
<ID>_PAclear_list</ID>
<x0>0</x0>
<y0>922</y0>
<width>200</width>
<height>26</height>
<text>clear_list_clicked()</text>
<px>0</px>
<py>594</py>
</pin>
<pin>
<ID>_PAadd_list</ID>
<x0>0</x0>
<y0>950</y0>
<width>200</width>
<height>26</height>
<text>add_list_clicked()</text>
<px>0</px>
<py>612</py>
</pin>
<pin>
<ID>_PAdel_list</ID>
<x0>0</x0>
<y0>978</y0>
<width>200</width>
<height>26</height>
<text>del_list_clicked()</text>
<px>0</px>
<py>630</py>
</pin>
<pin>
<ID>_PAhome_list</ID>
<x0>0</x0>
<y0>1006</y0>
<width>200</width>
<height>26</height>
<text>home_list_clicked()</text>
<px>0</px>
<py>648</py>
</pin>
<pin>
<ID>_PAinc_list</ID>
<x0>0</x0>
<y0>1034</y0>
<width>200</width>
<height>26</height>
<text>inc_list_clicked()</text>
<px>0</px>
<py>666</py>
</pin>
<pin>
<ID>_PAdec_list</ID>
<x0>0</x0>
<y0>1062</y0>
<width>200</width>
<height>26</height>
<text>dec_list_clicked()</text>
<px>0</px>
<py>684</py>
</pin>
<pin>
<ID>_PAsingle_button</ID>
<x0>0</x0>
<y0>1090</y0>
<width>200</width>
<height>26</height>
<text>single_button_clicked()</text>
<px>0</px>
<py>702</py>
</pin>
<pin>
<ID>_Pcmd_field</ID>
<x0>0</x0>
<y0>1118</y0>
<width>200</width>
<height>26</height>
<text>cmd_field_created(JTextField t)</text>
<px>0</px>
<py>720</py>
</pin>
<pin>
<ID>_PAcmd_field</ID>
<x0>0</x0>
<y0>1146</y0>
<width>200</width>
<height>26</height>
<text>cmd_field_input(String s)</text>
<px>0</px>
<py>738</py>
</pin>
<pin>
<ID>_Pdisp_area</ID>
<x0>0</x0>
<y0>1174</y0>
<width>200</width>
<height>26</height>
<text>disp_area_created(JTextArea t)</text>
<px>0</px>
<py>756</py>
</pin>
<codeclip>
<ID>_CXSTART</ID>
<x0>0</x0>
<y0>0</y0>
<width>300</width>
<height>26</height>
<codetext> class XGUI extends JFrame implements WindowListener{
 JPanel cnt;
JMenuBar menubar;
 class _Debugger extends JMenuItem implements ActionListener{
   _Debugger(){
    setText( &quot;Debugger&quot; );
    setMnemonic( 48 );
    addActionListener( this );
  }
  public void actionPerformed( ActionEvent e ){
    _Debugger_selected();
  }
}
 class _Emulator extends JMenuItem implements ActionListener{
   _Emulator(){
    setText( &quot;Emulator&quot; );
    setMnemonic( 48 );
    addActionListener( this );
  }
  public void actionPerformed( ActionEvent e ){
    _Emulator_selected();
  }
}
compile_button Icompile_button;
 class compile_button extends JButton implements ActionListener{
  compile_button(){
 setOpaque( true );
 setName(  &quot;compile_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Compile&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ compile_button_clicked(); }
}
clr_button Iclr_button;
 class clr_button extends JButton implements ActionListener{
  clr_button(){
 setOpaque( true );
 setName(  &quot;clr_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;CLR&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ clr_button_clicked(); }
}
terminal_button Iterminal_button;
 class terminal_button extends JButton implements ActionListener{
  terminal_button(){
 setOpaque( true );
 setName(  &quot;terminal_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Terminal&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ terminal_button_clicked(); }
}
LABEL2 ILABEL2;
 class LABEL2 extends JLabel{
  LABEL2(){
 setOpaque( true );
 setName(  &quot;LABEL2&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R2&quot; );
}
}
LABEL3 ILABEL3;
 class LABEL3 extends JLabel{
  LABEL3(){
 setOpaque( true );
 setName(  &quot;LABEL3&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R1&quot; );
}
}
LABEL4 ILABEL4;
 class LABEL4 extends JLabel{
  LABEL4(){
 setOpaque( true );
 setName(  &quot;LABEL4&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R0&quot; );
}
}
inifile_button Iinifile_button;
 class inifile_button extends JButton implements ActionListener{
  inifile_button(){
 setOpaque( true );
 setName(  &quot;inifile_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Edit ini File&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inifile_button_clicked(); }
}
edit_button Iedit_button;
 class edit_button extends JButton implements ActionListener{
  edit_button(){
 setOpaque( true );
 setName(  &quot;edit_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;edit&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ edit_button_clicked(); }
}
entry_field Ientry_field;
 class entry_field extends JTextField{
  entry_field(){
 setOpaque( true );
 setName(  &quot;entry_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 entry_field_created( this );
}
}
break_field Ibreak_field;
 class break_field extends JTextField{
  break_field(){
 setOpaque( true );
 setName(  &quot;break_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 break_field_created( this );
}
}
r0_reg Ir0_reg;
 class r0_reg extends JTextField{
  r0_reg(){
 setOpaque( true );
 setName(  &quot;r0_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 r0_reg_created( this );
}
}
r1_reg Ir1_reg;
 class r1_reg extends JTextField{
  r1_reg(){
 setOpaque( true );
 setName(  &quot;r1_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 r1_reg_created( this );
}
}
r2_reg Ir2_reg;
 class r2_reg extends JTextField{
  r2_reg(){
 setOpaque( true );
 setName(  &quot;r2_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 r2_reg_created( this );
}
}
r3_reg Ir3_reg;
 class r3_reg extends JTextField{
  r3_reg(){
 setOpaque( true );
 setName(  &quot;r3_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 r3_reg_created( this );
}
}
sp_reg Isp_reg;
 class sp_reg extends JTextField{
  sp_reg(){
 setOpaque( true );
 setName(  &quot;sp_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;00000&quot; );
 sp_reg_created( this );
}
}
message_area Imessage_area;
 class message_area extends JTextArea{
 JScrollPane scrl;
  message_area(){
 setOpaque( true );
 setName(  &quot;message_area&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 scrl = new JScrollPane( this );
 message_area_created( this );
}
}
LABEL24 ILABEL24;
 class LABEL24 extends JLabel{
  LABEL24(){
 setOpaque( true );
 setName(  &quot;LABEL24&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 2 );
 setVerticalAlignment( 0 );
 setText( &quot;CYCLE:&quot; );
}
}
clock_field Iclock_field;
 class clock_field extends JTextField{
  clock_field(){
 setOpaque( true );
 setName(  &quot;clock_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 clock_field_created( this );
}
}
LABEL27 ILABEL27;
 class LABEL27 extends JLabel{
  LABEL27(){
 setOpaque( true );
 setName(  &quot;LABEL27&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Name&quot; );
}
}
LABEL28 ILABEL28;
 class LABEL28 extends JLabel{
  LABEL28(){
 setOpaque( true );
 setName(  &quot;LABEL28&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Start&quot; );
}
}
LABEL29 ILABEL29;
 class LABEL29 extends JLabel{
  LABEL29(){
 setOpaque( true );
 setName(  &quot;LABEL29&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;End&quot; );
}
}
name_field Iname_field;
 class name_field extends JTextField{
  name_field(){
 setOpaque( true );
 setName(  &quot;name_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 name_field_created( this );
}
}
start_field Istart_field;
 class start_field extends JTextField{
  start_field(){
 setOpaque( true );
 setName(  &quot;start_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 start_field_created( this );
}
}
end_field Iend_field;
 class end_field extends JTextField{
  end_field(){
 setOpaque( true );
 setName(  &quot;end_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 end_field_created( this );
}
}
LABEL33 ILABEL33;
 class LABEL33 extends JLabel{
  LABEL33(){
 setOpaque( true );
 setName(  &quot;LABEL33&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;interval time&quot; );
}
}
LABEL34 ILABEL34;
 class LABEL34 extends JLabel{
  LABEL34(){
 setOpaque( true );
 setName(  &quot;LABEL34&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;ms&quot; );
}
}
interval_field Iinterval_field;
 class interval_field extends JTextField{
  interval_field(){
 setOpaque( true );
 setName(  &quot;interval_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;1&quot; );
 interval_field_created( this );
}
}
LABEL36 ILABEL36;
 class LABEL36 extends JLabel{
  LABEL36(){
 setOpaque( true );
 setName(  &quot;LABEL36&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;PC&quot; );
}
}
pc_reg Ipc_reg;
 class pc_reg extends JTextField{
  pc_reg(){
 setOpaque( true );
 setName(  &quot;pc_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;7000&quot; );
 pc_reg_created( this );
}
}
data_field Idata_field;
 class data_field extends JTextField{
  data_field(){
 setOpaque( true );
 setName(  &quot;data_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;00&quot; );
 data_field_created( this );
}
}
adrs_field Iadrs_field;
 class adrs_field extends JTextField implements ActionListener{
  adrs_field(){
 setOpaque( true );
 setName(  &quot;adrs_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;000000&quot; );
 addActionListener( this );
 adrs_field_created( this );
}
 public void actionPerformed( ActionEvent e ){ adrs_field_input( getText() ); }
}
inc_addr Iinc_addr;
 class inc_addr extends JButton implements ActionListener{
  inc_addr(){
 setOpaque( true );
 setName(  &quot;inc_addr&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;+&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inc_addr_clicked(); }
}
dec_addr Idec_addr;
 class dec_addr extends JButton implements ActionListener{
  dec_addr(){
 setOpaque( true );
 setName(  &quot;dec_addr&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;-&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ dec_addr_clicked(); }
}
mem_set Imem_set;
 class mem_set extends JButton implements ActionListener{
  mem_set(){
 setOpaque( true );
 setName(  &quot;mem_set&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;WRT&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ mem_set_clicked(); }
}
run_button Irun_button;
 class run_button extends JButton implements ActionListener{
  run_button(){
 setOpaque( true );
 setName(  &quot;run_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;run&quot; );
 addActionListener( this );
 run_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ run_button_clicked(); }
}
clear_list Iclear_list;
 class clear_list extends JButton implements ActionListener{
  clear_list(){
 setOpaque( true );
 setName(  &quot;clear_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;C&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ clear_list_clicked(); }
}
add_list Iadd_list;
 class add_list extends JButton implements ActionListener{
  add_list(){
 setOpaque( true );
 setName(  &quot;add_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;add&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ add_list_clicked(); }
}
del_list Idel_list;
 class del_list extends JButton implements ActionListener{
  del_list(){
 setOpaque( true );
 setName(  &quot;del_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;del&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ del_list_clicked(); }
}
home_list Ihome_list;
 class home_list extends JButton implements ActionListener{
  home_list(){
 setOpaque( true );
 setName(  &quot;home_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;0&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ home_list_clicked(); }
}
inc_list Iinc_list;
 class inc_list extends JButton implements ActionListener{
  inc_list(){
 setOpaque( true );
 setName(  &quot;inc_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;&gt;&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inc_list_clicked(); }
}
dec_list Idec_list;
 class dec_list extends JButton implements ActionListener{
  dec_list(){
 setOpaque( true );
 setName(  &quot;dec_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;&lt;&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ dec_list_clicked(); }
}
single_button Isingle_button;
 class single_button extends JButton implements ActionListener{
  single_button(){
 setOpaque( true );
 setName(  &quot;single_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;1step&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ single_button_clicked(); }
}
LABEL35 ILABEL35;
 class LABEL35 extends JLabel{
  LABEL35(){
 setOpaque( true );
 setName(  &quot;LABEL35&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;SP&quot; );
}
}
cmd_field Icmd_field;
 class cmd_field extends JTextField implements ActionListener{
  cmd_field(){
 setOpaque( true );
 setName(  &quot;cmd_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 addActionListener( this );
 cmd_field_created( this );
}
 public void actionPerformed( ActionEvent e ){ cmd_field_input( getText() ); }
}
LABEL42 ILABEL42;
 class LABEL42 extends JLabel{
  LABEL42(){
 setOpaque( true );
 setName(  &quot;LABEL42&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Command:&quot; );
}
}
disp_area Idisp_area;
 class disp_area extends JTextArea{
 JScrollPane scrl;
  disp_area(){
 setOpaque( true );
 setName(  &quot;disp_area&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 20 ));
 setForeground( new Color(  29, 255, 32 ));
 setBackground( new Color(  1, 1, 1 ));
 setText( &quot;&quot; );
 scrl = new JScrollPane( this );
 disp_area_created( this );
}
}
LABEL44 ILABEL44;
 class LABEL44 extends JLabel{
  LABEL44(){
 setOpaque( true );
 setName(  &quot;LABEL44&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  195, 195, 195 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Break adrs:&quot; );
}
}
LABEL47 ILABEL47;
 class LABEL47 extends JLabel{
  LABEL47(){
 setOpaque( true );
 setName(  &quot;LABEL47&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R3&quot; );
}
}
LABEL49 ILABEL49;
 class LABEL49 extends JLabel{
  LABEL49(){
 setOpaque( true );
 setName(  &quot;LABEL49&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Entry adrs:&quot; );
}
}
 XGUI(){
 setTitle(&quot;CARD6VMシミュレータ&quot;);
 cnt = new JPanel( new BorderLayout() );
 cnt.setPreferredSize(  new  Dimension( 893, 576 ) );
 ((Component)cnt).setBackground( new Color( 254, 252, 168 ) );
menubar = new JMenuBar();
setJMenuBar( menubar );
menubar.add( new  _Debugger() );
menubar.add( new  _Emulator() );
 Icompile_button = new compile_button();
 cnt.add( Icompile_button, 0 );
 cnt.getLayout().removeLayoutComponent( Icompile_button );
 Icompile_button.setBounds( 152, 1, 61, 29 );
 Iclr_button = new clr_button();
 cnt.add( Iclr_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iclr_button );
 Iclr_button.setBounds( 214, 1, 40, 29 );
 Iterminal_button = new terminal_button();
 cnt.add( Iterminal_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iterminal_button );
 Iterminal_button.setBounds( 297, 1, 74, 29 );
 ILABEL2 = new LABEL2();
 cnt.add( ILABEL2, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL2 );
 ILABEL2.setBounds( 240, 35, 39, 24 );
 ILABEL3 = new LABEL3();
 cnt.add( ILABEL3, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL3 );
 ILABEL3.setBounds( 201, 35, 37, 24 );
 ILABEL4 = new LABEL4();
 cnt.add( ILABEL4, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL4 );
 ILABEL4.setBounds( 160, 35, 39, 24 );
 Iinifile_button = new inifile_button();
 cnt.add( Iinifile_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iinifile_button );
 Iinifile_button.setBounds( 744, 3, 140, 27 );
 Iedit_button = new edit_button();
 cnt.add( Iedit_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iedit_button );
 Iedit_button.setBounds( 113, 1, 37, 29 );
 Ientry_field = new entry_field();
 cnt.add( Ientry_field, 0 );
 cnt.getLayout().removeLayoutComponent( Ientry_field );
 Ientry_field.setBounds( 95, 139, 87, 20 );
 Ibreak_field = new break_field();
 cnt.add( Ibreak_field, 0 );
 cnt.getLayout().removeLayoutComponent( Ibreak_field );
 Ibreak_field.setBounds( 276, 138, 99, 22 );
 Ir0_reg = new r0_reg();
 cnt.add( Ir0_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir0_reg );
 Ir0_reg.setBounds( 161, 63, 39, 23 );
 Ir1_reg = new r1_reg();
 cnt.add( Ir1_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir1_reg );
 Ir1_reg.setBounds( 201, 62, 39, 24 );
 Ir2_reg = new r2_reg();
 cnt.add( Ir2_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir2_reg );
 Ir2_reg.setBounds( 241, 62, 40, 24 );
 Ir3_reg = new r3_reg();
 cnt.add( Ir3_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir3_reg );
 Ir3_reg.setBounds( 282, 62, 42, 24 );
 Isp_reg = new sp_reg();
 cnt.add( Isp_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Isp_reg );
 Isp_reg.setBounds( 325, 62, 48, 24 );
 Imessage_area = new message_area();
 cnt.add( Imessage_area.scrl, 0 );
 cnt.getLayout().removeLayoutComponent( Imessage_area.scrl );
 (  Imessage_area.scrl ).setBounds( 5, 165, 367, 405 );
 ILABEL24 = new LABEL24();
 cnt.add( ILABEL24, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL24 );
 ILABEL24.setBounds( 2, 49, 59, 22 );
 Iclock_field = new clock_field();
 cnt.add( Iclock_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iclock_field );
 Iclock_field.setBounds( 1, 73, 60, 21 );
 ILABEL27 = new LABEL27();
 cnt.add( ILABEL27, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL27 );
 ILABEL27.setBounds( 226, 90, 53, 21 );
 ILABEL28 = new LABEL28();
 cnt.add( ILABEL28, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL28 );
 ILABEL28.setBounds( 281, 90, 45, 21 );
 ILABEL29 = new LABEL29();
 cnt.add( ILABEL29, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL29 );
 ILABEL29.setBounds( 328, 90, 43, 20 );
 Iname_field = new name_field();
 cnt.add( Iname_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iname_field );
 Iname_field.setBounds( 226, 113, 54, 22 );
 Istart_field = new start_field();
 cnt.add( Istart_field, 0 );
 cnt.getLayout().removeLayoutComponent( Istart_field );
 Istart_field.setBounds( 282, 113, 45, 22 );
 Iend_field = new end_field();
 cnt.add( Iend_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iend_field );
 Iend_field.setBounds( 328, 113, 46, 22 );
 ILABEL33 = new LABEL33();
 cnt.add( ILABEL33, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL33 );
 ILABEL33.setBounds( 1, 97, 107, 15 );
 ILABEL34 = new LABEL34();
 cnt.add( ILABEL34, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL34 );
 ILABEL34.setBounds( 80, 113, 27, 22 );
 Iinterval_field = new interval_field();
 cnt.add( Iinterval_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iinterval_field );
 Iinterval_field.setBounds( 3, 113, 75, 24 );
 ILABEL36 = new LABEL36();
 cnt.add( ILABEL36, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL36 );
 ILABEL36.setBounds( 112, 35, 46, 24 );
 Ipc_reg = new pc_reg();
 cnt.add( Ipc_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ipc_reg );
 Ipc_reg.setBounds( 111, 63, 49, 23 );
 Idata_field = new data_field();
 cnt.add( Idata_field, 0 );
 cnt.getLayout().removeLayoutComponent( Idata_field );
 Idata_field.setBounds( 70, 1, 40, 23 );
 Iadrs_field = new adrs_field();
 cnt.add( Iadrs_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iadrs_field );
 Iadrs_field.setBounds( 1, 1, 67, 23 );
 Iinc_addr = new inc_addr();
 cnt.add( Iinc_addr, 0 );
 cnt.getLayout().removeLayoutComponent( Iinc_addr );
 Iinc_addr.setBounds( 31, 27, 26, 20 );
 Idec_addr = new dec_addr();
 cnt.add( Idec_addr, 0 );
 cnt.getLayout().removeLayoutComponent( Idec_addr );
 Idec_addr.setBounds( 1, 27, 27, 20 );
 Imem_set = new mem_set();
 cnt.add( Imem_set, 0 );
 cnt.getLayout().removeLayoutComponent( Imem_set );
 Imem_set.setBounds( 60, 27, 49, 20 );
 Irun_button = new run_button();
 cnt.add( Irun_button, 0 );
 cnt.getLayout().removeLayoutComponent( Irun_button );
 Irun_button.setBounds( 255, 1, 39, 29 );
 Iclear_list = new clear_list();
 cnt.add( Iclear_list, 0 );
 cnt.getLayout().removeLayoutComponent( Iclear_list );
 Iclear_list.setBounds( 111, 91, 34, 20 );
 Iadd_list = new add_list();
 cnt.add( Iadd_list, 0 );
 cnt.getLayout().removeLayoutComponent( Iadd_list );
 Iadd_list.setBounds( 148, 90, 40, 21 );
 Idel_list = new del_list();
 cnt.add( Idel_list, 0 );
 cnt.getLayout().removeLayoutComponent( Idel_list );
 Idel_list.setBounds( 190, 90, 33, 21 );
 Ihome_list = new home_list();
 cnt.add( Ihome_list, 0 );
 cnt.getLayout().removeLayoutComponent( Ihome_list );
 Ihome_list.setBounds( 111, 114, 34, 20 );
 Iinc_list = new inc_list();
 cnt.add( Iinc_list, 0 );
 cnt.getLayout().removeLayoutComponent( Iinc_list );
 Iinc_list.setBounds( 190, 114, 33, 20 );
 Idec_list = new dec_list();
 cnt.add( Idec_list, 0 );
 cnt.getLayout().removeLayoutComponent( Idec_list );
 Idec_list.setBounds( 149, 114, 38, 20 );
 Isingle_button = new single_button();
 cnt.add( Isingle_button, 0 );
 cnt.getLayout().removeLayoutComponent( Isingle_button );
 Isingle_button.setBounds( 64, 49, 45, 44 );
 ILABEL35 = new LABEL35();
 cnt.add( ILABEL35, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL35 );
 ILABEL35.setBounds( 324, 35, 47, 25 );
 Icmd_field = new cmd_field();
 cnt.add( Icmd_field, 0 );
 cnt.getLayout().removeLayoutComponent( Icmd_field );
 Icmd_field.setBounds( 473, 2, 266, 30 );
 ILABEL42 = new LABEL42();
 cnt.add( ILABEL42, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL42 );
 ILABEL42.setBounds( 379, 2, 91, 29 );
 Idisp_area = new disp_area();
 cnt.add( Idisp_area.scrl, 0 );
 cnt.getLayout().removeLayoutComponent( Idisp_area.scrl );
 (  Idisp_area.scrl ).setBounds( 380, 35, 507, 537 );
 ILABEL44 = new LABEL44();
 cnt.add( ILABEL44, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL44 );
 ILABEL44.setBounds( 185, 139, 88, 19 );
 ILABEL47 = new LABEL47();
 cnt.add( ILABEL47, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL47 );
 ILABEL47.setBounds( 281, 35, 41, 24 );
 ILABEL49 = new LABEL49();
 cnt.add( ILABEL49, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL49 );
 ILABEL49.setBounds( 1, 139, 91, 20 );
 setContentPane( cnt );
 pack();
 addWindowListener( this );
 setVisible( true );
 GUI_created( this );
}
 public void windowActivated( WindowEvent e ){}
 public void windowClosed( WindowEvent e ){}
 public void windowClosing( WindowEvent e ){ GUI_closed(); }
 public void windowDeactivated( WindowEvent e ){}
 public void windowDeiconified( WindowEvent e ){}
 public void windowIconified( WindowEvent e ){}
 public void windowOpened( WindowEvent e ){}
}
</codetext>
</codeclip>
<ID_maker>59</ID_maker>
<height>778</height>
<レイアウト>CARD6VMシミュレータ
893
576
254
252
168
xxscale=1
BUTTON;compile_button;Compile;152;1;61;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;clr_button;CLR;214;1;40;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;terminal_button;Terminal;297;1;74;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
LABEL;LABEL2;R2;240;35;39;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL3;R1;201;35;37;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL4;R0;160;35;39;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
BUTTON;inifile_button;Edit ini File;744;3;140;27;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;edit_button;edit;113;1;37;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
TEXTFIELD;entry_field;0;95;139;87;20;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;break_field;0;276;138;99;22;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;r0_reg;0;161;63;39;23;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;r1_reg;0;201;62;39;24;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;r2_reg;0;241;62;40;24;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;r3_reg;0;282;62;42;24;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;sp_reg;00000;325;62;48;24;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTAREA;message_area;null;5;165;367;405;51;51;51;255;255;255;Dialog;12;1;1;1;JTextArea;
LABEL;LABEL24;CYCLE:;2;49;59;22;51;51;51;192;192;192;Dialog;12;null;2;0;1;0;0;JLabel;
TEXTFIELD;clock_field;0;1;73;60;21;51;51;51;255;255;255;Dialog;12;1;1;0;JTextField;
LABEL;LABEL27;Name;226;90;53;21;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL28;Start;281;90;45;21;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL29;End;328;90;43;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;name_field;null;226;113;54;22;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;start_field;0;282;113;45;22;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;end_field;0;328;113;46;22;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
LABEL;LABEL33;interval time;1;97;107;15;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL34;ms;80;113;27;22;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;interval_field;1;3;113;75;24;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
LABEL;LABEL36;PC;112;35;46;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;pc_reg;7000;111;63;49;23;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;data_field;00;70;1;40;23;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;adrs_field;000000;1;1;67;23;51;51;51;255;255;255;Dialog;10;1;1;1;JTextField;
BUTTON;inc_addr;+;31;27;26;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;dec_addr;-;1;27;27;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;mem_set;WRT;60;27;49;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;run_button;run;255;1;39;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;1;1;JButton;
BUTTON;clear_list;C;111;91;34;20;51;51;51;192;192;192;Dialog;10;null;0;0;1;0;1;JButton;
BUTTON;add_list;add;148;90;40;21;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;del_list;del;190;90;33;21;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;home_list;0;111;114;34;20;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;inc_list;&gt;;190;114;33;20;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;dec_list;&lt;;149;114;38;20;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;single_button;1step;64;49;45;44;51;51;51;192;192;192;Dialog;10;null;0;0;1;0;1;JButton;
LABEL;LABEL35;SP;324;35;47;25;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;cmd_field;null;473;2;266;30;51;51;51;255;255;255;Dialog;12;1;1;1;JTextField;
LABEL;LABEL42;Command:;379;2;91;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTAREA;disp_area;null;380;35;507;537;29;255;32;1;1;1;Dialog;20;1;1;1;JTextArea;
LABEL;LABEL44;Break adrs:;185;139;88;19;51;51;51;195;195;195;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL47;R3;281;35;41;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL49;Entry adrs:;1;139;91;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
Menu;Debugger;48;/Menu;END;
Menu;Emulator;48;/Menu;END;
</レイアウト>
</aobject>
<pin>
<ID>_P118</ID>
<x0>439</x0>
<y0>47</y0>
<width>95</width>
<height>25</height>
<text>card6_debug()</text>
<px>7</px>
<py>58</py>
</pin>
<relation>
<ID>_R119</ID>
<pin1name>_A0(_P_Debugger)</pin1name>
<pin2name>_P118</pin2name>
</relation>
<pin>
<ID>_P120</ID>
<x0>441</x0>
<y0>75</y0>
<width>93</width>
<height>29</height>
<text>card6_sym()</text>
<px>8</px>
<py>77</py>
</pin>
<relation>
<ID>_R121</ID>
<pin1name>_A0(_P_Emulator)</pin1name>
<pin2name>_P120</pin2name>
</relation>
<operation>
<ID>_O122</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>763</x0>
<y0>700</y0>
<width>122</width>
<height>69</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>48</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//終了する 






try{

BufferedWriter dout = new BufferedWriter( new FileWriter(ini_file));
dout.write(&quot;edit_command=&quot;+edit_command+&quot;\n&quot;);
dout.write(&quot;edit_inifile_command=&quot;+edit_inifile_command+&quot;\n&quot;);
dout.write(&quot;compile_command=&quot;+compile_command+&quot;\n&quot;);
dout.write(&quot;terminal_command=&quot;+terminal_command+&quot;\n&quot;);
dout.write(&quot;.entry\n&quot;);
dout.write(entry_field.getText()+&quot;\n&quot;);
dout.write(&quot;.break\n&quot;);
dout.write(break_field.getText()+&quot;\n&quot;);
dout.write(&quot;.watch\n&quot;);
int nn = memory_windows.size();
for( int i = 0;i &lt; nn; i++ ){
  memory_window w = (memory_window)(memory_windows.get(i));
  dout.write( w.name+&quot;\n&quot;+w.start+&quot;\n&quot;+w.end+&quot;\n&quot;);
}
dout.close();
} catch( Exception e ){}


</codetext>
</operation>
<pin>
<ID>_P123</ID>
<x0>660</x0>
<y0>733</y0>
<width>60</width>
<height>30</height>
<text>exit()</text>
<px>150</px>
<py>62</py>
</pin>
<relation>
<ID>_R124</ID>
<pin1name>_P123</pin1name>
<pin2name>_O122</pin2name>
</relation>
<pin>
<ID>_P125</ID>
<x0>544</x0>
<y0>1</y0>
<width>59</width>
<height>26</height>
<text>close()</text>
<px>194</px>
<py>67</py>
</pin>
<relation>
<ID>_R126</ID>
<pin1name>_A0(_PGUIclosed)</pin1name>
<pin2name>_P125</pin2name>
</relation>
</xobject>
<codeclip>
<ID>_C6</ID>
<x0>181</x0>
<y0>86</y0>
<width>224</width>
<height>67</height>
<codetext>// 主要ウィンドウコンポーネント
JFrame xcard6_debug;
JFrame xcard6_sym;
JFrame xcard6vm_sym;
</codetext>
</codeclip>
<operation>
<ID>_O7</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>28</x0>
<y0>191</y0>
<width>139</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JFrame f)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>32</inpiny0>
<inpinwidth>85</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>xcard6_debug=f;
</codetext>
</operation>
<relation>
<ID>_R8</ID>
<pin1name>_X0(_P186)</pin1name>
<pin2name>_O7</pin2name>
</relation>
<operation>
<ID>_O9</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>24</x0>
<y0>308</y0>
<width>133</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JFrame f)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>32</inpiny0>
<inpinwidth>85</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>xcard6_sym=f;



f.setVisible(false);
</codetext>
</operation>
<operation>
<ID>_O10</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>28</x0>
<y0>414</y0>
<width>139</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JFrame f)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>32</inpiny0>
<inpinwidth>85</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>xcard6vm_sym=f;


f.setVisible(false);
</codetext>
</operation>
<relation>
<ID>_R11</ID>
<pin1name>_X1(_P113)</pin1name>
<pin2name>_O9</pin2name>
</relation>
<relation>
<ID>_R12</ID>
<pin1name>_X2(_P116)</pin1name>
<pin2name>_O10</pin2name>
</relation>
<codeclip>
<ID>_C13</ID>
<x0>173</x0>
<y0>13</y0>
<width>463</width>
<height>46</height>
<codetext>// CARD6コンピュータ用統合デバッグツール ver 0.1
// エミュレータ、仮想マシンのエミュレータ、ハードウェアデバッガを一体化
</codetext>
</codeclip>
<operation>
<ID>_O14</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>597</x0>
<y0>204</y0>
<width>168</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>// card6_debugを選択



xcard6_debug.setVisible(true);
xcard6_sym.setVisible(false);
xcard6vm_sym.setVisible(false);
</codetext>
</operation>
<relation>
<ID>_R17</ID>
<pin1name>_X1(_P115)</pin1name>
<pin2name>_O14</pin2name>
</relation>
<operation>
<ID>_O20</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>600</x0>
<y0>304</y0>
<width>168</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>// card6_symを選択



xcard6_debug.setVisible(false);
xcard6_sym.setVisible(true);
xcard6vm_sym.setVisible(false);
</codetext>
</operation>
<operation>
<ID>_O21</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>609</x0>
<y0>410</y0>
<width>168</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>// card6vm_symを選択



xcard6_debug.setVisible(false);
xcard6_sym.setVisible(false);
xcard6vm_sym.setVisible(true);
</codetext>
</operation>
<relation>
<ID>_R22</ID>
<pin1name>_X1(_P117)</pin1name>
<pin2name>_O21</pin2name>
</relation>
<relation>
<ID>_R23</ID>
<pin1name>_X2(_P120)</pin1name>
<pin2name>_O20</pin2name>
</relation>
<relation>
<ID>_R24</ID>
<pin1name>_X0(_P189)</pin1name>
<pin2name>_O21</pin2name>
</relation>
<relation>
<ID>_R25</ID>
<pin1name>_X0(_P188)</pin1name>
<pin2name>_O20</pin2name>
</relation>
<relation>
<ID>_R26</ID>
<pin1name>_X2(_P118)</pin1name>
<pin2name>_O14</pin2name>
</relation>
<relation>
<ID>_R27</ID>
<pin1name>_PSTART</pin1name>
<pin2name>_X0(_PSTART)</pin2name>
</relation>
<relation>
<ID>_R28</ID>
<pin1name>_X0(_PSTART)</pin1name>
<pin2name>_X1(_PSTART)</pin2name>
</relation>
<relation>
<ID>_R29</ID>
<pin1name>_X1(_PSTART)</pin1name>
<pin2name>_X2(_PSTART)</pin2name>
</relation>
<pin>
<ID>_P30</ID>
<x0>529</x0>
<y0>113</y0>
<width>60</width>
<height>30</height>
<text>exit()</text>
<px>10</px>
<py>40</py>
</pin>
<relation>
<ID>_R35</ID>
<pin1name>_X0(_P195)</pin1name>
<pin2name>_P30</pin2name>
</relation>
<relation>
<ID>_R36</ID>
<pin1name>_X1(_P122)</pin1name>
<pin2name>_P30</pin2name>
</relation>
<relation>
<ID>_R37</ID>
<pin1name>_X2(_P125)</pin1name>
<pin2name>_P30</pin2name>
</relation>
<relation>
<ID>_R38</ID>
<pin1name>_P30</pin1name>
<pin2name>_X0(_P193)</pin2name>
</relation>
<relation>
<ID>_R39</ID>
<pin1name>_X0(_P193)</pin1name>
<pin2name>_X1(_P120)</pin2name>
</relation>
<relation>
<ID>_R40</ID>
<pin1name>_X1(_P120)</pin1name>
<pin2name>_X2(_P123)</pin2name>
</relation>
<operation>
<ID>_O41</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>610</x0>
<y0>510</y0>
<width>144</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>System.exit(0);
</codetext>
</operation>
<relation>
<ID>_R42</ID>
<pin1name>_X2(_P123)</pin1name>
<pin2name>_O41</pin2name>
</relation>
</xobject>
