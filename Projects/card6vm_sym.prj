<?xml version="1.0" encoding="Shift_JIS" ?>
<!-- なんちゃってXML version 0.1( ObjectEditor専用 ) -->
<xobject>
<ID>project</ID>
<x0>0</x0>
<y0>0</y0>
<width>200</width>
<height>100</height>
<ID_maker>115</ID_maker>
<objectname>card6vm_sym</objectname>
<description>新規のアプリケーション</description>
<codeclip>
<ID>_CSTART</ID>
<x0>699</x0>
<y0>3</y0>
<width>121</width>
<height>26</height>
<codetext> String[] ARGS;
</codetext>
</codeclip>
<pin>
<ID>_PSTART</ID>
<x0>444</x0>
<y0>8</y0>
<width>55</width>
<height>24</height>
<text>Start()</text>
<px>50</px>
<py>50</py>
</pin>
<relation>
<ID>_R3</ID>
<pin1name>_PSTART</pin1name>
<pin2name>_A0(_Pstart)</pin2name>
</relation>
<xobject>
<ID>_X6</ID>
<x0>0</x0>
<y0>515</y0>
<width>107</width>
<height>183</height>
<ID_maker>48</ID_maker>
<objectname>symulator</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>7</x0>
<y0>415</y0>
<width>73</width>
<height>27</height>
<text>run_stop()</text>
<px>1</px>
<py>29</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>233</x0>
<y0>320</y0>
<width>85</width>
<height>28</height>
<text>single_step()</text>
<px>0</px>
<py>159</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>38</x0>
<y0>9</y0>
<width>60</width>
<height>30</height>
<text>add()</text>
<px>0</px>
<py>67</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>42</x0>
<y0>54</y0>
<width>60</width>
<height>30</height>
<text>delete()</text>
<px>0</px>
<py>85</py>
</pin>
<operation>
<ID>_O8</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>102</x0>
<y0>387</y0>
<width>110</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>38</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>63</outpinx0>
<outpiny0>24</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//実行・停止


run_mode = 1- run_mode;
if( run_mode == 0 ) run_button.setText(&quot;run&quot;);else run_button.setText(&quot;stop&quot;);
interval = Integer.parseInt( interval_field.getText() );
</codetext>
</operation>
<relation>
<ID>_R9</ID>
<pin1name>_P0</pin1name>
<pin2name>_O8</pin2name>
</relation>
<operation>
<ID>_O13</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>48</x0>
<y0>328</y0>
<width>155</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>104</inpinx0>
<inpiny0>32</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>//シングルステップ実行



   exec_one_cycle();
</codetext>
</operation>
<relation>
<ID>_R14</ID>
<pin1name>_P1</pin1name>
<pin2name>_O13</pin2name>
</relation>
<operation>
<ID>_O15</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>165</x0>
<y0>50</y0>
<width>235</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//該当番号のメモリウィンドウを削除


if( memory_windows.size() &gt; list_no ) memory_windows.remove(list_no);

int nn = memory_windows.size();
if( nn &gt; 0){
if( list_no &gt;= nn ) list_no = nn-1;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R16</ID>
<pin1name>_P3</pin1name>
<pin2name>_O15</pin2name>
</relation>
<operation>
<ID>_O19</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>164</x0>
<y0>0</y0>
<width>169</width>
<height>44</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//メモリウィンドウを追加


String n = name_field.getText();
int s = Integer.parseInt(start_field.getText(),16);
int e = Integer.parseInt(end_field.getText(),16);
memory_windows.add( new memory_window( n, s, e ) );

int nn = memory_windows.size();
if( nn &gt; 0){
list_no = nn-1;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R20</ID>
<pin1name>_P2</pin1name>
<pin2name>_O19</pin2name>
</relation>
<codeclip>
<ID>_C21</ID>
<x0>169</x0>
<y0>447</y0>
<width>198</width>
<height>33</height>
<codetext>// 1サイクル実行
public void exec_one_cycle(){
  int ins, adr, tmp, opr1, opr2, t0, t1;
  int access0 = -1, access1 = -1;

    // 各レジスタ、クロックカウンタの設定
    reg_pc = Integer.parseInt( pc_reg.getText(), 16 );
    reg_r0 =  Integer.parseInt( r0_reg.getText() );
    reg_r1 =  Integer.parseInt( r1_reg.getText() );
    reg_r2 =  Integer.parseInt( r2_reg.getText() );
    reg_r3 =  Integer.parseInt( r2_reg.getText() );
    reg_sp = Integer.parseInt( sp_reg.getText(), 16 );
    clock =  Integer.parseInt( clock_field.getText() );
    break_adrs = Integer.parseInt( break_field.getText(), 16 );

    // opコード表示
    message_area.setText(&quot; OP CODE:\n&quot;+hex6(reg_pc) );
    
//    System.out.println( &quot;opcode=&quot;+ mem[ reg_pc ]);
    
    message_area.append( &quot; : &quot;+opcode[ mem[ reg_pc ] ]+&quot;\n\n&quot; );

    // 停止アドレスに到達したら停止する
    if( break_adrs !=0 &amp;&amp; break_adrs == reg_pc ){
     run_stop();
    }

    // 命令コードをフェッチ
    ins = mem[ reg_pc++ ];

    // 命令コードに応じた処理
    switch( ins ){

case hlt:		// 停止する
is_break = 1;
break;

case jmp:		// ジャンプする(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
reg_pc = opr1;
break;

case xxjmp:		// r0に格納されているアドレスにジャンプする
reg_pc = reg_r0;
break;

case jge:		// 演算結果が&gt;=0ならジャンプする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
t0 = reg_r0&gt;=0x20000? reg_r0-0x40000 : reg_r0;
t1 = reg_r1&gt;=0x20000? reg_r1-0x40000 : reg_r1;
if( t1 &gt;= t0 ) reg_pc = opr1;
break;

case jlt:		// 演算結果が&gt;0ならジャンプする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
t0 = reg_r0&gt;=0x20000? reg_r0-0x40000 : reg_r0;
t1 = reg_r1&gt;=0x20000? reg_r1-0x40000 : reg_r1;
if( t1 &lt; t0 ) reg_pc = opr1;
break;

case jz:		// 演算結果が==0ならジャンプする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
if( reg_r1 == reg_r0 ) reg_pc = opr1;
break;

case jnz:		// 演算結果が!=0ならジャンプする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
if( reg_r1 != reg_r0 ) reg_pc = opr1;
break;

case call:		// サブルーチンを呼び出す(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
mem[ --reg_sp ] = (reg_pc&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;0)  &amp; 0x3f;
reg_pc = opr1;
break;

case callxx:	// サブルーチンを呼び出す(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
mem[ --reg_sp ] = (reg_pc&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;0)  &amp; 0x3f;
reg_pc = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case xxcall:	// reg_r0に格納されているアドレスを呼び出す
mem[ --reg_sp ] = (reg_pc&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;0)  &amp; 0x3f;
reg_pc = reg_r0;
break;

case ret:		// サブルーチンから復帰する
reg_pc = mem[ reg_sp++ ] | (mem[ reg_sp++ ] &lt;&lt; 6) | (mem[ reg_sp++ ] &lt;&lt; 12);
break;

case add:		// r0=r1+r0
reg_r0=(reg_r1+reg_r0)&amp;0x3ffff;
break;

case sub:		// r0=r1-r0
reg_r0=(reg_r1-reg_r0)&amp;0x3ffff;
break;

case mul:		// r0=r1*r0
reg_r0=(reg_r1*reg_r0)&amp;0x3ffff;
break;

case div:		// r0=r1/r0
reg_r0=reg_r1/reg_r0;
break;

case umul:		// r0=r1*r0(符号なし)
reg_r0=(reg_r1&amp;0x3ffff)*(reg_r0&amp;0x3ffff);
break;

case udiv:		// r0=r1/r0(符号なし)
reg_r0=(reg_r1&amp;0x3ffff)/(reg_r0&amp;0x3ffff);
break;

case mod:		// r0=r1%r0
reg_r0=reg_r1%reg_r0;
break;

case and:		// r0=r1&amp;r0
reg_r0=reg_r1&amp;reg_r0;
break;

case or:		// r0=r1|r0
reg_r0=reg_r1|reg_r0;
break;

case neg:		// r0=-r0
reg_r0=(-reg_r0)&amp;0x3ffff;
break;

case not:		// r0=~r0
reg_r0=(~reg_r0)&amp;0x3ffff;
break;

case in:		// ポートから入力した値をr0にセット
reg_r0= KeyCode0 &amp; 0x3f;
KeyCode0 = 0x3f;
break;

case out:		// r0の値をポートに出力
PrtData= reg_r0 &amp; 0x3f;
break;

case swap:		// r0とr1の値を入れ替える
tmp=reg_r0;
reg_r0=reg_r1;
reg_r1=tmp;
break;

case pushr:		// レジスタファイル(r1-r3)にr0の値をプッシュ
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
break;

case popr:		// レジスタファイル(r1-r3)からr0に値をポップ
reg_r0 = reg_r1;
reg_r1 = reg_r2;
reg_r2 = reg_r3;
break;

case pushs:		// スタックにr0の値をプッシュ
mem[ --reg_sp ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
access1 = (access0 = reg_sp)+2;
break;

case pops:		// スタックからr0に値をポップ
reg_r0 = mem[ reg_sp++ ] | (mem[ reg_sp++ ] &lt;&lt; 6) | (mem[ reg_sp++ ] &lt;&lt; 12);
break;

case inc_l:		// オペランド(ロング型)をインクリメント
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp++;
mem[ opr1-- ] = (tmp&gt;&gt;12) &amp; 0x3f;
mem[ opr1-- ] = (tmp&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (tmp&gt;&gt;0)  &amp; 0x3f;
access1 = (access0 = opr1)+2;
break;

case dec_l:		// オペランド(ロング型)をデクリメント
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp--;
mem[ opr1-- ] = (tmp&gt;&gt;12) &amp; 0x3f;
mem[ opr1-- ] = (tmp&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (tmp&gt;&gt;0)  &amp; 0x3f;
access1 = (access0 = opr1)+2;
break;

case inc_b:		// オペランド(バイト型)をインクリメント
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr1];
tmp++;
mem[ opr1 ] = tmp &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case dec_b:		// オペランド(バイト型)をデクリメント
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr1];
tmp--;
mem[ opr1 ] = tmp &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case callxx_mbr:// 構造体のメンバに格納されているアドレスを呼び出す
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
mem[ --reg_sp ] = (reg_pc&gt;&gt;12) &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;6)  &amp; 0x3f;
mem[ --reg_sp ] = (reg_pc&gt;&gt;0)  &amp; 0x3f;
reg_pc = adr;
break;

case st_mbr_l:	// 構造体のメンバ(ロング型)にr1の値を格納する
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
mem[ opr1++ ] = (reg_r1&gt;&gt;0)  &amp; 0x3f;
mem[ opr1++ ] = (reg_r1&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (reg_r1&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = opr1)-2;
break;

case st_mbr_b:	// 構造体のメンバ(バイト型)にr1の値を格納する
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
mem[ opr1 ] = reg_r1 &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case ld_mbr_l:	// 構造体のメンバ(ロング型)の値をr0にロードする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
reg_r0 = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case ld_mbr_b:	// 構造体のメンバ(バイト型)の値をr0にロードする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1 += reg_r0;
opr1&amp;=0x3ffff;
reg_r0 = mem[opr1] &amp; 0x3f;
break;

case lea_mbr:	// 構造体のメンバのアドレスをr0にロードする
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
reg_r0 += opr1;
reg_r0&amp;=0x3ffff;
break;

case ldxx_a_v_l:// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
adr+=tmp;
adr+=tmp;
adr+=tmp;
adr&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr++] | (mem[adr++] &lt;&lt; 6) | (mem[adr] &lt;&lt; 12);
break;

case ld_a_v_l:	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
opr1+=tmp;
opr1+=tmp;
opr1+=tmp;
opr1&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case ldxx_a_v_b:// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
adr+=tmp;
adr&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr] &amp; 0x3f;
break;

case ld_a_v_b:	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
opr1+=tmp;
opr1&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1] &amp; 0x3f;
break;

case stxx_a_v_l:// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
adr+=tmp;
adr+=tmp;
adr+=tmp;
adr&amp;=0x3ffff;
mem[ adr++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ adr++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ adr   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = adr)-2;
break;

case st_a_v_l:	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
opr1+=tmp;
opr1+=tmp;
opr1+=tmp;
opr1&amp;=0x3ffff;
mem[ opr1++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ opr1++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = opr1)-2;
break;

case stxx_a_v_b:// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
adr+=tmp;
adr&amp;=0x3ffff;
mem[ adr ] = reg_r0 &amp; 0x3f;
access1 = (access0 = adr)+0;
break;

case st_a_v_b:	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定,インデックスは変数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
tmp = mem[opr2++] | (mem[opr2++] &lt;&lt; 6) | (mem[opr2] &lt;&lt; 12);
opr1+=tmp;
opr1&amp;=0x3ffff;
mem[ opr1 ] = reg_r0 &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case ldxx_a_k_l:// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
adr+=opr2;
adr+=opr2;
adr+=opr2;
adr&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr++] | (mem[adr++] &lt;&lt; 6) | (mem[adr] &lt;&lt; 12);
break;

case ld_a_k_l:	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1+=opr2;
opr1+=opr2;
opr1+=opr2;
opr1&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case ldxx_a_k_b:// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
adr+=opr2;
adr&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr] &amp; 0x3f;
break;

case ld_a_k_b:	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1+=opr2;
opr1&amp;=0x3ffff;
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1] &amp; 0x3f;
break;

case stxx_a_k_l:// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
adr+=opr2;
adr+=opr2;
adr+=opr2;
adr&amp;=0x3ffff;
mem[ adr++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ adr++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ adr   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = adr)-2;
break;

case st_a_k_l:	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1+=opr2;
opr1+=opr2;
opr1+=opr2;
opr1&amp;=0x3ffff;
mem[ opr1++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ opr1++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = opr1)-2;
break;

case stxx_a_k_b:// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
adr+=opr2;
adr&amp;=0x3ffff;
mem[ adr ] = reg_r0 &amp; 0x3f;
access1 = (access0 = adr)+0;
break;

case st_a_k_b:	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定,インデックスは定数)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr2 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
opr1+=opr2;
opr1&amp;=0x3ffff;
mem[ opr1 ] = reg_r0 &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

case ldxx_v_l:	// 変数(ロング型)の値をr0にロードする(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr++] | (mem[adr++] &lt;&lt; 6) | (mem[adr] &lt;&lt; 12);
break;

case ld_v_l:	// 変数(ロング型)の値をr0にロードする(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
break;

case ldxx_v_b:	// 変数(バイト型)の値をr0にロードする(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[adr] &amp; 0x3f;
break;

case ld_v_b:	// 変数(バイト型)の値をr0にロードする(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[opr1] &amp; 0x3f;
break;

case ld_k:		// 定数をr0にセットする
reg_r3 = reg_r2;
reg_r2 = reg_r1;
reg_r1 = reg_r0;
reg_r0 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
break;

case stxx_v_l:	// r0の値を変数(ロング型)に格納する(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
mem[ adr++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ adr++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ adr   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = adr)-2;
break;

case st_v_l:	// r0の値を変数(ロング型)に格納する(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
mem[ opr1++ ] = (reg_r0&gt;&gt;0)  &amp; 0x3f;
mem[ opr1++ ] = (reg_r0&gt;&gt;6)  &amp; 0x3f;
mem[ opr1   ] = (reg_r0&gt;&gt;12) &amp; 0x3f;
access0 = (access1 = opr1)-2;
break;

case stxx_v_b:	// r0の値を変数(バイト型)に格納する(アドレスは間接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
adr = mem[opr1++] | (mem[opr1++] &lt;&lt; 6) | (mem[opr1] &lt;&lt; 12);
mem[ adr ] = reg_r0 &amp; 0x3f;
access1 = (access0 = adr)+0;
break;

case st_v_b	:	// r0の値を変数(バイト型)に格納する(アドレスは直接指定)
opr1 = mem[reg_pc++] | (mem[reg_pc++] &lt;&lt; 6) | (mem[reg_pc++] &lt;&lt; 12);
mem[ opr1 ] = reg_r0 &amp; 0x3f;
access1 = (access0 = opr1)+0;
break;

    }

//System.out.println(&quot;access:&quot;+hex6(access0)+&quot;-&quot;+hex6(access1));

// レジスタ領域にアクセスがあったときはレジスタを更新する
if( access0 &lt;= REG_PC &amp;&amp; REG_PC &lt;= access1 ) {reg_pc = mem[REG_PC]+mem[REG_PC+1]*64+mem[REG_PC+2]*4096;}
if( access0 &lt;= REG_SP &amp;&amp; REG_SP &lt;= access1 ) {reg_sp = mem[REG_SP]+mem[REG_SP+1]*64+mem[REG_SP+2]*4096;}
if( access0 &lt;= REG_R0 &amp;&amp; REG_R0 &lt;= access1 ) {reg_r0 = mem[REG_R0]+mem[REG_R0+1]*64+mem[REG_R0+2]*4096;}
if( access0 &lt;= REG_R1 &amp;&amp; REG_R1 &lt;= access1 ) {reg_r1 = mem[REG_R1]+mem[REG_R1+1]*64+mem[REG_R1+2]*4096;}
if( access0 &lt;= REG_R2 &amp;&amp; REG_R2 &lt;= access1 ) {reg_r2 = mem[REG_R2]+mem[REG_R2+1]*64+mem[REG_R2+2]*4096;}
if( access0 &lt;= REG_R3 &amp;&amp; REG_R3 &lt;= access1 ) {reg_r3 = mem[REG_R3]+mem[REG_R3+1]*64+mem[REG_R3+2]*4096;}

    // メモリウィンドウ表示処理
    int n = memory_windows.size();
    for( int i = 0; i &lt; n; i++ ){
      memory_window w = (memory_window)(memory_windows.get(i));
      message_area.append(w.name+&quot;\n&quot;+hex6(w.start)+&quot;: &quot;);
      for( int ad = w.start; ad &lt;= w.end; ad++ ){
        message_area.append( hex2(mem[ad])+ &quot; &quot; );
      }
      message_area.append( &quot;\n\n&quot; );
    }

    // I/O同期
    io_sync();

    // レジスタ表示処理
    pc_reg.setText(hex6(reg_pc));
    r0_reg.setText(&quot;&quot;+reg_r0);
    r1_reg.setText(&quot;&quot;+reg_r1);
    r2_reg.setText(&quot;&quot;+reg_r2);
    r3_reg.setText(&quot;&quot;+reg_r3);
    sp_reg.setText(hex6(reg_sp));

    // クロック表示処理
    clock++;
    clock_field.setText(&quot;&quot;+clock);

}
</codetext>
</codeclip>
<aobject>
<ID>_A24</ID>
<x0>236</x0>
<y0>354</y0>
<width>147</width>
<height>85</height>
<ID_maker>11</ID_maker>
<objectname>Interval_Timer</objectname>
<description>新しいオブジェクト</description>
<state>
<ID>_SINIT</ID>
<x0>188</x0>
<y0>270</y0>
<width>70</width>
<height>40</height>
<text>  初期状態</text>
<isinitstate>1</isinitstate>
</state>
<pin>
<ID>_P0</ID>
<x0>200</x0>
<y0>364</y0>
<width>99</width>
<height>25</height>
<text>play_pause()</text>
<px>1</px>
<py>61</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>476</x0>
<y0>155</y0>
<width>60</width>
<height>30</height>
<text>Action()</text>
<px>0</px>
<py>41</py>
</pin>
<codeclip>
<ID>_C3</ID>
<x0>200</x0>
<y0>5</y0>
<width>272</width>
<height>198</height>
<codetext>XTimer  timer;
class XTimer implements ActionListener{
  javax.swing.Timer unit;
 
  XTimer( int del ){
   unit = new javax.swing.Timer( del, this );
  }

  public void actionPerformed( ActionEvent e){
    Action();
  }

}
</codetext>
</codeclip>
<operation>
<ID>_O7</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>321</x0>
<y0>255</y0>
<width>171</width>
<height>53</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>3</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>45</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// タイマーの起動・停止


if( run_mode != 0 ){
 timer = new XTimer( interval );
 timer.unit.start();
}
 else timer.unit.stop();
</codetext>
</operation>
<action>
<ID>_A9</ID>
<comp1name>_P0</comp1name>
<comp2name>_O7</comp2name>
</action>
</aobject>
<relation>
<ID>_R25</ID>
<pin1name>_O8</pin1name>
<pin2name>_A24(_P0)</pin2name>
</relation>
<relation>
<ID>_R26</ID>
<pin1name>_A24(_P2)</pin1name>
<pin2name>_O13</pin2name>
</relation>
<codeclip>
<ID>_C32</ID>
<x0>410</x0>
<y0>4</y0>
<width>593</width>
<height>631</height>
<codetext>static final int hlt=0;	// 停止する
static final int jmp=1;	// ジャンプする(アドレスは直接指定)
static final int xxjmp=2;	// r0に格納されているアドレスにジャンプする
static final int jge=3;	// 演算結果が&gt;=0ならジャンプする
static final int jlt=4;	// 演算結果が&gt;0ならジャンプする
static final int jz=5;	// 演算結果が==0ならジャンプする
static final int jnz=6;	// 演算結果が!=0ならジャンプする
static final int call=7;	// サブルーチンを呼び出す(アドレスは直接指定)
static final int callxx=8;	// サブルーチンを呼び出す(アドレスは間接指定)
static final int xxcall=9;	// r0に格納されているアドレスを呼び出す
static final int ret=10;	// サブルーチンから復帰する
static final int add=11;	// r0=r1+r0
static final int sub=12;	// r0=r1-r0
static final int mul=13;	// r0=r1*r0
static final int div=14;	// r0=r1/r0
static final int umul=15;	// r0=r1*r0(符号なし)
static final int udiv=16;	// r0=r1/r0(符号なし)
static final int mod=17;	// r0=r1%r0
static final int and=18;	// r0=r1&amp;r0
static final int or=19;	// r0=r1|r0
static final int neg=20;	// r0=-r0
static final int not=21;	// r0=~r0
static final int in=22;	// ポートから入力した値をr0にセット
static final int out=23;	// r0の値をポートに出力
static final int swap=24;	// r0とr1の値を入れ替える
static final int pushr=25;	// レジスタファイル(r1-r3)にr0の値をプッシュ
static final int popr=26;	// レジスタファイル(r1-r3)からr0に値をポップ
static final int pushs=27;	// スタックにr0の値をプッシュ
static final int pops=28;	// スタックからr0に値をポップ
static final int inc_l=29;	// オペランド(ロング型)をインクリメント
static final int dec_l=30;	// オペランド(ロング型)をデクリメント
static final int inc_b=31;	// オペランド(バイト型)をインクリメント
static final int dec_b=32;	// オペランド(バイト型)をデクリメント
static final int callxx_mbr=33;// 構造体のメンバに格納されているアドレスを呼び出す
static final int st_mbr_l=34;// 構造体のメンバ(ロング型)にr0の値を格納する
static final int st_mbr_b=35;// 構造体のメンバ(バイト型)にr0の値を格納する
static final int ld_mbr_l=36;// 構造体のメンバ(ロング型)の値をr0にロードする
static final int ld_mbr_b=37;// 構造体のメンバ(バイト型)の値をr0にロードする
static final int lea_mbr=38;// 構造体のメンバのアドレスをr0にロードする
static final int ldxx_a_v_l=39;// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定=;インデックスは変数)
static final int ld_a_v_l=40;// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定=;インデックスは変数)
static final int ldxx_a_v_b=41;// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定=;インデックスは変数)
static final int ld_a_v_b=42;	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定=;インデックスは変数)
static final int stxx_a_v_l=43;// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定=;インデックスは変数)
static final int st_a_v_l=44;	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定=;インデックスは変数)
static final int stxx_a_v_b=45;// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定=;インデックスは変数)
static final int st_a_v_b=46;	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定=;インデックスは変数)
static final int ldxx_a_k_l=47;// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定=;インデックスは定数)
static final int ld_a_k_l=48;	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定=;インデックスは定数)
static final int ldxx_a_k_b=49;// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定=;インデックスは定数)
static final int ld_a_k_b=50;	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定=;インデックスは定数)
static final int stxx_a_k_l=51;// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定=;インデックスは定数)
static final int st_a_k_l=52;	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定=;インデックスは定数)
static final int stxx_a_k_b=53;// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定=;インデックスは定数)
static final int st_a_k_b=54;	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定=;インデックスは定数)
static final int ldxx_v_l=55;	// 変数(ロング型)の値をr0にロードする(アドレスは間接指定)
static final int ld_v_l=56;	// 変数(ロング型)の値をr0にロードする(アドレスは直接指定)
static final int ldxx_v_b=57;	// 変数(バイト型)の値をr0にロードする(アドレスは間接指定)
static final int ld_v_b=58;	// 変数(バイト型)の値をr0にロードする(アドレスは直接指定)
static final int ld_k=59;		// 定数をr0にセットする
static final int stxx_v_l=60;	// r0の値を変数(ロング型)に格納する(アドレスは間接指定)
static final int st_v_l=61;	// r0の値を変数(ロング型)に格納する(アドレスは直接指定)
static final int stxx_v_b=62;	// r0の値を変数(バイト型)に格納する(アドレスは間接指定)
static final int st_v_b=63;	// r0の値を変数(バイト型)に格納する(アドレスは直接指定)

// レジスタアドレス
static final int REG_PC=0x3ffec;
static final int REG_SP=0x3ffef;
static final int REG_R0=0x3fff2;
static final int REG_R1=0x3fff5;
static final int REG_R2=0x3fff8;
static final int REG_R3=0x3fffb;
</codetext>
</codeclip>
<codeclip>
<ID>_C34</ID>
<x0>167</x0>
<y0>501</y0>
<width>207</width>
<height>83</height>
<codetext>/*  仮想マシンのレジスタセット
  PC: プログラムカウンタ
  R0-R3:  データレジスタ
  SP:  スタックポインタ
*/

</codetext>
</codeclip>
<pin>
<ID>_P35</ID>
<x0>44</x0>
<y0>212</y0>
<width>60</width>
<height>30</height>
<text>inc()</text>
<px>0</px>
<py>124</py>
</pin>
<pin>
<ID>_P36</ID>
<x0>46</x0>
<y0>262</y0>
<width>60</width>
<height>30</height>
<text>dec()</text>
<px>0</px>
<py>143</py>
</pin>
<pin>
<ID>_P37</ID>
<x0>36</x0>
<y0>168</y0>
<width>60</width>
<height>30</height>
<text>home()</text>
<px>0</px>
<py>106</py>
</pin>
<codeclip>
<ID>_C38</ID>
<x0>22</x0>
<y0>305</y0>
<width>187</width>
<height>19</height>
<codetext>int list_no=0; //リスト番号
</codetext>
</codeclip>
<operation>
<ID>_O39</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>174</x0>
<y0>152</y0>
<width>117</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>list_no = 0;


int nn = memory_windows.size();
if( nn &gt; 0){
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R40</ID>
<pin1name>_P37</pin1name>
<pin2name>_O39</pin2name>
</relation>
<operation>
<ID>_O41</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>173</x0>
<y0>197</y0>
<width>117</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>list_no++;


int nn = memory_windows.size();
if( nn &gt; 0 ){
if( list_no &gt;= nn ) list_no = nn -1;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<operation>
<ID>_O42</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>171</x0>
<y0>248</y0>
<width>117</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>list_no--;


int nn = memory_windows.size();
if( nn &gt; 0){
if( list_no &lt; 0 ) list_no = 0;
memory_window w = (memory_window)(memory_windows.get(list_no));
name_field.setText(w.name);
start_field.setText(hex6(w.start));
end_field.setText(hex6(w.end));
}
</codetext>
</operation>
<relation>
<ID>_R43</ID>
<pin1name>_P35</pin1name>
<pin2name>_O41</pin2name>
</relation>
<relation>
<ID>_R44</ID>
<pin1name>_P36</pin1name>
<pin2name>_O42</pin2name>
</relation>
<pin>
<ID>_P45</ID>
<x0>42</x0>
<y0>110</y0>
<width>60</width>
<height>30</height>
<text>clear()</text>
<px>0</px>
<py>47</py>
</pin>
<operation>
<ID>_O46</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>173</x0>
<y0>104</y0>
<width>176</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>25</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//メモリウィンドウを消去


memory_windows = new Vector();
list_no =0;
name_field.setText(&quot;&quot;);
start_field.setText(&quot;0&quot;);
end_field.setText(&quot;0&quot;);
</codetext>
</operation>
<relation>
<ID>_R47</ID>
<pin1name>_P45</pin1name>
<pin2name>_O46</pin2name>
</relation>
</xobject>
<codeclip>
<ID>_C9</ID>
<x0>685</x0>
<y0>356</y0>
<width>182</width>
<height>32</height>
<codetext>// 変数
int[] mem;
int reg_pc, reg_r0, reg_r1, reg_r2, reg_r3, reg_sp, reg_cf, reg_zf; 
JButton run_button; int run_mode = 0;
JTextField pc_reg, r0_reg, r1_reg, r2_reg, r3_reg, sp_reg;
JTextField adrs_field, data_field;
JTextArea message_area, disp;
JTextField cmd_line;
JTextField clock_field; int clock=0;
JTextField interval_field; int interval=1000;
JTextField no_field, name_field, start_field, end_field;
JTextField entry_field; int entry_adrs =0;
JTextField break_field; int break_adrs =0;
static final int AD_SIZE = 0x40000;
int is_break;

 int KeyCode=0, KeyCode0 = 0x3f, PrtData=0xff;
 int KeyAck = 0;
 boolean      is_gets = false;

String edit_command = &quot;&quot;;
String edit_inifile_command = &quot;&quot;;
String compile_command = &quot;&quot;;
String fast_run_command=&quot;&quot;;// 高速エミュレータ起動コマンド
</codetext>
</codeclip>
<relation>
<ID>_R11</ID>
<pin1name>_A0(_PArun_button)</pin1name>
<pin2name>_X6(_P0)</pin2name>
</relation>
<relation>
<ID>_R16</ID>
<pin1name>_A0(_PAsingle_button)</pin1name>
<pin2name>_X6(_P1)</pin2name>
</relation>
<xobject>
<ID>_X19</ID>
<x0>436</x0>
<y0>94</y0>
<width>231</width>
<height>437</height>
<ID_maker>91</ID_maker>
<objectname>set_variables</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>0</x0>
<y0>141</y0>
<width>164</width>
<height>19</height>
<text>r2_reg_is(JTextField t)</text>
<px>0</px>
<py>133</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>0</x0>
<y0>165</y0>
<width>163</width>
<height>22</height>
<text>r1_reg_is(JTextField t)</text>
<px>1</px>
<py>114</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>1</x0>
<y0>193</y0>
<width>148</width>
<height>23</height>
<text>r0_reg_is(JTextField t)</text>
<px>0</px>
<py>98</py>
</pin>
<pin>
<ID>_P10</ID>
<x0>3</x0>
<y0>357</y0>
<width>205</width>
<height>22</height>
<text>message_area_is(JTextArea t)</text>
<px>0</px>
<py>191</py>
</pin>
<pin>
<ID>_P11</ID>
<x0>0</x0>
<y0>247</y0>
<width>184</width>
<height>21</height>
<text>clock_field_is(JTextField t)</text>
<px>0</px>
<py>209</py>
</pin>
<pin>
<ID>_P13</ID>
<x0>0</x0>
<y0>275</y0>
<width>184</width>
<height>21</height>
<text>start_field_is(JTextField t)</text>
<px>0</px>
<py>244</py>
</pin>
<pin>
<ID>_P14</ID>
<x0>0</x0>
<y0>298</y0>
<width>167</width>
<height>27</height>
<text>end_field_is(JTextField t)</text>
<px>0</px>
<py>265</py>
</pin>
<pin>
<ID>_P15</ID>
<x0>3</x0>
<y0>326</y0>
<width>211</width>
<height>27</height>
<text>interval_field_is(JTextField t)</text>
<px>0</px>
<py>283</py>
</pin>
<pin>
<ID>_P16</ID>
<x0>668</x0>
<y0>78</y0>
<width>52</width>
<height>25</height>
<text>start()</text>
<px>0</px>
<py>31</py>
</pin>
<pin>
<ID>_P17</ID>
<x0>0</x0>
<y0>113</y0>
<width>158</width>
<height>24</height>
<text>pc_reg_is(JTextField t)</text>
<px>0</px>
<py>301</py>
</pin>
<operation>
<ID>_O18</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>726</x0>
<y0>17</y0>
<width>115</width>
<height>48</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>28</inpiny0>
<inpinwidth>32</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>// 初期化する


memory_windows = new Vector();
mem = new int[AD_SIZE];

// 各ボタンを押した時に実行されるコマンドを設定する
String line;
try{

BufferedReader din = new BufferedReader( new FileReader(ini_file));
while( ((line=din.readLine())!=null) ){
if(&quot;.entry&quot;.equals(line)) break;
if(&quot;.break&quot;.equals(line)) break;
if(&quot;.watch&quot;.equals(line)) break;
if( line.startsWith(&quot;edit_command=&quot;)) edit_command=line.substring(13);
if( line.startsWith(&quot;edit_inifile_command=&quot;)) edit_inifile_command=line.substring(21);
if( line.startsWith(&quot;compile_command=&quot;)) compile_command=line.substring(16);
if( line.startsWith(&quot;fast_run_command=&quot;)) fast_run_command=line.substring(17);
}
if(&quot;.entry&quot;.equals(line)){
  if( (line=din.readLine()) != null) {
    entry_field.setText(line);
    line=din.readLine();
  }
}
if(&quot;.break&quot;.equals(line)){
  if( (line=din.readLine()) != null) {
    break_field.setText(line);
    line=din.readLine();
  }
}
if(&quot;.watch&quot;.equals(line)){
  while(true){
    String name,start,end;
    if((name=din.readLine()) == null) break;
    if((start=din.readLine()) == null) break;
    if((end=din.readLine()) == null) break;
    int s = Integer.parseInt(start);
    int e = Integer.parseInt(end);
    memory_windows.add( new memory_window( name, s, e ) );
  }
}
din.close();
} catch( Exception e ){}

</codetext>
</operation>
<relation>
<ID>_R19</ID>
<pin1name>_P16</pin1name>
<pin2name>_O18</pin2name>
</relation>
<operation>
<ID>_O37</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>211</x0>
<y0>221</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>clock_field = t;
</codetext>
</operation>
<relation>
<ID>_R38</ID>
<pin1name>_P11</pin1name>
<pin2name>_O37</pin2name>
</relation>
<operation>
<ID>_O41</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>453</x0>
<y0>246</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>start_field = t;
</codetext>
</operation>
<relation>
<ID>_R42</ID>
<pin1name>_P13</pin1name>
<pin2name>_O41</pin2name>
</relation>
<operation>
<ID>_O43</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>580</x0>
<y0>273</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>end_field = t;
</codetext>
</operation>
<relation>
<ID>_R44</ID>
<pin1name>_P14</pin1name>
<pin2name>_O43</pin2name>
</relation>
<operation>
<ID>_O45</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>709</x0>
<y0>301</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>interval_field = t;
</codetext>
</operation>
<relation>
<ID>_R46</ID>
<pin1name>_P15</pin1name>
<pin2name>_O45</pin2name>
</relation>
<operation>
<ID>_O47</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>856</x0>
<y0>331</y0>
<width>139</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextArea t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>message_area = t;
</codetext>
</operation>
<relation>
<ID>_R48</ID>
<pin1name>_P10</pin1name>
<pin2name>_O47</pin2name>
</relation>
<operation>
<ID>_O49</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>415</x0>
<y0>87</y0>
<width>137</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>pc_reg = t;
</codetext>
</operation>
<relation>
<ID>_R50</ID>
<pin1name>_P17</pin1name>
<pin2name>_O49</pin2name>
</relation>
<operation>
<ID>_O51</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>556</x0>
<y0>113</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r2_reg = t;
</codetext>
</operation>
<relation>
<ID>_R52</ID>
<pin1name>_P0</pin1name>
<pin2name>_O51</pin2name>
</relation>
<operation>
<ID>_O53</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>690</x0>
<y0>139</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r1_reg = t;
</codetext>
</operation>
<relation>
<ID>_R54</ID>
<pin1name>_P1</pin1name>
<pin2name>_O53</pin2name>
</relation>
<operation>
<ID>_O55</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>822</x0>
<y0>167</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r0_reg = t;
</codetext>
</operation>
<relation>
<ID>_R56</ID>
<pin1name>_P2</pin1name>
<pin2name>_O55</pin2name>
</relation>
<pin>
<ID>_P59</ID>
<x0>0</x0>
<y0>415</y0>
<width>169</width>
<height>22</height>
<text>run_button_is(JButton b)</text>
<px>0</px>
<py>416</py>
</pin>
<operation>
<ID>_O60</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>211</x0>
<y0>390</y0>
<width>123</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JButton b)</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>31</inpiny0>
<inpinwidth>88</inpinwidth>
<inpinheight>19</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>run_button = b;
</codetext>
</operation>
<relation>
<ID>_R61</ID>
<pin1name>_P59</pin1name>
<pin2name>_O60</pin2name>
</relation>
<pin>
<ID>_P62</ID>
<x0>0</x0>
<y0>449</y0>
<width>180</width>
<height>26</height>
<text>adrs_field_is(JTextField t)</text>
<px>0</px>
<py>339</py>
</pin>
<pin>
<ID>_P63</ID>
<x0>0</x0>
<y0>488</y0>
<width>169</width>
<height>24</height>
<text>data_field_is(JTextField t)</text>
<px>0</px>
<py>319</py>
</pin>
<operation>
<ID>_O65</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>338</x0>
<y0>424</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>adrs_field = t;
</codetext>
</operation>
<operation>
<ID>_O66</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>482</x0>
<y0>462</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>data_field = t;
</codetext>
</operation>
<relation>
<ID>_R67</ID>
<pin1name>_P62</pin1name>
<pin2name>_O65</pin2name>
</relation>
<relation>
<ID>_R68</ID>
<pin1name>_P63</pin1name>
<pin2name>_O66</pin2name>
</relation>
<pin>
<ID>_P69</ID>
<x0>0</x0>
<y0>520</y0>
<width>182</width>
<height>30</height>
<text>name_field_is(JTextField t)</text>
<px>0</px>
<py>227</py>
</pin>
<operation>
<ID>_O70</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>623</x0>
<y0>497</y0>
<width>134</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>name_field = t;
</codetext>
</operation>
<relation>
<ID>_R71</ID>
<pin1name>_P69</pin1name>
<pin2name>_O70</pin2name>
</relation>
<pin>
<ID>_P72</ID>
<x0>0</x0>
<y0>554</y0>
<width>154</width>
<height>24</height>
<text>sp_reg_is(JTextField t)</text>
<px>0</px>
<py>169</py>
</pin>
<operation>
<ID>_O74</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>764</x0>
<y0>527</y0>
<width>134</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>sp_reg = t;
</codetext>
</operation>
<relation>
<ID>_R75</ID>
<pin1name>_P72</pin1name>
<pin2name>_O74</pin2name>
</relation>
<pin>
<ID>_P78</ID>
<x0>0</x0>
<y0>609</y0>
<width>179</width>
<height>24</height>
<text>break_field_is(JTextField t)</text>
<px>0</px>
<py>79</py>
</pin>
<operation>
<ID>_O79</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>429</x0>
<y0>583</y0>
<width>137</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>break_field = t;
</codetext>
</operation>
<relation>
<ID>_R80</ID>
<pin1name>_P78</pin1name>
<pin2name>_O79</pin2name>
</relation>
<operation>
<ID>_O81</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>464</x0>
<y0>13</y0>
<width>209</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>149</outpinx0>
<outpiny0>26</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 設定ファイルを更新・編集する

try{

BufferedWriter dout = new BufferedWriter( new FileWriter(ini_file));
dout.write(&quot;edit_command=&quot;+edit_command+&quot;\n&quot;);
dout.write(&quot;edit_inifile_command=&quot;+edit_inifile_command+&quot;\n&quot;);
dout.write(&quot;compile_command=&quot;+compile_command+&quot;\n&quot;);
dout.write(&quot;fast_run_command=&quot;+fast_run_command+&quot;\n&quot;);
dout.write(&quot;.entry\n&quot;);
dout.write(entry_field.getText()+&quot;\n&quot;);
dout.write(&quot;.break\n&quot;);
dout.write(break_field.getText()+&quot;\n&quot;);
dout.write(&quot;.watch\n&quot;);
int nn = memory_windows.size();
for( int i = 0;i &lt; nn; i++ ){
  memory_window w = (memory_window)(memory_windows.get(i));
  dout.write( w.name+&quot;\n&quot;+w.start+&quot;\n&quot;+w.end+&quot;\n&quot;);
}
dout.close();
} catch( Exception e ){}
exec_command(edit_inifile_command);
</codetext>
</operation>
<relation>
<ID>_R82</ID>
<pin1name>_O81</pin1name>
<pin2name>_O18</pin2name>
</relation>
<pin>
<ID>_P83</ID>
<x0>360</x0>
<y0>30</y0>
<width>60</width>
<height>30</height>
<text>init()</text>
<px>0</px>
<py>47</py>
</pin>
<relation>
<ID>_R84</ID>
<pin1name>_P83</pin1name>
<pin2name>_O81</pin2name>
</relation>
<pin>
<ID>_P85</ID>
<x0>467</x0>
<y0>385</y0>
<width>189</width>
<height>26</height>
<text>entry_field_is(JTextField t)</text>
<px>0</px>
<py>62</py>
</pin>
<pin>
<ID>_P86</ID>
<x0>630</x0>
<y0>233</y0>
<width>159</width>
<height>24</height>
<text>r3_reg_is(JTextField t)</text>
<px>0</px>
<py>153</py>
</pin>
<operation>
<ID>_O87</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>710</x0>
<y0>407</y0>
<width>138</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>entry_field = t;
</codetext>
</operation>
<relation>
<ID>_R88</ID>
<pin1name>_P85</pin1name>
<pin2name>_O87</pin2name>
</relation>
<operation>
<ID>_O89</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>822</x0>
<y0>229</y0>
<width>125</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>104</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>r3_reg = t;
</codetext>
</operation>
<relation>
<ID>_R90</ID>
<pin1name>_P86</pin1name>
<pin2name>_O89</pin2name>
</relation>
</xobject>
<relation>
<ID>_R33</ID>
<pin1name>_A0(_Pmessage_area)</pin1name>
<pin2name>_X19(_P10)</pin2name>
</relation>
<relation>
<ID>_R34</ID>
<pin1name>_A0(_Pclock_field)</pin1name>
<pin2name>_X19(_P11)</pin2name>
</relation>
<relation>
<ID>_R36</ID>
<pin1name>_A0(_Pstart_field)</pin1name>
<pin2name>_X19(_P13)</pin2name>
</relation>
<relation>
<ID>_R37</ID>
<pin1name>_A0(_Pend_field)</pin1name>
<pin2name>_X19(_P14)</pin2name>
</relation>
<relation>
<ID>_R38</ID>
<pin1name>_A0(_Pinterval_field)</pin1name>
<pin2name>_X19(_P15)</pin2name>
</relation>
<codeclip>
<ID>_C40</ID>
<x0>686</x0>
<y0>110</y0>
<width>302</width>
<height>152</height>
<codetext>// メモリウィンドウ
Vector memory_windows;
class memory_window{
  String name;
  int start;
  int end;
  memory_window( String n, int s, int e ){
    name = n; start=s; end=e;
  }
}
</codetext>
</codeclip>
<xobject>
<ID>_X42</ID>
<x0>0</x0>
<y0>395</y0>
<width>135</width>
<height>110</height>
<ID_maker>13</ID_maker>
<objectname>memory_edit</objectname>
<description></description>
<pin>
<ID>_P0</ID>
<x0>17</x0>
<y0>33</y0>
<width>125</width>
<height>25</height>
<text>adrs_set(String s)</text>
<px>0</px>
<py>29</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>52</x0>
<y0>98</y0>
<width>60</width>
<height>30</height>
<text>inc()</text>
<px>0</px>
<py>50</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>54</x0>
<y0>150</y0>
<width>60</width>
<height>30</height>
<text>dec()</text>
<px>0</px>
<py>67</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>39</x0>
<y0>220</y0>
<width>112</width>
<height>25</height>
<text>mem_set()</text>
<px>0</px>
<py>83</py>
</pin>
<operation>
<ID>_O4</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>248</x0>
<y0>22</y0>
<width>233</width>
<height>47</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>2</inpinx0>
<inpiny0>28</inpiny0>
<inpinwidth>78</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 指定アドレスメモリのデータを表示


int address = Integer.parseInt( s, 16 );
adrs_field.setText(hex6(address));
data_field.setText(hex2(mem[address]));
</codetext>
</operation>
<relation>
<ID>_R5</ID>
<pin1name>_P0</pin1name>
<pin2name>_O4</pin2name>
</relation>
<operation>
<ID>_O6</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>251</x0>
<y0>86</y0>
<width>263</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// アドレスを+1してメモリのデータを表示


int address = Integer.parseInt( adrs_field.getText(), 16 );
address++;
if( address &gt; 0xffffff ) address=0;
adrs_field.setText(hex6(address));
data_field.setText(hex2(mem[address]));
</codetext>
</operation>
<relation>
<ID>_R7</ID>
<pin1name>_P1</pin1name>
<pin2name>_O6</pin2name>
</relation>
<operation>
<ID>_O9</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>250</x0>
<y0>142</y0>
<width>268</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// アドレスを-1してメモリのデータを表示


int address = Integer.parseInt( adrs_field.getText(), 16 );
address--;
if( address &lt; 0 ) address=0xffffff;
adrs_field.setText(hex6(address));
data_field.setText(hex2(mem[address]));
</codetext>
</operation>
<relation>
<ID>_R10</ID>
<pin1name>_P2</pin1name>
<pin2name>_O9</pin2name>
</relation>
<operation>
<ID>_O11</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>255</x0>
<y0>206</y0>
<width>267</width>
<height>43</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>24</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// 表示されているデータをメモリに書き込む

int address = Integer.parseInt( adrs_field.getText(), 16 );
mem[address] = Integer.parseInt( data_field.getText(), 16 );
io_sync();
</codetext>
</operation>
<relation>
<ID>_R12</ID>
<pin1name>_P3</pin1name>
<pin2name>_O11</pin2name>
</relation>
</xobject>
<relation>
<ID>_R44</ID>
<pin1name>_A0(_PAinc_addr)</pin1name>
<pin2name>_X42(_P1)</pin2name>
</relation>
<relation>
<ID>_R45</ID>
<pin1name>_A0(_PAdec_addr)</pin1name>
<pin2name>_X42(_P2)</pin2name>
</relation>
<relation>
<ID>_R46</ID>
<pin1name>_A0(_PAmem_set)</pin1name>
<pin2name>_X42(_P3)</pin2name>
</relation>
<codeclip>
<ID>_C48</ID>
<x0>696</x0>
<y0>78</y0>
<width>229</width>
<height>28</height>
<codetext>// 長さが2文字の16進数文字列を返す
public String hex2( int i ){
  String s = Integer.toHexString(i);
  int l = s.length();
  if( l ==1 ) return &quot;0&quot;+s;
  return s;
}
</codetext>
</codeclip>
<relation>
<ID>_R53</ID>
<pin1name>_A0(_Prun_button)</pin1name>
<pin2name>_X19(_P59)</pin2name>
</relation>
<pin>
<ID>_P57</ID>
<x0>594</x0>
<y0>626</y0>
<width>63</width>
<height>22</height>
<text>io_sync()</text>
<px>10</px>
<py>40</py>
</pin>
<プロパティ>
<ID>properties</ID>
<LookandFeel>javax.swing.plaf.metal.MetalLookAndFeel</LookandFeel>
<MainWinx0>0</MainWinx0>
<MainWiny0>0</MainWiny0>
<MainWinWidth>1024</MainWinWidth>
<MainWinHeight>741</MainWinHeight>
<MesgWinx0>0</MesgWinx0>
<MesgWiny0>0</MesgWiny0>
<MesgWinWidth>1024</MesgWinWidth>
<MesgWinHeight>745</MesgWinHeight>
<FileWinx0>36</FileWinx0>
<FileWiny0>476</FileWiny0>
<FileWinWidth>578</FileWinWidth>
<FileWinHeight>262</FileWinHeight>
<EditWinx0>347</EditWinx0>
<EditWiny0>0</EditWiny0>
<EditWinWidth>676</EditWinWidth>
<EditWinHeight>541</EditWinHeight>
<PropWinx0>1</PropWinx0>
<PropWiny0>1</PropWiny0>
<PropWinWidth>615</PropWinWidth>
<PropWinHeight>448</PropWinHeight>
<DividerLocation1>2</DividerLocation1>
<DividerLocation2>2</DividerLocation2>
<ToolBarVisible>1</ToolBarVisible>
<ViewSourceAtCompile>0</ViewSourceAtCompile>
<NoSourceCreate>0</NoSourceCreate>
<JavaEditCommand>geany</JavaEditCommand>
<JavaViewCommand></JavaViewCommand>
<HelpCommand>xdg-open ./help/manual.html</HelpCommand>
<ApplicationType>0</ApplicationType>
<CompileCommand0>./compile_java</CompileCommand0>
<RunCommand0>./run_java</RunCommand0>
<GUIDesignerCommand0>java -jar guidsin.jar -java</GUIDesignerCommand0>
<ImportFiles0> import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.geom.*;
import java.awt.print.*;
import javax.swing.border.*;
import javax.swing.filechooser.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.image.BufferedImage;
import javax.sound.sampled.*;

class Starter{
  public static void main( String args[] ){
    %AppName% ap = new %AppName%();
    ap.ARGS = args;
    ap.Start();
  }
}
</ImportFiles0>
<ProgramStartupCode0> String[] ARGS;
</ProgramStartupCode0>
<NativeHelpCommand0></NativeHelpCommand0>
<CompileCommand1></CompileCommand1>
<RunCommand1></RunCommand1>
<GUIDesignerCommand1>java -jar guidsin.jar -applet</GUIDesignerCommand1>
<ImportFiles1> import java.awt.*;
 import java.awt.event.*;
 import java.applet.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
 public class javatext extends Applet {
   %AppName% ap;
   public void init() {
     ap = new %AppName%();
     ap.APPLET = this;
     ap.Start();
   }
 }
</ImportFiles1>
<ProgramStartupCode1> Applet APPLET;
</ProgramStartupCode1>
<NativeHelpCommand1></NativeHelpCommand1>
<CompileCommand2></CompileCommand2>
<RunCommand2></RunCommand2>
<GUIDesignerCommand2></GUIDesignerCommand2>
<ImportFiles2>#include &lt;stdio.h&gt;

void Startup();
</ImportFiles2>
<ProgramStartupCode2>int main(){
 Startup();
 %AppName%::Start();
 }
</ProgramStartupCode2>
<NativeHelpCommand2></NativeHelpCommand2>
<CompileCommand3></CompileCommand3>
<RunCommand3></RunCommand3>
<GUIDesignerCommand3>java -jar guidsin.jar -cpp</GUIDesignerCommand3>
<ImportFiles3>#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;math.h&gt;
#include &quot;Ekagen.h&quot;
void Startup();
</ImportFiles3>
<ProgramStartupCode3>void Emain(){
Startup();
%AppName%::Start();
}
</ProgramStartupCode3>
<NativeHelpCommand3></NativeHelpCommand3>
<MoveStep>8</MoveStep>
<ImageEditCommand></ImageEditCommand>
<CompilerFileName>javac.exe</CompilerFileName>
<CompileCommand4>./compile_android Test com example test</CompileCommand4>
<RunCommand4>./run_android Test com example test</RunCommand4>
<GUIDesignerCommand4>java -jar guidsin.jar -android</GUIDesignerCommand4>
<ImportFiles4>package com.example.test;

import android.os.Bundle;
import android.app.Activity;
import android.view.View;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.widget.Button;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.widget.EditText;
import android.text.SpannableStringBuilder;
import android.text.TextWatcher;
import android.text.Editable;
import android.graphics.Matrix;
import android.graphics.Typeface;
import android.graphics.RectF;
import android.graphics.BitmapFactory;
import java.io.*;
 import java.net.*;
import java.util.*;
import java.text.SimpleDateFormat;
import android.media.MediaPlayer;
import android.os.Handler;
import android.content.res.Configuration;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.app.Activity;
import android.graphics.Color;

import android.widget.AbsoluteLayout;
import android.widget.*;
import android.view.Gravity;
import android.view.View.OnClickListener;

import android.hardware.Camera;

public class HelloWorld extends Activity {
  public void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    %AppName% ap = new %AppName%();
    ap.ACTIVITY = this;
    ap.Start();
  }
}
</ImportFiles4>
<ProgramStartupCode4>Activity ACTIVITY;
</ProgramStartupCode4>
<NativeHelpCommand4>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.example.test&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot; &gt;

    
    
  &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.usb.host&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt;
  &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;

  &lt;uses-sdk android:minSdkVersion=&quot;3&quot; android:targetSdkVersion=&quot;21&quot;/&gt;
  
 
    &lt;application android:label=&quot;@string/app_name&quot; &gt;
        &lt;activity
            android:name=&quot;HelloWorld&quot;
            android:label=&quot;@string/app_name&quot; &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</NativeHelpCommand4>
<HtmlEditCommand></HtmlEditCommand>
<CompileCommand5></CompileCommand5>
<RunCommand5></RunCommand5>
<GUIDesignerCommand5></GUIDesignerCommand5>
<ImportFiles5></ImportFiles5>
<ProgramStartupCode5>gosub @_PSTART
end
</ProgramStartupCode5>
<NativeHelpCommand5></NativeHelpCommand5>
<NoOptimizePin>0</NoOptimizePin>
<CompileCommand6>./compile_c</CompileCommand6>
<RunCommand6>./run_c</RunCommand6>
<GUIDesignerCommand6></GUIDesignerCommand6>
<ImportFiles6>#include &lt;setjmp.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;math.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#include &lt;X11/Xlib.h&gt;
#include &lt;X11/Xutil.h&gt;
#include &lt;X11/Xlocale.h&gt; /* ロケール用ヘッダーファイル */
#include &lt;X11/xpm.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;
#include &lt;termios.h&gt;
#include &lt;errno.h&gt;
</ImportFiles6>
<ProgramStartupCode6>int ARGC; char** ARGV;
int main( int argc, char** argv ){
  ARGC=argc;
  ARGV=argv;
  _PSTART();
}
</ProgramStartupCode6>
<NativeHelpCommand6></NativeHelpCommand6>
<IDF_LocalVariable5>\</IDF_LocalVariable5>
<IDF_LocalVariable7>\</IDF_LocalVariable7>
<CompileCommand7></CompileCommand7>
<RunCommand7></RunCommand7>
<GUIDesignerCommand7></GUIDesignerCommand7>
<ImportFiles7></ImportFiles7>
<ProgramStartupCode7></ProgramStartupCode7>
<NativeHelpCommand7></NativeHelpCommand7>
</プロパティ>
<relation>
<ID>_R60</ID>
<pin1name>_A0(_Pstart)</pin1name>
<pin2name>_X19(_P16)</pin2name>
</relation>
<codeclip>
<ID>_C62</ID>
<x0>695</x0>
<y0>38</y0>
<width>230</width>
<height>35</height>
<codetext>// 長さが6文字の16進数文字列を返す
public String hex6( int i ){
  String s = Integer.toHexString(i);
  int l = s.length();
  if( l == 1 ) return &quot;00000&quot;+s;
  if( l == 2 ) return &quot;0000&quot;+s;
  if( l == 3 ) return &quot;000&quot;+s;
  if( l == 4 ) return &quot;00&quot;+s;
  if( l == 5 ) return &quot;0&quot;+s;
  return s;
}
</codetext>
</codeclip>
<relation>
<ID>_R68</ID>
<pin1name>_A0(_Ppc_reg)</pin1name>
<pin2name>_X19(_P17)</pin2name>
</relation>
<codeclip>
<ID>_C70</ID>
<x0>686</x0>
<y0>271</y0>
<width>301</width>
<height>38</height>
<codetext>//コマンドを実行して結果をコンソールに表示する
public void exec_command( String cmd ){

      Runtime runtime = Runtime.getRuntime();
      Process process;
      try {            //実行するコマンドを指定
        process = runtime.exec(cmd);
        new PrintThread(process.getInputStream()).start();
        new PrintThread(process.getErrorStream()).start();
        process.waitFor();
      } catch (Exception e) {}
    }


class PrintThread extends Thread{
  BufferedReader reader;
  PrintThread( InputStream s ){
    reader = new BufferedReader(new InputStreamReader(s));
  }
  
  public void run(){
    String line;
    try{
      while ((line = reader.readLine()) != null) message_area.append(line+&quot;\n&quot;);
      reader.close();
    } catch( IOException ie ){ }
  }
}
</codetext>
</codeclip>
<relation>
<ID>_R71</ID>
<pin1name>_A0(_Padrs_field)</pin1name>
<pin2name>_X19(_P62)</pin2name>
</relation>
<relation>
<ID>_R72</ID>
<pin1name>_A0(_Pdata_field)</pin1name>
<pin2name>_X19(_P63)</pin2name>
</relation>
<relation>
<ID>_R73</ID>
<pin1name>_A0(_PAadrs_field)</pin1name>
<pin2name>_X42(_P0)</pin2name>
</relation>
<xobject>
<ID>_X74</ID>
<x0>8</x0>
<y0>6</y0>
<width>101</width>
<height>150</height>
<ID_maker>20</ID_maker>
<objectname>command</objectname>
<description></description>
<operation>
<ID>_O0</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>177</x0>
<y0>250</y0>
<width>122</width>
<height>69</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>48</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>//終了する 






try{

BufferedWriter dout = new BufferedWriter( new FileWriter(ini_file));
dout.write(&quot;edit_command=&quot;+edit_command+&quot;\n&quot;);
dout.write(&quot;edit_inifile_command=&quot;+edit_inifile_command+&quot;\n&quot;);
dout.write(&quot;compile_command=&quot;+compile_command+&quot;\n&quot;);
dout.write(&quot;fast_run_command=&quot;+fast_run_command+&quot;\n&quot;);
dout.write(&quot;.entry\n&quot;);
dout.write(entry_field.getText()+&quot;\n&quot;);
dout.write(&quot;.break\n&quot;);
dout.write(break_field.getText()+&quot;\n&quot;);
dout.write(&quot;.watch\n&quot;);
int nn = memory_windows.size();
for( int i = 0;i &lt; nn; i++ ){
  memory_window w = (memory_window)(memory_windows.get(i));
  dout.write( w.name+&quot;\n&quot;+w.start+&quot;\n&quot;+w.end+&quot;\n&quot;);
}
dout.close();
} catch( Exception e ){}


System.exit(0);
</codetext>
</operation>
<pin>
<ID>_P4</ID>
<x0>32</x0>
<y0>49</y0>
<width>60</width>
<height>30</height>
<text>compile()</text>
<px>1</px>
<py>54</py>
</pin>
<pin>
<ID>_P5</ID>
<x0>36</x0>
<y0>127</y0>
<width>60</width>
<height>30</height>
<text>edit()</text>
<px>0</px>
<py>121</py>
</pin>
<pin>
<ID>_P6</ID>
<x0>38</x0>
<y0>281</y0>
<width>60</width>
<height>30</height>
<text>quit()</text>
<px>0</px>
<py>29</py>
</pin>
<relation>
<ID>_R9</ID>
<pin1name>_P6</pin1name>
<pin2name>_O0</pin2name>
</relation>
<operation>
<ID>_O10</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>161</x0>
<y0>46</y0>
<width>258</width>
<height>46</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(compile_command);


try{

BufferedReader din = new BufferedReader( new FileReader( &quot;r.out&quot; ) );

while(true){
  String line;
  int adrs,data;
  if((line=din.readLine()) == null )  break;
  adrs = Integer.parseInt(line);
  if((line=din.readLine()) == null )  break;
  data = Integer.parseInt(line);
  mem[adrs] = data;
}

din.close();


} catch( IOException ie ){message_area.append(&quot;load error!\n&quot;);}
</codetext>
</operation>
<operation>
<ID>_O11</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>172</x0>
<y0>116</y0>
<width>233</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(edit_command);
</codetext>
</operation>
<relation>
<ID>_R12</ID>
<pin1name>_P5</pin1name>
<pin2name>_O11</pin2name>
</relation>
<relation>
<ID>_R13</ID>
<pin1name>_P4</pin1name>
<pin2name>_O10</pin2name>
</relation>
<pin>
<ID>_P14</ID>
<x0>50</x0>
<y0>370</y0>
<width>60</width>
<height>30</height>
<text>clear()</text>
<px>0</px>
<py>77</py>
</pin>
<operation>
<ID>_O15</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>176</x0>
<y0>368</y0>
<width>168</width>
<height>50</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>30</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// レジスタ等のクリア


 pc_reg.setText(entry_field.getText());
 r0_reg.setText(&quot;0&quot;);
 r1_reg.setText(&quot;0&quot;);
 r2_reg.setText(&quot;0&quot;);
 r3_reg.setText(&quot;0&quot;);
 sp_reg.setText(&quot;0000&quot;);
 clock_field.setText(&quot;0&quot;);
 message_area.setText(&quot;&quot;);
 disp.setText(&quot;&quot;);
</codetext>
</operation>
<relation>
<ID>_R16</ID>
<pin1name>_P14</pin1name>
<pin2name>_O15</pin2name>
</relation>
<pin>
<ID>_P17</ID>
<x0>32</x0>
<y0>204</y0>
<width>75</width>
<height>25</height>
<text>fast_run()</text>
<px>0</px>
<py>99</py>
</pin>
<operation>
<ID>_O18</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>176</x0>
<y0>188</y0>
<width>244</width>
<height>49</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>exec_command(fast_run_command);
</codetext>
</operation>
<relation>
<ID>_R19</ID>
<pin1name>_P17</pin1name>
<pin2name>_O18</pin2name>
</relation>
</xobject>
<relation>
<ID>_R75</ID>
<pin1name>_A0(_PAcompile_button)</pin1name>
<pin2name>_X74(_P4)</pin2name>
</relation>
<relation>
<ID>_R78</ID>
<pin1name>_A0(_PAedit_button)</pin1name>
<pin2name>_X74(_P5)</pin2name>
</relation>
<relation>
<ID>_R79</ID>
<pin1name>_A0(_PGUIclosed)</pin1name>
<pin2name>_X74(_P6)</pin2name>
</relation>
<relation>
<ID>_R80</ID>
<pin1name>_A0(_Pname_field)</pin1name>
<pin2name>_X19(_P69)</pin2name>
</relation>
<relation>
<ID>_R84</ID>
<pin1name>_A0(_Psp_reg)</pin1name>
<pin2name>_X19(_P72)</pin2name>
</relation>
<relation>
<ID>_R87</ID>
<pin1name>_A0(_PAclr_button)</pin1name>
<pin2name>_X74(_P14)</pin2name>
</relation>
<codeclip>
<ID>_C88</ID>
<x0>687</x0>
<y0>316</y0>
<width>172</width>
<height>33</height>
<codetext>// 仮想マシンの命令セット
String opcode[] ={
&quot; hlt&quot;,			// 停止する
&quot; jmp&quot;,			// ジャンプする(アドレスは直接指定)
&quot; xxjmp&quot;,		// r0に格納されているアドレスにジャンプする
&quot; jge&quot;,			// 演算結果が&gt;=0ならジャンプする
&quot; jlt&quot;,			// 演算結果が&gt;0ならジャンプする
&quot; jz&quot;,			// 演算結果が==0ならジャンプする
&quot; jnz&quot;,			// 演算結果が!=0ならジャンプする
&quot; call&quot;,		// サブルーチンを呼び出す(アドレスは直接指定)
&quot; callxx&quot;,		// サブルーチンを呼び出す(アドレスは間接指定)
&quot; xxcall&quot;,		// r0に格納されているアドレスを呼び出す
&quot; ret&quot;,			// サブルーチンから復帰する
&quot; add&quot;,			// r0=r1+r0
&quot; sub&quot;,			// r0=r1-r0
&quot; mul&quot;,			// r0=r1*r0
&quot; div&quot;,			// r0=r1/r0
&quot; umul&quot;,		// r0=r1*r0(符号なし)
&quot; udiv&quot;,		// r0=r1/r0(符号なし)
&quot; mod&quot;,			// r0=r1%r0
&quot; and&quot;,			// r0=r1&amp;r0
&quot; or&quot;,			// r0=r1|r0
&quot; neg&quot;,			// r0=-r0
&quot; not&quot;,			// r0=~r0
&quot; in&quot;,			// ポートから入力した値をr0にセット
&quot; out&quot;,			// r0の値をポートに出力
&quot; swap&quot;,		// r0とr1の値を入れ替える
&quot; pushr&quot;,		// レジスタファイル(r1-r3)にr0の値をプッシュ
&quot; popr&quot;,		// レジスタファイル(r1-r3)からr0に値をポップ
&quot; pushs&quot;,		// スタックにr0の値をプッシュ
&quot; pops&quot;,		// スタックからr0に値をポップ
&quot; inc_l&quot;,		// オペランド(ロング型)をインクリメント
&quot; dec_l&quot;,		// オペランド(ロング型)をデクリメント
&quot; inc_b&quot;,		// オペランド(バイト型)をインクリメント
&quot; dec_b&quot;,		// オペランド(バイト型)をデクリメント
&quot; callxx_mbr&quot;,	// 構造体のメンバに格納されているアドレスを呼び出す
&quot; st_mbr_l&quot;,	// 構造体のメンバ(ロング型)にr0の値を格納する
&quot; st_mbr_b&quot;,	// 構造体のメンバ(バイト型)にr0の値を格納する
&quot; ld_mbr_l&quot;,	// 構造体のメンバ(ロング型)の値をr0にロードする
&quot; ld_mbr_b&quot;,	// 構造体のメンバ(バイト型)の値をr0にロードする
&quot; lea_mbr&quot;,		// 構造体のメンバのアドレスをr0にロードする
&quot; ldxx_a_v_l&quot;,	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは変数)
&quot; ld_a_v_l&quot;,	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは変数)
&quot; ldxx_a_v_b&quot;,	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは変数)
&quot; ld_a_v_b&quot;,	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは変数)
&quot; stxx_a_v_l&quot;,	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定,インデックスは変数)
&quot; st_a_v_l&quot;,	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定,インデックスは変数)
&quot; stxx_a_v_b&quot;,	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定,インデックスは変数)
&quot; st_a_v_b&quot;,	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定,インデックスは変数)
&quot; ldxx_a_k_l&quot;,	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは定数)
&quot; ld_a_k_l&quot;,	// 配列の要素(ロング型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは定数)
&quot; ldxx_a_k_b&quot;,	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは間接指定,インデックスは定数)
&quot; ld_a_k_b&quot;,	// 配列の要素(バイト型)の値をr0にロードする(配列のアドレスは直接指定,インデックスは定数)
&quot; stxx_a_k_l&quot;,	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは間接指定,インデックスは定数)
&quot; st_a_k_l&quot;,	// r0の値を配列の要素(ロング型)に格納する(配列のアドレスは直接指定,インデックスは定数)
&quot; stxx_a_k_b&quot;,	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは間接指定,インデックスは定数)
&quot; st_a_k_b&quot;,	// r0の値を配列の要素(バイト型)に格納する(配列のアドレスは直接指定,インデックスは定数)
&quot; ldxx_v_l&quot;,	// 変数(ロング型)の値をr0にロードする(アドレスは間接指定)
&quot; ld_v_l&quot;,		// 変数(ロング型)の値をr0にロードする(アドレスは直接指定)
&quot; ldxx_v_b&quot;,	// 変数(バイト型)の値をr0にロードする(アドレスは間接指定)
&quot; ld_v_b&quot;,		// 変数(バイト型)の値をr0にロードする(アドレスは直接指定)
&quot; ld_k&quot;,		// 定数をr0にセットする
&quot; stxx_v_l&quot;,	// r0の値を変数(ロング型)に格納する(アドレスは間接指定)
&quot; st_v_l&quot;,		// r0の値を変数(ロング型)に格納する(アドレスは直接指定)
&quot; stxx_v_b&quot;,	// r0の値を変数(バイト型)に格納する(アドレスは間接指定)
&quot; st_v_b&quot;		// r0の値を変数(バイト型)に格納する(アドレスは直接指定)
};

</codetext>
</codeclip>
<relation>
<ID>_R89</ID>
<pin1name>_A0(_PAadd_list)</pin1name>
<pin2name>_X6(_P2)</pin2name>
</relation>
<relation>
<ID>_R90</ID>
<pin1name>_A0(_PAdel_list)</pin1name>
<pin2name>_X6(_P3)</pin2name>
</relation>
<relation>
<ID>_R91</ID>
<pin1name>_A0(_PAinc_list)</pin1name>
<pin2name>_X6(_P35)</pin2name>
</relation>
<relation>
<ID>_R92</ID>
<pin1name>_A0(_PAdec_list)</pin1name>
<pin2name>_X6(_P36)</pin2name>
</relation>
<relation>
<ID>_R93</ID>
<pin1name>_A0(_PAhome_list)</pin1name>
<pin2name>_X6(_P37)</pin2name>
</relation>
<operation>
<ID>_O94</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>456</x0>
<y0>698</y0>
<width>125</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextArea t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>109</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>disp = t;
</codetext>
</operation>
<relation>
<ID>_R95</ID>
<pin1name>_A0(_Pdisp_area)</pin1name>
<pin2name>_O94</pin2name>
</relation>
<operation>
<ID>_O96</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>455</x0>
<y0>563</y0>
<width>125</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(JTextField t)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>109</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>cmd_line = t;


cmd_line.getDocument().addDocumentListener(listener = new keyinput_listener());
</codetext>
</operation>
<relation>
<ID>_R97</ID>
<pin1name>_A0(_Pcmd_field)</pin1name>
<pin2name>_O96</pin2name>
</relation>
<operation>
<ID>_O98</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>453</x0>
<y0>632</y0>
<width>128</width>
<height>55</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>33</inpiny0>
<inpinwidth>81</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>KeyCode = 10;
</codetext>
</operation>
<relation>
<ID>_R99</ID>
<pin1name>_A0(_PAcmd_field)</pin1name>
<pin2name>_O98</pin2name>
</relation>
<codeclip>
<ID>_C100</ID>
<x0>596</x0>
<y0>567</y0>
<width>364</width>
<height>36</height>
<codetext>keyinput_listener listener;
class keyinput_listener implements DocumentListener{

  String s;
  boolean allow = true;
  public void caretPositionChanged(InputMethodEvent e){}
  public void changedUpdate(DocumentEvent e){}//属性が変更されたときの処理
  public void insertUpdate(DocumentEvent e){
    KeyCode = 0;
    if(!is_gets){
      if( allow &amp;&amp; (s = cmd_line.getText()).length() &gt; 0 ){
        allow = false;
        KeyCode = (int)(byte)s.charAt(0);
        allow = true;
         }
      }
   }
  public void removeUpdate(DocumentEvent e){}//ドキュメントから削除されたときの処理

}
</codetext>
</codeclip>
<operation>
<ID>_O101</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>679</x0>
<y0>611</y0>
<width>182</width>
<height>45</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>26</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// メモリと周辺装置の同期



if( KeyCode != 0 ){
  if( KeyCode == &apos;\n&apos; ) KeyCode0 = 61;
  else if( KeyCode == &apos;\r&apos; ) KeyCode0 = 61;
  else if( KeyCode &lt; 32 )  KeyCode0 = 62;
  else if( KeyCode &gt;= 0x20 &amp;&amp; KeyCode &lt;= 0x5f ) KeyCode0 = KeyCode - 0x20;
  else if( KeyCode &gt;= &apos;a&apos; &amp;&amp; KeyCode &lt;= &apos;z&apos; )   KeyCode0 = KeyCode - &apos;a&apos; + &apos;A&apos; - &apos; &apos;;
  KeyCode = 0;
  cmd_line.setText(&quot;&quot;);
}

if( PrtData != 0xff ){
  int c = PrtData;
  if(c == 61 ) c = &apos;\n&apos;;// 改行コード
  else if(c == 62 ) c = &apos;\r&apos;;// エスケープコード
  else if(c == 63 ) c = &apos;\0&apos;;// ヌル文字
  else c+= 32;
  if( c == &apos;\r&apos; ) disp.setText(&quot;&quot;);
  else disp.append(&quot;&quot;+(char)(byte)(c));
  PrtData = 0xff;
}
</codetext>
</operation>
<relation>
<ID>_R102</ID>
<pin1name>_P57</pin1name>
<pin2name>_O101</pin2name>
</relation>
<codeclip>
<ID>_C104</ID>
<x0>680</x0>
<y0>490</y0>
<width>277</width>
<height>40</height>
<codetext>// 初期化ファイル
File ini_file=new File(&quot;card6vm_sym.ini&quot;);

</codetext>
</codeclip>
<relation>
<ID>_R105</ID>
<pin1name>_A0(_PAclear_list)</pin1name>
<pin2name>_X6(_P45)</pin2name>
</relation>
<relation>
<ID>_R106</ID>
<pin1name>_A0(_PAfast_run_button)</pin1name>
<pin2name>_X74(_P17)</pin2name>
</relation>
<relation>
<ID>_R107</ID>
<pin1name>_A0(_Pbreak_field)</pin1name>
<pin2name>_X19(_P78)</pin2name>
</relation>
<relation>
<ID>_R108</ID>
<pin1name>_A0(_PAinifile_button)</pin1name>
<pin2name>_X19(_P83)</pin2name>
</relation>
<relation>
<ID>_R110</ID>
<pin1name>_A0(_Pentry_field)</pin1name>
<pin2name>_X19(_P85)</pin2name>
</relation>
<relation>
<ID>_R111</ID>
<pin1name>_A0(_Pr0_reg)</pin1name>
<pin2name>_X19(_P2)</pin2name>
</relation>
<relation>
<ID>_R112</ID>
<pin1name>_A0(_Pr1_reg)</pin1name>
<pin2name>_X19(_P1)</pin2name>
</relation>
<relation>
<ID>_R113</ID>
<pin1name>_A0(_Pr2_reg)</pin1name>
<pin2name>_X19(_P0)</pin2name>
</relation>
<relation>
<ID>_R114</ID>
<pin1name>_A0(_Pr3_reg)</pin1name>
<pin2name>_X19(_P86)</pin2name>
</relation>
<aobject>
<ID>_A0</ID>
<x0>144</x0>
<y0>0</y0>
<width>280</width>
<objectname>GUI</objectname>
<description>GUIオブジェクト
</description>
<state>
<ID>_SINIT</ID>
<x0>0</x0>
<y0>40</y0>
<width>70</width>
<height>40</height>
<text>  InitState</text>
<isinitstate>1</isinitstate>
</state>
<pin>
<ID>_Pstart</ID>
<x0>400</x0>
<y0>100</y0>
<width>80</width>
<height>26</height>
<text>Start()</text>
<px>0</px>
<py>36</py>
</pin>
<pin>
<ID>_PGUIout</ID>
<x0>0</x0>
<y0>84</y0>
<width>180</width>
<height>26</height>
<text>GUI_created(JFrame f)</text>
<px>0</px>
<py>54</py>
</pin>
<pin>
<ID>_PGUIclosed</ID>
<x0>310</x0>
<y0>0</y0>
<width>180</width>
<height>26</height>
<text>GUI_closed()</text>
<px>100</px>
<py>6</py>
</pin>
<action>
<ID>_Astart</ID>
<comp1name>_Pstart</comp1name>
<comp2name>_Ocreate</comp2name>
</action>
<operation>
<ID>_Ocreate</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>220</x0>
<y0>40</y0>
<width>130</width>
<height>64</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// GUIを作成する
XGUI x = new XGUI();

</codetext>
</operation>
<pin>
<ID>_PAcompile_button</ID>
<x0>0</x0>
<y0>110</y0>
<width>200</width>
<height>26</height>
<text>compile_button_clicked()</text>
<px>0</px>
<py>72</py>
</pin>
<pin>
<ID>_PAclr_button</ID>
<x0>0</x0>
<y0>138</y0>
<width>200</width>
<height>26</height>
<text>clr_button_clicked()</text>
<px>0</px>
<py>90</py>
</pin>
<pin>
<ID>_PAfast_run_button</ID>
<x0>0</x0>
<y0>166</y0>
<width>200</width>
<height>26</height>
<text>fast_run_button_clicked()</text>
<px>0</px>
<py>108</py>
</pin>
<pin>
<ID>_PAinifile_button</ID>
<x0>0</x0>
<y0>194</y0>
<width>200</width>
<height>26</height>
<text>inifile_button_clicked()</text>
<px>0</px>
<py>126</py>
</pin>
<pin>
<ID>_PAedit_button</ID>
<x0>0</x0>
<y0>222</y0>
<width>200</width>
<height>26</height>
<text>edit_button_clicked()</text>
<px>0</px>
<py>144</py>
</pin>
<pin>
<ID>_Pentry_field</ID>
<x0>0</x0>
<y0>250</y0>
<width>200</width>
<height>26</height>
<text>entry_field_created(JTextField t)</text>
<px>0</px>
<py>162</py>
</pin>
<pin>
<ID>_Pbreak_field</ID>
<x0>0</x0>
<y0>278</y0>
<width>200</width>
<height>26</height>
<text>break_field_created(JTextField t)</text>
<px>0</px>
<py>180</py>
</pin>
<pin>
<ID>_Pr0_reg</ID>
<x0>0</x0>
<y0>306</y0>
<width>200</width>
<height>26</height>
<text>r0_reg_created(JTextField t)</text>
<px>0</px>
<py>198</py>
</pin>
<pin>
<ID>_Pr1_reg</ID>
<x0>0</x0>
<y0>334</y0>
<width>200</width>
<height>26</height>
<text>r1_reg_created(JTextField t)</text>
<px>0</px>
<py>216</py>
</pin>
<pin>
<ID>_Pr2_reg</ID>
<x0>0</x0>
<y0>362</y0>
<width>200</width>
<height>26</height>
<text>r2_reg_created(JTextField t)</text>
<px>0</px>
<py>234</py>
</pin>
<pin>
<ID>_Pr3_reg</ID>
<x0>0</x0>
<y0>390</y0>
<width>200</width>
<height>26</height>
<text>r3_reg_created(JTextField t)</text>
<px>0</px>
<py>252</py>
</pin>
<pin>
<ID>_Psp_reg</ID>
<x0>0</x0>
<y0>418</y0>
<width>200</width>
<height>26</height>
<text>sp_reg_created(JTextField t)</text>
<px>0</px>
<py>270</py>
</pin>
<pin>
<ID>_Pmessage_area</ID>
<x0>0</x0>
<y0>446</y0>
<width>200</width>
<height>26</height>
<text>message_area_created(JTextArea t)</text>
<px>0</px>
<py>288</py>
</pin>
<pin>
<ID>_Pclock_field</ID>
<x0>0</x0>
<y0>474</y0>
<width>200</width>
<height>26</height>
<text>clock_field_created(JTextField t)</text>
<px>0</px>
<py>306</py>
</pin>
<pin>
<ID>_Pname_field</ID>
<x0>0</x0>
<y0>502</y0>
<width>200</width>
<height>26</height>
<text>name_field_created(JTextField t)</text>
<px>0</px>
<py>324</py>
</pin>
<pin>
<ID>_Pstart_field</ID>
<x0>0</x0>
<y0>530</y0>
<width>200</width>
<height>26</height>
<text>start_field_created(JTextField t)</text>
<px>0</px>
<py>342</py>
</pin>
<pin>
<ID>_Pend_field</ID>
<x0>0</x0>
<y0>558</y0>
<width>200</width>
<height>26</height>
<text>end_field_created(JTextField t)</text>
<px>0</px>
<py>360</py>
</pin>
<pin>
<ID>_Pinterval_field</ID>
<x0>0</x0>
<y0>586</y0>
<width>200</width>
<height>26</height>
<text>interval_field_created(JTextField t)</text>
<px>0</px>
<py>378</py>
</pin>
<pin>
<ID>_Ppc_reg</ID>
<x0>0</x0>
<y0>614</y0>
<width>200</width>
<height>26</height>
<text>pc_reg_created(JTextField t)</text>
<px>0</px>
<py>396</py>
</pin>
<pin>
<ID>_Pdata_field</ID>
<x0>0</x0>
<y0>642</y0>
<width>200</width>
<height>26</height>
<text>data_field_created(JTextField t)</text>
<px>0</px>
<py>414</py>
</pin>
<pin>
<ID>_Padrs_field</ID>
<x0>0</x0>
<y0>670</y0>
<width>200</width>
<height>26</height>
<text>adrs_field_created(JTextField t)</text>
<px>0</px>
<py>432</py>
</pin>
<pin>
<ID>_PAadrs_field</ID>
<x0>0</x0>
<y0>698</y0>
<width>200</width>
<height>26</height>
<text>adrs_field_input(String s)</text>
<px>0</px>
<py>450</py>
</pin>
<pin>
<ID>_PAinc_addr</ID>
<x0>0</x0>
<y0>726</y0>
<width>200</width>
<height>26</height>
<text>inc_addr_clicked()</text>
<px>0</px>
<py>468</py>
</pin>
<pin>
<ID>_PAdec_addr</ID>
<x0>0</x0>
<y0>754</y0>
<width>200</width>
<height>26</height>
<text>dec_addr_clicked()</text>
<px>0</px>
<py>486</py>
</pin>
<pin>
<ID>_PAmem_set</ID>
<x0>0</x0>
<y0>782</y0>
<width>200</width>
<height>26</height>
<text>mem_set_clicked()</text>
<px>0</px>
<py>504</py>
</pin>
<pin>
<ID>_Prun_button</ID>
<x0>0</x0>
<y0>810</y0>
<width>200</width>
<height>26</height>
<text>run_button_created(JButton b)</text>
<px>0</px>
<py>522</py>
</pin>
<pin>
<ID>_PArun_button</ID>
<x0>0</x0>
<y0>838</y0>
<width>200</width>
<height>26</height>
<text>run_button_clicked()</text>
<px>0</px>
<py>540</py>
</pin>
<pin>
<ID>_PAclear_list</ID>
<x0>0</x0>
<y0>866</y0>
<width>200</width>
<height>26</height>
<text>clear_list_clicked()</text>
<px>0</px>
<py>558</py>
</pin>
<pin>
<ID>_PAadd_list</ID>
<x0>0</x0>
<y0>894</y0>
<width>200</width>
<height>26</height>
<text>add_list_clicked()</text>
<px>0</px>
<py>576</py>
</pin>
<pin>
<ID>_PAdel_list</ID>
<x0>0</x0>
<y0>922</y0>
<width>200</width>
<height>26</height>
<text>del_list_clicked()</text>
<px>0</px>
<py>594</py>
</pin>
<pin>
<ID>_PAhome_list</ID>
<x0>0</x0>
<y0>950</y0>
<width>200</width>
<height>26</height>
<text>home_list_clicked()</text>
<px>0</px>
<py>612</py>
</pin>
<pin>
<ID>_PAinc_list</ID>
<x0>0</x0>
<y0>978</y0>
<width>200</width>
<height>26</height>
<text>inc_list_clicked()</text>
<px>0</px>
<py>630</py>
</pin>
<pin>
<ID>_PAdec_list</ID>
<x0>0</x0>
<y0>1006</y0>
<width>200</width>
<height>26</height>
<text>dec_list_clicked()</text>
<px>0</px>
<py>648</py>
</pin>
<pin>
<ID>_PAsingle_button</ID>
<x0>0</x0>
<y0>1034</y0>
<width>200</width>
<height>26</height>
<text>single_button_clicked()</text>
<px>0</px>
<py>666</py>
</pin>
<pin>
<ID>_Pcmd_field</ID>
<x0>0</x0>
<y0>1062</y0>
<width>200</width>
<height>26</height>
<text>cmd_field_created(JTextField t)</text>
<px>0</px>
<py>684</py>
</pin>
<pin>
<ID>_PAcmd_field</ID>
<x0>0</x0>
<y0>1090</y0>
<width>200</width>
<height>26</height>
<text>cmd_field_input(String s)</text>
<px>0</px>
<py>702</py>
</pin>
<pin>
<ID>_Pdisp_area</ID>
<x0>0</x0>
<y0>1118</y0>
<width>200</width>
<height>26</height>
<text>disp_area_created(JTextArea t)</text>
<px>0</px>
<py>720</py>
</pin>
<codeclip>
<ID>_CXSTART</ID>
<x0>0</x0>
<y0>0</y0>
<width>300</width>
<height>26</height>
<codetext> class XGUI extends JFrame implements WindowListener{
 JPanel cnt;
compile_button Icompile_button;
 class compile_button extends JButton implements ActionListener{
  compile_button(){
 setOpaque( true );
 setName(  &quot;compile_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Compile&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ compile_button_clicked(); }
}
clr_button Iclr_button;
 class clr_button extends JButton implements ActionListener{
  clr_button(){
 setOpaque( true );
 setName(  &quot;clr_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;CLR&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ clr_button_clicked(); }
}
fast_run_button Ifast_run_button;
 class fast_run_button extends JButton implements ActionListener{
  fast_run_button(){
 setOpaque( true );
 setName(  &quot;fast_run_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Fast run&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ fast_run_button_clicked(); }
}
LABEL2 ILABEL2;
 class LABEL2 extends JLabel{
  LABEL2(){
 setOpaque( true );
 setName(  &quot;LABEL2&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R2&quot; );
}
}
LABEL3 ILABEL3;
 class LABEL3 extends JLabel{
  LABEL3(){
 setOpaque( true );
 setName(  &quot;LABEL3&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R1&quot; );
}
}
LABEL4 ILABEL4;
 class LABEL4 extends JLabel{
  LABEL4(){
 setOpaque( true );
 setName(  &quot;LABEL4&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R0&quot; );
}
}
inifile_button Iinifile_button;
 class inifile_button extends JButton implements ActionListener{
  inifile_button(){
 setOpaque( true );
 setName(  &quot;inifile_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Edit ini File&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inifile_button_clicked(); }
}
edit_button Iedit_button;
 class edit_button extends JButton implements ActionListener{
  edit_button(){
 setOpaque( true );
 setName(  &quot;edit_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;edit&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ edit_button_clicked(); }
}
entry_field Ientry_field;
 class entry_field extends JTextField{
  entry_field(){
 setOpaque( true );
 setName(  &quot;entry_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 entry_field_created( this );
}
}
break_field Ibreak_field;
 class break_field extends JTextField{
  break_field(){
 setOpaque( true );
 setName(  &quot;break_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 break_field_created( this );
}
}
r0_reg Ir0_reg;
 class r0_reg extends JTextField{
  r0_reg(){
 setOpaque( true );
 setName(  &quot;r0_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 r0_reg_created( this );
}
}
r1_reg Ir1_reg;
 class r1_reg extends JTextField{
  r1_reg(){
 setOpaque( true );
 setName(  &quot;r1_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 r1_reg_created( this );
}
}
r2_reg Ir2_reg;
 class r2_reg extends JTextField{
  r2_reg(){
 setOpaque( true );
 setName(  &quot;r2_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 r2_reg_created( this );
}
}
r3_reg Ir3_reg;
 class r3_reg extends JTextField{
  r3_reg(){
 setOpaque( true );
 setName(  &quot;r3_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 r3_reg_created( this );
}
}
sp_reg Isp_reg;
 class sp_reg extends JTextField{
  sp_reg(){
 setOpaque( true );
 setName(  &quot;sp_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;00000&quot; );
 sp_reg_created( this );
}
}
message_area Imessage_area;
 class message_area extends JTextArea{
 JScrollPane scrl;
  message_area(){
 setOpaque( true );
 setName(  &quot;message_area&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 scrl = new JScrollPane( this );
 message_area_created( this );
}
}
LABEL24 ILABEL24;
 class LABEL24 extends JLabel{
  LABEL24(){
 setOpaque( true );
 setName(  &quot;LABEL24&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 2 );
 setVerticalAlignment( 0 );
 setText( &quot;CYCLE:&quot; );
}
}
clock_field Iclock_field;
 class clock_field extends JTextField{
  clock_field(){
 setOpaque( true );
 setName(  &quot;clock_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 clock_field_created( this );
}
}
LABEL27 ILABEL27;
 class LABEL27 extends JLabel{
  LABEL27(){
 setOpaque( true );
 setName(  &quot;LABEL27&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Name&quot; );
}
}
LABEL28 ILABEL28;
 class LABEL28 extends JLabel{
  LABEL28(){
 setOpaque( true );
 setName(  &quot;LABEL28&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Start&quot; );
}
}
LABEL29 ILABEL29;
 class LABEL29 extends JLabel{
  LABEL29(){
 setOpaque( true );
 setName(  &quot;LABEL29&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;End&quot; );
}
}
name_field Iname_field;
 class name_field extends JTextField{
  name_field(){
 setOpaque( true );
 setName(  &quot;name_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 name_field_created( this );
}
}
start_field Istart_field;
 class start_field extends JTextField{
  start_field(){
 setOpaque( true );
 setName(  &quot;start_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 start_field_created( this );
}
}
end_field Iend_field;
 class end_field extends JTextField{
  end_field(){
 setOpaque( true );
 setName(  &quot;end_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;0&quot; );
 end_field_created( this );
}
}
LABEL33 ILABEL33;
 class LABEL33 extends JLabel{
  LABEL33(){
 setOpaque( true );
 setName(  &quot;LABEL33&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;interval time&quot; );
}
}
LABEL34 ILABEL34;
 class LABEL34 extends JLabel{
  LABEL34(){
 setOpaque( true );
 setName(  &quot;LABEL34&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;ms&quot; );
}
}
interval_field Iinterval_field;
 class interval_field extends JTextField{
  interval_field(){
 setOpaque( true );
 setName(  &quot;interval_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;1&quot; );
 interval_field_created( this );
}
}
LABEL36 ILABEL36;
 class LABEL36 extends JLabel{
  LABEL36(){
 setOpaque( true );
 setName(  &quot;LABEL36&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;PC&quot; );
}
}
pc_reg Ipc_reg;
 class pc_reg extends JTextField{
  pc_reg(){
 setOpaque( true );
 setName(  &quot;pc_reg&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;7000&quot; );
 pc_reg_created( this );
}
}
data_field Idata_field;
 class data_field extends JTextField{
  data_field(){
 setOpaque( true );
 setName(  &quot;data_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;00&quot; );
 data_field_created( this );
}
}
adrs_field Iadrs_field;
 class adrs_field extends JTextField implements ActionListener{
  adrs_field(){
 setOpaque( true );
 setName(  &quot;adrs_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;000000&quot; );
 addActionListener( this );
 adrs_field_created( this );
}
 public void actionPerformed( ActionEvent e ){ adrs_field_input( getText() ); }
}
inc_addr Iinc_addr;
 class inc_addr extends JButton implements ActionListener{
  inc_addr(){
 setOpaque( true );
 setName(  &quot;inc_addr&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;+&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inc_addr_clicked(); }
}
dec_addr Idec_addr;
 class dec_addr extends JButton implements ActionListener{
  dec_addr(){
 setOpaque( true );
 setName(  &quot;dec_addr&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;-&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ dec_addr_clicked(); }
}
mem_set Imem_set;
 class mem_set extends JButton implements ActionListener{
  mem_set(){
 setOpaque( true );
 setName(  &quot;mem_set&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;WRT&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ mem_set_clicked(); }
}
run_button Irun_button;
 class run_button extends JButton implements ActionListener{
  run_button(){
 setOpaque( true );
 setName(  &quot;run_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;run&quot; );
 addActionListener( this );
 run_button_created( this );
}
 public void actionPerformed( ActionEvent e ){ run_button_clicked(); }
}
clear_list Iclear_list;
 class clear_list extends JButton implements ActionListener{
  clear_list(){
 setOpaque( true );
 setName(  &quot;clear_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;C&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ clear_list_clicked(); }
}
add_list Iadd_list;
 class add_list extends JButton implements ActionListener{
  add_list(){
 setOpaque( true );
 setName(  &quot;add_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;add&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ add_list_clicked(); }
}
del_list Idel_list;
 class del_list extends JButton implements ActionListener{
  del_list(){
 setOpaque( true );
 setName(  &quot;del_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;del&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ del_list_clicked(); }
}
home_list Ihome_list;
 class home_list extends JButton implements ActionListener{
  home_list(){
 setOpaque( true );
 setName(  &quot;home_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;0&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ home_list_clicked(); }
}
inc_list Iinc_list;
 class inc_list extends JButton implements ActionListener{
  inc_list(){
 setOpaque( true );
 setName(  &quot;inc_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;&gt;&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ inc_list_clicked(); }
}
dec_list Idec_list;
 class dec_list extends JButton implements ActionListener{
  dec_list(){
 setOpaque( true );
 setName(  &quot;dec_list&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 9 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;&lt;&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ dec_list_clicked(); }
}
single_button Isingle_button;
 class single_button extends JButton implements ActionListener{
  single_button(){
 setOpaque( true );
 setName(  &quot;single_button&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 10 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;1step&quot; );
 addActionListener( this );
}
 public void actionPerformed( ActionEvent e ){ single_button_clicked(); }
}
LABEL35 ILABEL35;
 class LABEL35 extends JLabel{
  LABEL35(){
 setOpaque( true );
 setName(  &quot;LABEL35&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;SP&quot; );
}
}
cmd_field Icmd_field;
 class cmd_field extends JTextField implements ActionListener{
  cmd_field(){
 setOpaque( true );
 setName(  &quot;cmd_field&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  255, 255, 255 ));
 setText( &quot;&quot; );
 addActionListener( this );
 cmd_field_created( this );
}
 public void actionPerformed( ActionEvent e ){ cmd_field_input( getText() ); }
}
LABEL42 ILABEL42;
 class LABEL42 extends JLabel{
  LABEL42(){
 setOpaque( true );
 setName(  &quot;LABEL42&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Command:&quot; );
}
}
disp_area Idisp_area;
 class disp_area extends JTextArea{
 JScrollPane scrl;
  disp_area(){
 setOpaque( true );
 setName(  &quot;disp_area&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 20 ));
 setForeground( new Color(  29, 255, 32 ));
 setBackground( new Color(  1, 1, 1 ));
 setText( &quot;&quot; );
 scrl = new JScrollPane( this );
 disp_area_created( this );
}
}
LABEL44 ILABEL44;
 class LABEL44 extends JLabel{
  LABEL44(){
 setOpaque( true );
 setName(  &quot;LABEL44&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  195, 195, 195 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Break adrs:&quot; );
}
}
LABEL47 ILABEL47;
 class LABEL47 extends JLabel{
  LABEL47(){
 setOpaque( true );
 setName(  &quot;LABEL47&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;R3&quot; );
}
}
LABEL49 ILABEL49;
 class LABEL49 extends JLabel{
  LABEL49(){
 setOpaque( true );
 setName(  &quot;LABEL49&quot; );
 setFont( new Font( &quot;Dialog&quot;, 0, 12 ));
 setForeground( new Color(  51, 51, 51 ));
 setBackground( new Color(  192, 192, 192 ));
 setHorizontalAlignment( 0 );
 setVerticalAlignment( 0 );
 setText( &quot;Entry adrs:&quot; );
}
}
 XGUI(){
 setTitle(&quot;CARD6VMシミュレータ&quot;);
 cnt = new JPanel( new BorderLayout() );
 cnt.setPreferredSize(  new  Dimension( 893, 576 ) );
 ((Component)cnt).setBackground( new Color( 254, 252, 168 ) );
 Icompile_button = new compile_button();
 cnt.add( Icompile_button, 0 );
 cnt.getLayout().removeLayoutComponent( Icompile_button );
 Icompile_button.setBounds( 152, 1, 61, 29 );
 Iclr_button = new clr_button();
 cnt.add( Iclr_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iclr_button );
 Iclr_button.setBounds( 214, 1, 40, 29 );
 Ifast_run_button = new fast_run_button();
 cnt.add( Ifast_run_button, 0 );
 cnt.getLayout().removeLayoutComponent( Ifast_run_button );
 Ifast_run_button.setBounds( 297, 1, 74, 29 );
 ILABEL2 = new LABEL2();
 cnt.add( ILABEL2, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL2 );
 ILABEL2.setBounds( 240, 35, 39, 24 );
 ILABEL3 = new LABEL3();
 cnt.add( ILABEL3, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL3 );
 ILABEL3.setBounds( 201, 35, 37, 24 );
 ILABEL4 = new LABEL4();
 cnt.add( ILABEL4, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL4 );
 ILABEL4.setBounds( 160, 35, 39, 24 );
 Iinifile_button = new inifile_button();
 cnt.add( Iinifile_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iinifile_button );
 Iinifile_button.setBounds( 744, 3, 140, 27 );
 Iedit_button = new edit_button();
 cnt.add( Iedit_button, 0 );
 cnt.getLayout().removeLayoutComponent( Iedit_button );
 Iedit_button.setBounds( 113, 1, 37, 29 );
 Ientry_field = new entry_field();
 cnt.add( Ientry_field, 0 );
 cnt.getLayout().removeLayoutComponent( Ientry_field );
 Ientry_field.setBounds( 95, 139, 87, 20 );
 Ibreak_field = new break_field();
 cnt.add( Ibreak_field, 0 );
 cnt.getLayout().removeLayoutComponent( Ibreak_field );
 Ibreak_field.setBounds( 276, 138, 99, 22 );
 Ir0_reg = new r0_reg();
 cnt.add( Ir0_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir0_reg );
 Ir0_reg.setBounds( 161, 63, 39, 23 );
 Ir1_reg = new r1_reg();
 cnt.add( Ir1_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir1_reg );
 Ir1_reg.setBounds( 201, 62, 39, 24 );
 Ir2_reg = new r2_reg();
 cnt.add( Ir2_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir2_reg );
 Ir2_reg.setBounds( 241, 62, 40, 24 );
 Ir3_reg = new r3_reg();
 cnt.add( Ir3_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ir3_reg );
 Ir3_reg.setBounds( 282, 62, 42, 24 );
 Isp_reg = new sp_reg();
 cnt.add( Isp_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Isp_reg );
 Isp_reg.setBounds( 325, 62, 48, 24 );
 Imessage_area = new message_area();
 cnt.add( Imessage_area.scrl, 0 );
 cnt.getLayout().removeLayoutComponent( Imessage_area.scrl );
 (  Imessage_area.scrl ).setBounds( 5, 165, 367, 405 );
 ILABEL24 = new LABEL24();
 cnt.add( ILABEL24, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL24 );
 ILABEL24.setBounds( 2, 49, 59, 22 );
 Iclock_field = new clock_field();
 cnt.add( Iclock_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iclock_field );
 Iclock_field.setBounds( 1, 73, 60, 21 );
 ILABEL27 = new LABEL27();
 cnt.add( ILABEL27, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL27 );
 ILABEL27.setBounds( 226, 90, 53, 21 );
 ILABEL28 = new LABEL28();
 cnt.add( ILABEL28, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL28 );
 ILABEL28.setBounds( 281, 90, 45, 21 );
 ILABEL29 = new LABEL29();
 cnt.add( ILABEL29, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL29 );
 ILABEL29.setBounds( 328, 90, 43, 20 );
 Iname_field = new name_field();
 cnt.add( Iname_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iname_field );
 Iname_field.setBounds( 226, 113, 54, 22 );
 Istart_field = new start_field();
 cnt.add( Istart_field, 0 );
 cnt.getLayout().removeLayoutComponent( Istart_field );
 Istart_field.setBounds( 282, 113, 45, 22 );
 Iend_field = new end_field();
 cnt.add( Iend_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iend_field );
 Iend_field.setBounds( 328, 113, 46, 22 );
 ILABEL33 = new LABEL33();
 cnt.add( ILABEL33, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL33 );
 ILABEL33.setBounds( 1, 97, 107, 15 );
 ILABEL34 = new LABEL34();
 cnt.add( ILABEL34, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL34 );
 ILABEL34.setBounds( 80, 113, 27, 22 );
 Iinterval_field = new interval_field();
 cnt.add( Iinterval_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iinterval_field );
 Iinterval_field.setBounds( 3, 113, 75, 24 );
 ILABEL36 = new LABEL36();
 cnt.add( ILABEL36, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL36 );
 ILABEL36.setBounds( 112, 35, 46, 24 );
 Ipc_reg = new pc_reg();
 cnt.add( Ipc_reg, 0 );
 cnt.getLayout().removeLayoutComponent( Ipc_reg );
 Ipc_reg.setBounds( 111, 63, 49, 23 );
 Idata_field = new data_field();
 cnt.add( Idata_field, 0 );
 cnt.getLayout().removeLayoutComponent( Idata_field );
 Idata_field.setBounds( 70, 1, 40, 23 );
 Iadrs_field = new adrs_field();
 cnt.add( Iadrs_field, 0 );
 cnt.getLayout().removeLayoutComponent( Iadrs_field );
 Iadrs_field.setBounds( 1, 1, 67, 23 );
 Iinc_addr = new inc_addr();
 cnt.add( Iinc_addr, 0 );
 cnt.getLayout().removeLayoutComponent( Iinc_addr );
 Iinc_addr.setBounds( 31, 27, 26, 20 );
 Idec_addr = new dec_addr();
 cnt.add( Idec_addr, 0 );
 cnt.getLayout().removeLayoutComponent( Idec_addr );
 Idec_addr.setBounds( 1, 27, 27, 20 );
 Imem_set = new mem_set();
 cnt.add( Imem_set, 0 );
 cnt.getLayout().removeLayoutComponent( Imem_set );
 Imem_set.setBounds( 60, 27, 49, 20 );
 Irun_button = new run_button();
 cnt.add( Irun_button, 0 );
 cnt.getLayout().removeLayoutComponent( Irun_button );
 Irun_button.setBounds( 255, 1, 39, 29 );
 Iclear_list = new clear_list();
 cnt.add( Iclear_list, 0 );
 cnt.getLayout().removeLayoutComponent( Iclear_list );
 Iclear_list.setBounds( 111, 91, 34, 20 );
 Iadd_list = new add_list();
 cnt.add( Iadd_list, 0 );
 cnt.getLayout().removeLayoutComponent( Iadd_list );
 Iadd_list.setBounds( 148, 90, 40, 21 );
 Idel_list = new del_list();
 cnt.add( Idel_list, 0 );
 cnt.getLayout().removeLayoutComponent( Idel_list );
 Idel_list.setBounds( 190, 90, 33, 21 );
 Ihome_list = new home_list();
 cnt.add( Ihome_list, 0 );
 cnt.getLayout().removeLayoutComponent( Ihome_list );
 Ihome_list.setBounds( 111, 114, 34, 20 );
 Iinc_list = new inc_list();
 cnt.add( Iinc_list, 0 );
 cnt.getLayout().removeLayoutComponent( Iinc_list );
 Iinc_list.setBounds( 190, 114, 33, 20 );
 Idec_list = new dec_list();
 cnt.add( Idec_list, 0 );
 cnt.getLayout().removeLayoutComponent( Idec_list );
 Idec_list.setBounds( 149, 114, 38, 20 );
 Isingle_button = new single_button();
 cnt.add( Isingle_button, 0 );
 cnt.getLayout().removeLayoutComponent( Isingle_button );
 Isingle_button.setBounds( 64, 49, 45, 44 );
 ILABEL35 = new LABEL35();
 cnt.add( ILABEL35, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL35 );
 ILABEL35.setBounds( 324, 35, 47, 25 );
 Icmd_field = new cmd_field();
 cnt.add( Icmd_field, 0 );
 cnt.getLayout().removeLayoutComponent( Icmd_field );
 Icmd_field.setBounds( 473, 2, 266, 30 );
 ILABEL42 = new LABEL42();
 cnt.add( ILABEL42, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL42 );
 ILABEL42.setBounds( 379, 2, 91, 29 );
 Idisp_area = new disp_area();
 cnt.add( Idisp_area.scrl, 0 );
 cnt.getLayout().removeLayoutComponent( Idisp_area.scrl );
 (  Idisp_area.scrl ).setBounds( 380, 35, 507, 537 );
 ILABEL44 = new LABEL44();
 cnt.add( ILABEL44, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL44 );
 ILABEL44.setBounds( 185, 139, 88, 19 );
 ILABEL47 = new LABEL47();
 cnt.add( ILABEL47, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL47 );
 ILABEL47.setBounds( 281, 35, 41, 24 );
 ILABEL49 = new LABEL49();
 cnt.add( ILABEL49, 0 );
 cnt.getLayout().removeLayoutComponent( ILABEL49 );
 ILABEL49.setBounds( 1, 139, 91, 20 );
 setContentPane( cnt );
 pack();
 addWindowListener( this );
 setVisible( true );
 GUI_created( this );
}
 public void windowActivated( WindowEvent e ){}
 public void windowClosed( WindowEvent e ){}
 public void windowClosing( WindowEvent e ){ GUI_closed(); }
 public void windowDeactivated( WindowEvent e ){}
 public void windowDeiconified( WindowEvent e ){}
 public void windowIconified( WindowEvent e ){}
 public void windowOpened( WindowEvent e ){}
}
</codetext>
</codeclip>
<ID_maker>57</ID_maker>
<height>742</height>
<レイアウト>CARD6VMシミュレータ
893
576
254
252
168
xxscale=1
BUTTON;compile_button;Compile;152;1;61;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;clr_button;CLR;214;1;40;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;fast_run_button;Fast run;297;1;74;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
LABEL;LABEL2;R2;240;35;39;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL3;R1;201;35;37;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL4;R0;160;35;39;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
BUTTON;inifile_button;Edit ini File;744;3;140;27;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;edit_button;edit;113;1;37;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
TEXTFIELD;entry_field;0;95;139;87;20;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;break_field;0;276;138;99;22;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;r0_reg;0;161;63;39;23;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;r1_reg;0;201;62;39;24;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;r2_reg;0;241;62;40;24;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;r3_reg;0;282;62;42;24;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;sp_reg;00000;325;62;48;24;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTAREA;message_area;null;5;165;367;405;51;51;51;255;255;255;Dialog;12;1;1;1;JTextArea;
LABEL;LABEL24;CYCLE:;2;49;59;22;51;51;51;192;192;192;Dialog;12;null;2;0;1;0;0;JLabel;
TEXTFIELD;clock_field;0;1;73;60;21;51;51;51;255;255;255;Dialog;12;1;1;0;JTextField;
LABEL;LABEL27;Name;226;90;53;21;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL28;Start;281;90;45;21;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL29;End;328;90;43;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;name_field;null;226;113;54;22;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;start_field;0;282;113;45;22;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;end_field;0;328;113;46;22;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
LABEL;LABEL33;interval time;1;97;107;15;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL34;ms;80;113;27;22;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;interval_field;1;3;113;75;24;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
LABEL;LABEL36;PC;112;35;46;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;pc_reg;7000;111;63;49;23;51;51;51;255;255;255;Dialog;9;1;1;0;JTextField;
TEXTFIELD;data_field;00;70;1;40;23;51;51;51;255;255;255;Dialog;10;1;1;0;JTextField;
TEXTFIELD;adrs_field;000000;1;1;67;23;51;51;51;255;255;255;Dialog;10;1;1;1;JTextField;
BUTTON;inc_addr;+;31;27;26;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;dec_addr;-;1;27;27;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;mem_set;WRT;60;27;49;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;run_button;run;255;1;39;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;1;1;JButton;
BUTTON;clear_list;C;111;91;34;20;51;51;51;192;192;192;Dialog;10;null;0;0;1;0;1;JButton;
BUTTON;add_list;add;148;90;40;21;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;del_list;del;190;90;33;21;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;1;JButton;
BUTTON;home_list;0;111;114;34;20;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;inc_list;&gt;;190;114;33;20;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;dec_list;&lt;;149;114;38;20;51;51;51;192;192;192;Dialog;9;null;0;0;1;0;1;JButton;
BUTTON;single_button;1step;64;49;45;44;51;51;51;192;192;192;Dialog;10;null;0;0;1;0;1;JButton;
LABEL;LABEL35;SP;324;35;47;25;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTFIELD;cmd_field;null;473;2;266;30;51;51;51;255;255;255;Dialog;12;1;1;1;JTextField;
LABEL;LABEL42;Command:;379;2;91;29;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
TEXTAREA;disp_area;null;380;35;507;537;29;255;32;1;1;1;Dialog;20;1;1;1;JTextArea;
LABEL;LABEL44;Break adrs:;185;139;88;19;51;51;51;195;195;195;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL47;R3;281;35;41;24;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
LABEL;LABEL49;Entry adrs:;1;139;91;20;51;51;51;192;192;192;Dialog;12;null;0;0;1;0;0;JLabel;
</レイアウト>
</aobject>
</xobject>
